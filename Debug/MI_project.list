
MI_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009138  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080092d0  080092d0  0000a2d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009348  08009348  0000b120  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009348  08009348  0000a348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009350  08009350  0000b120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009350  08009350  0000a350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009354  08009354  0000a354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000120  20000000  08009358  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c04  20000120  08009478  0000b120  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d24  08009478  0000bd24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b120  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001861f  00000000  00000000  0000b150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b82  00000000  00000000  0002376f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  000272f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001042  00000000  00000000  00028808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000049bb  00000000  00000000  0002984a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b207  00000000  00000000  0002e205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e3fb  00000000  00000000  0004940c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7807  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058a0  00000000  00000000  000e784c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000ed0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000120 	.word	0x20000120
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080092b8 	.word	0x080092b8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000124 	.word	0x20000124
 80001d4:	080092b8 	.word	0x080092b8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
int main(void)
 800050a:	f107 0318 	add.w	r3, r7, #24
 800050e:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fd40 	bl	8000f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f8f8 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 fa9c 	bl	8000a54 <MX_GPIO_Init>
  MX_DMA_Init();
 800051c:	f000 fa7a 	bl	8000a14 <MX_DMA_Init>
  MX_ADC1_Init();
 8000520:	f000 f95a 	bl	80007d8 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000524:	f008 f93e 	bl	80087a4 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8000528:	f000 f9d2 	bl	80008d0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800052c:	f000 fa1e 	bl	800096c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000530:	f000 fa46 	bl	80009c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADC_Calibration_Start(&hadc1);

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcValues, 4);
 8000534:	2204      	movs	r2, #4
 8000536:	496a      	ldr	r1, [pc, #424]	@ (80006e0 <main+0x1dc>)
 8000538:	486a      	ldr	r0, [pc, #424]	@ (80006e4 <main+0x1e0>)
 800053a:	f000 ff15 	bl	8001368 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim3);  // Start TIM3 with interrupt
 800053e:	486a      	ldr	r0, [pc, #424]	@ (80006e8 <main+0x1e4>)
 8000540:	f004 f840 	bl	80045c4 <HAL_TIM_Base_Start_IT>

 // Start ADC in DMA mode

   HAL_Delay(200); // Wait for stable readings
 8000544:	20c8      	movs	r0, #200	@ 0xc8
 8000546:	f000 fd97 	bl	8001078 <HAL_Delay>

   // Auto-calibrate center
      center2_x = adcValues[0];
 800054a:	4b65      	ldr	r3, [pc, #404]	@ (80006e0 <main+0x1dc>)
 800054c:	881a      	ldrh	r2, [r3, #0]
 800054e:	4b67      	ldr	r3, [pc, #412]	@ (80006ec <main+0x1e8>)
 8000550:	801a      	strh	r2, [r3, #0]
      center2_y = adcValues[1];
 8000552:	4b63      	ldr	r3, [pc, #396]	@ (80006e0 <main+0x1dc>)
 8000554:	885a      	ldrh	r2, [r3, #2]
 8000556:	4b66      	ldr	r3, [pc, #408]	@ (80006f0 <main+0x1ec>)
 8000558:	801a      	strh	r2, [r3, #0]
      center1_x = adcValues[2];
 800055a:	4b61      	ldr	r3, [pc, #388]	@ (80006e0 <main+0x1dc>)
 800055c:	889a      	ldrh	r2, [r3, #4]
 800055e:	4b65      	ldr	r3, [pc, #404]	@ (80006f4 <main+0x1f0>)
 8000560:	801a      	strh	r2, [r3, #0]
      center1_y = adcValues[3];
 8000562:	4b5f      	ldr	r3, [pc, #380]	@ (80006e0 <main+0x1dc>)
 8000564:	88da      	ldrh	r2, [r3, #6]
 8000566:	4b64      	ldr	r3, [pc, #400]	@ (80006f8 <main+0x1f4>)
 8000568:	801a      	strh	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//
      uint8_t b2 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 800056a:	2104      	movs	r1, #4
 800056c:	4863      	ldr	r0, [pc, #396]	@ (80006fc <main+0x1f8>)
 800056e:	f002 f8d7 	bl	8002720 <HAL_GPIO_ReadPin>
 8000572:	4603      	mov	r3, r0
 8000574:	73fb      	strb	r3, [r7, #15]
      uint8_t b3 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 8000576:	2108      	movs	r1, #8
 8000578:	4860      	ldr	r0, [pc, #384]	@ (80006fc <main+0x1f8>)
 800057a:	f002 f8d1 	bl	8002720 <HAL_GPIO_ReadPin>
 800057e:	4603      	mov	r3, r0
 8000580:	73bb      	strb	r3, [r7, #14]
      uint8_t b4 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8000582:	2110      	movs	r1, #16
 8000584:	485d      	ldr	r0, [pc, #372]	@ (80006fc <main+0x1f8>)
 8000586:	f002 f8cb 	bl	8002720 <HAL_GPIO_ReadPin>
 800058a:	4603      	mov	r3, r0
 800058c:	737b      	strb	r3, [r7, #13]
      uint8_t b5 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 800058e:	2120      	movs	r1, #32
 8000590:	485a      	ldr	r0, [pc, #360]	@ (80006fc <main+0x1f8>)
 8000592:	f002 f8c5 	bl	8002720 <HAL_GPIO_ReadPin>
 8000596:	4603      	mov	r3, r0
 8000598:	733b      	strb	r3, [r7, #12]
      uint8_t b6 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 800059a:	2140      	movs	r1, #64	@ 0x40
 800059c:	4857      	ldr	r0, [pc, #348]	@ (80006fc <main+0x1f8>)
 800059e:	f002 f8bf 	bl	8002720 <HAL_GPIO_ReadPin>
 80005a2:	4603      	mov	r3, r0
 80005a4:	72fb      	strb	r3, [r7, #11]
      uint8_t b7 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 80005a6:	2180      	movs	r1, #128	@ 0x80
 80005a8:	4854      	ldr	r0, [pc, #336]	@ (80006fc <main+0x1f8>)
 80005aa:	f002 f8b9 	bl	8002720 <HAL_GPIO_ReadPin>
 80005ae:	4603      	mov	r3, r0
 80005b0:	72bb      	strb	r3, [r7, #10]
      uint8_t b8 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 80005b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005b6:	4851      	ldr	r0, [pc, #324]	@ (80006fc <main+0x1f8>)
 80005b8:	f002 f8b2 	bl	8002720 <HAL_GPIO_ReadPin>
 80005bc:	4603      	mov	r3, r0
 80005be:	727b      	strb	r3, [r7, #9]
      uint8_t b9 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);
 80005c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005c4:	484d      	ldr	r0, [pc, #308]	@ (80006fc <main+0x1f8>)
 80005c6:	f002 f8ab 	bl	8002720 <HAL_GPIO_ReadPin>
 80005ca:	4603      	mov	r3, r0
 80005cc:	723b      	strb	r3, [r7, #8]
      uint8_t home= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80005ce:	2101      	movs	r1, #1
 80005d0:	484b      	ldr	r0, [pc, #300]	@ (8000700 <main+0x1fc>)
 80005d2:	f002 f8a5 	bl	8002720 <HAL_GPIO_ReadPin>
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]

      if ((home == GPIO_PIN_RESET) || (b2 == GPIO_PIN_RESET) || (b3 == GPIO_PIN_RESET) || (b4 == GPIO_PIN_RESET) || (b5 == GPIO_PIN_RESET) || (b6 == GPIO_PIN_RESET) || (b7 == GPIO_PIN_RESET) || (b8 == GPIO_PIN_RESET) || (b9 == GPIO_PIN_RESET))
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d017      	beq.n	8000610 <main+0x10c>
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d014      	beq.n	8000610 <main+0x10c>
 80005e6:	7bbb      	ldrb	r3, [r7, #14]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d011      	beq.n	8000610 <main+0x10c>
 80005ec:	7b7b      	ldrb	r3, [r7, #13]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d00e      	beq.n	8000610 <main+0x10c>
 80005f2:	7b3b      	ldrb	r3, [r7, #12]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d00b      	beq.n	8000610 <main+0x10c>
 80005f8:	7afb      	ldrb	r3, [r7, #11]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d008      	beq.n	8000610 <main+0x10c>
 80005fe:	7abb      	ldrb	r3, [r7, #10]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d005      	beq.n	8000610 <main+0x10c>
 8000604:	7a7b      	ldrb	r3, [r7, #9]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d002      	beq.n	8000610 <main+0x10c>
 800060a:	7a3b      	ldrb	r3, [r7, #8]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d107      	bne.n	8000620 <main+0x11c>
      {
          HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000610:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000614:	483b      	ldr	r0, [pc, #236]	@ (8000704 <main+0x200>)
 8000616:	f002 f8b4 	bl	8002782 <HAL_GPIO_TogglePin>
          HAL_Delay(200);
 800061a:	20c8      	movs	r0, #200	@ 0xc8
 800061c:	f000 fd2c 	bl	8001078 <HAL_Delay>
      }

      // Joystick1 controls on-board LED PC13
      if ((adcValues[2] > center1_x + DEAD_ZONE) || (adcValues[2] < center1_x - DEAD_ZONE)
 8000620:	4b2f      	ldr	r3, [pc, #188]	@ (80006e0 <main+0x1dc>)
 8000622:	889b      	ldrh	r3, [r3, #4]
 8000624:	461a      	mov	r2, r3
 8000626:	4b33      	ldr	r3, [pc, #204]	@ (80006f4 <main+0x1f0>)
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	33c8      	adds	r3, #200	@ 0xc8
 800062c:	429a      	cmp	r2, r3
 800062e:	dc17      	bgt.n	8000660 <main+0x15c>
 8000630:	4b2b      	ldr	r3, [pc, #172]	@ (80006e0 <main+0x1dc>)
 8000632:	889b      	ldrh	r3, [r3, #4]
 8000634:	461a      	mov	r2, r3
 8000636:	4b2f      	ldr	r3, [pc, #188]	@ (80006f4 <main+0x1f0>)
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	3bc8      	subs	r3, #200	@ 0xc8
 800063c:	429a      	cmp	r2, r3
 800063e:	db0f      	blt.n	8000660 <main+0x15c>
       || (adcValues[3] > center1_y + DEAD_ZONE) || (adcValues[3] < center1_y - DEAD_ZONE))
 8000640:	4b27      	ldr	r3, [pc, #156]	@ (80006e0 <main+0x1dc>)
 8000642:	88db      	ldrh	r3, [r3, #6]
 8000644:	461a      	mov	r2, r3
 8000646:	4b2c      	ldr	r3, [pc, #176]	@ (80006f8 <main+0x1f4>)
 8000648:	881b      	ldrh	r3, [r3, #0]
 800064a:	33c8      	adds	r3, #200	@ 0xc8
 800064c:	429a      	cmp	r2, r3
 800064e:	dc07      	bgt.n	8000660 <main+0x15c>
 8000650:	4b23      	ldr	r3, [pc, #140]	@ (80006e0 <main+0x1dc>)
 8000652:	88db      	ldrh	r3, [r3, #6]
 8000654:	461a      	mov	r2, r3
 8000656:	4b28      	ldr	r3, [pc, #160]	@ (80006f8 <main+0x1f4>)
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	3bc8      	subs	r3, #200	@ 0xc8
 800065c:	429a      	cmp	r2, r3
 800065e:	da06      	bge.n	800066e <main+0x16a>
      {
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000666:	4827      	ldr	r0, [pc, #156]	@ (8000704 <main+0x200>)
 8000668:	f002 f872 	bl	8002750 <HAL_GPIO_WritePin>
 800066c:	e005      	b.n	800067a <main+0x176>
      }
      else
      {
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000674:	4823      	ldr	r0, [pc, #140]	@ (8000704 <main+0x200>)
 8000676:	f002 f86b 	bl	8002750 <HAL_GPIO_WritePin>
      }

      // Joystick2 drives external LED at PA9
      if ((adcValues[0] > center2_x + DEAD_ZONE) || (adcValues[0] < center2_x - DEAD_ZONE)
 800067a:	4b19      	ldr	r3, [pc, #100]	@ (80006e0 <main+0x1dc>)
 800067c:	881b      	ldrh	r3, [r3, #0]
 800067e:	461a      	mov	r2, r3
 8000680:	4b1a      	ldr	r3, [pc, #104]	@ (80006ec <main+0x1e8>)
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	33c8      	adds	r3, #200	@ 0xc8
 8000686:	429a      	cmp	r2, r3
 8000688:	dc17      	bgt.n	80006ba <main+0x1b6>
 800068a:	4b15      	ldr	r3, [pc, #84]	@ (80006e0 <main+0x1dc>)
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	461a      	mov	r2, r3
 8000690:	4b16      	ldr	r3, [pc, #88]	@ (80006ec <main+0x1e8>)
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	3bc8      	subs	r3, #200	@ 0xc8
 8000696:	429a      	cmp	r2, r3
 8000698:	db0f      	blt.n	80006ba <main+0x1b6>
       || (adcValues[1] > center2_y + DEAD_ZONE) || (adcValues[1] < center2_y - DEAD_ZONE))
 800069a:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <main+0x1dc>)
 800069c:	885b      	ldrh	r3, [r3, #2]
 800069e:	461a      	mov	r2, r3
 80006a0:	4b13      	ldr	r3, [pc, #76]	@ (80006f0 <main+0x1ec>)
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	33c8      	adds	r3, #200	@ 0xc8
 80006a6:	429a      	cmp	r2, r3
 80006a8:	dc07      	bgt.n	80006ba <main+0x1b6>
 80006aa:	4b0d      	ldr	r3, [pc, #52]	@ (80006e0 <main+0x1dc>)
 80006ac:	885b      	ldrh	r3, [r3, #2]
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <main+0x1ec>)
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	3bc8      	subs	r3, #200	@ 0xc8
 80006b6:	429a      	cmp	r2, r3
 80006b8:	da06      	bge.n	80006c8 <main+0x1c4>
      {
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80006ba:	2201      	movs	r2, #1
 80006bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006c0:	480f      	ldr	r0, [pc, #60]	@ (8000700 <main+0x1fc>)
 80006c2:	f002 f845 	bl	8002750 <HAL_GPIO_WritePin>
 80006c6:	e005      	b.n	80006d4 <main+0x1d0>
      }
      else
      {
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006ce:	480c      	ldr	r0, [pc, #48]	@ (8000700 <main+0x1fc>)
 80006d0:	f002 f83e 	bl	8002750 <HAL_GPIO_WritePin>
      }



      Joystick_SendReport();
 80006d4:	f008 f910 	bl	80088f8 <Joystick_SendReport>
          HAL_Delay(100);
 80006d8:	2064      	movs	r0, #100	@ 0x64
 80006da:	f000 fccd 	bl	8001078 <HAL_Delay>
  {
 80006de:	e744      	b.n	800056a <main+0x66>
 80006e0:	200002bc 	.word	0x200002bc
 80006e4:	2000013c 	.word	0x2000013c
 80006e8:	200001e4 	.word	0x200001e4
 80006ec:	200002c4 	.word	0x200002c4
 80006f0:	200002c6 	.word	0x200002c6
 80006f4:	200002c8 	.word	0x200002c8
 80006f8:	200002ca 	.word	0x200002ca
 80006fc:	40020400 	.word	0x40020400
 8000700:	40020000 	.word	0x40020000
 8000704:	40020800 	.word	0x40020800

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	@ 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0320 	add.w	r3, r7, #32
 8000712:	2230      	movs	r2, #48	@ 0x30
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f008 fda2 	bl	8009260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	4b27      	ldr	r3, [pc, #156]	@ (80007d0 <SystemClock_Config+0xc8>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000734:	4a26      	ldr	r2, [pc, #152]	@ (80007d0 <SystemClock_Config+0xc8>)
 8000736:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800073a:	6413      	str	r3, [r2, #64]	@ 0x40
 800073c:	4b24      	ldr	r3, [pc, #144]	@ (80007d0 <SystemClock_Config+0xc8>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000740:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	4b21      	ldr	r3, [pc, #132]	@ (80007d4 <SystemClock_Config+0xcc>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a20      	ldr	r2, [pc, #128]	@ (80007d4 <SystemClock_Config+0xcc>)
 8000752:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	4b1e      	ldr	r3, [pc, #120]	@ (80007d4 <SystemClock_Config+0xcc>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000764:	2301      	movs	r3, #1
 8000766:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000768:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800076c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076e:	2302      	movs	r3, #2
 8000770:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000772:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000776:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000778:	2319      	movs	r3, #25
 800077a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800077c:	23c0      	movs	r3, #192	@ 0xc0
 800077e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000780:	2302      	movs	r3, #2
 8000782:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000784:	2304      	movs	r3, #4
 8000786:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000788:	f107 0320 	add.w	r3, r7, #32
 800078c:	4618      	mov	r0, r3
 800078e:	f003 fa71 	bl	8003c74 <HAL_RCC_OscConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000798:	f000 f9f4 	bl	8000b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079c:	230f      	movs	r3, #15
 800079e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a0:	2302      	movs	r3, #2
 80007a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	2103      	movs	r1, #3
 80007b8:	4618      	mov	r0, r3
 80007ba:	f003 fcd3 	bl	8004164 <HAL_RCC_ClockConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007c4:	f000 f9de 	bl	8000b84 <Error_Handler>
  }
}
 80007c8:	bf00      	nop
 80007ca:	3750      	adds	r7, #80	@ 0x50
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40007000 	.word	0x40007000

080007d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007de:	463b      	mov	r3, r7
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007ea:	4b37      	ldr	r3, [pc, #220]	@ (80008c8 <MX_ADC1_Init+0xf0>)
 80007ec:	4a37      	ldr	r2, [pc, #220]	@ (80008cc <MX_ADC1_Init+0xf4>)
 80007ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007f0:	4b35      	ldr	r3, [pc, #212]	@ (80008c8 <MX_ADC1_Init+0xf0>)
 80007f2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80007f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007f8:	4b33      	ldr	r3, [pc, #204]	@ (80008c8 <MX_ADC1_Init+0xf0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80007fe:	4b32      	ldr	r3, [pc, #200]	@ (80008c8 <MX_ADC1_Init+0xf0>)
 8000800:	2201      	movs	r2, #1
 8000802:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000804:	4b30      	ldr	r3, [pc, #192]	@ (80008c8 <MX_ADC1_Init+0xf0>)
 8000806:	2201      	movs	r2, #1
 8000808:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800080a:	4b2f      	ldr	r3, [pc, #188]	@ (80008c8 <MX_ADC1_Init+0xf0>)
 800080c:	2200      	movs	r2, #0
 800080e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000812:	4b2d      	ldr	r3, [pc, #180]	@ (80008c8 <MX_ADC1_Init+0xf0>)
 8000814:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000818:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800081a:	4b2b      	ldr	r3, [pc, #172]	@ (80008c8 <MX_ADC1_Init+0xf0>)
 800081c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000820:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000822:	4b29      	ldr	r3, [pc, #164]	@ (80008c8 <MX_ADC1_Init+0xf0>)
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000828:	4b27      	ldr	r3, [pc, #156]	@ (80008c8 <MX_ADC1_Init+0xf0>)
 800082a:	2204      	movs	r2, #4
 800082c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800082e:	4b26      	ldr	r3, [pc, #152]	@ (80008c8 <MX_ADC1_Init+0xf0>)
 8000830:	2201      	movs	r2, #1
 8000832:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000836:	4b24      	ldr	r3, [pc, #144]	@ (80008c8 <MX_ADC1_Init+0xf0>)
 8000838:	2200      	movs	r2, #0
 800083a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800083c:	4822      	ldr	r0, [pc, #136]	@ (80008c8 <MX_ADC1_Init+0xf0>)
 800083e:	f000 fc3f 	bl	80010c0 <HAL_ADC_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000848:	f000 f99c 	bl	8000b84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800084c:	2309      	movs	r3, #9
 800084e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000850:	2301      	movs	r3, #1
 8000852:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000854:	2304      	movs	r3, #4
 8000856:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000858:	463b      	mov	r3, r7
 800085a:	4619      	mov	r1, r3
 800085c:	481a      	ldr	r0, [pc, #104]	@ (80008c8 <MX_ADC1_Init+0xf0>)
 800085e:	f000 fe9f 	bl	80015a0 <HAL_ADC_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000868:	f000 f98c 	bl	8000b84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800086c:	2308      	movs	r3, #8
 800086e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000870:	2302      	movs	r3, #2
 8000872:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000874:	463b      	mov	r3, r7
 8000876:	4619      	mov	r1, r3
 8000878:	4813      	ldr	r0, [pc, #76]	@ (80008c8 <MX_ADC1_Init+0xf0>)
 800087a:	f000 fe91 	bl	80015a0 <HAL_ADC_ConfigChannel>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000884:	f000 f97e 	bl	8000b84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000888:	2306      	movs	r3, #6
 800088a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800088c:	2303      	movs	r3, #3
 800088e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000890:	463b      	mov	r3, r7
 8000892:	4619      	mov	r1, r3
 8000894:	480c      	ldr	r0, [pc, #48]	@ (80008c8 <MX_ADC1_Init+0xf0>)
 8000896:	f000 fe83 	bl	80015a0 <HAL_ADC_ConfigChannel>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80008a0:	f000 f970 	bl	8000b84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80008a4:	2307      	movs	r3, #7
 80008a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80008a8:	2304      	movs	r3, #4
 80008aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ac:	463b      	mov	r3, r7
 80008ae:	4619      	mov	r1, r3
 80008b0:	4805      	ldr	r0, [pc, #20]	@ (80008c8 <MX_ADC1_Init+0xf0>)
 80008b2:	f000 fe75 	bl	80015a0 <HAL_ADC_ConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80008bc:	f000 f962 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2000013c 	.word	0x2000013c
 80008cc:	40012000 	.word	0x40012000

080008d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
//
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d6:	f107 0308 	add.w	r3, r7, #8
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e4:	463b      	mov	r3, r7
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
//
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000964 <MX_TIM3_Init+0x94>)
 80008ee:	4a1e      	ldr	r2, [pc, #120]	@ (8000968 <MX_TIM3_Init+0x98>)
 80008f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4799;
 80008f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000964 <MX_TIM3_Init+0x94>)
 80008f4:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 80008f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000964 <MX_TIM3_Init+0x94>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000900:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <MX_TIM3_Init+0x94>)
 8000902:	2263      	movs	r2, #99	@ 0x63
 8000904:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000906:	4b17      	ldr	r3, [pc, #92]	@ (8000964 <MX_TIM3_Init+0x94>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090c:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <MX_TIM3_Init+0x94>)
 800090e:	2200      	movs	r2, #0
 8000910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000912:	4814      	ldr	r0, [pc, #80]	@ (8000964 <MX_TIM3_Init+0x94>)
 8000914:	f003 fe06 	bl	8004524 <HAL_TIM_Base_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800091e:	f000 f931 	bl	8000b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000922:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000926:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000928:	f107 0308 	add.w	r3, r7, #8
 800092c:	4619      	mov	r1, r3
 800092e:	480d      	ldr	r0, [pc, #52]	@ (8000964 <MX_TIM3_Init+0x94>)
 8000930:	f003 ff9a 	bl	8004868 <HAL_TIM_ConfigClockSource>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800093a:	f000 f923 	bl	8000b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800093e:	2320      	movs	r3, #32
 8000940:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000946:	463b      	mov	r3, r7
 8000948:	4619      	mov	r1, r3
 800094a:	4806      	ldr	r0, [pc, #24]	@ (8000964 <MX_TIM3_Init+0x94>)
 800094c:	f004 f99c 	bl	8004c88 <HAL_TIMEx_MasterConfigSynchronization>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000956:	f000 f915 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
//
  /* USER CODE END TIM3_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	200001e4 	.word	0x200001e4
 8000968:	40000400 	.word	0x40000400

0800096c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000970:	4b11      	ldr	r3, [pc, #68]	@ (80009b8 <MX_USART1_UART_Init+0x4c>)
 8000972:	4a12      	ldr	r2, [pc, #72]	@ (80009bc <MX_USART1_UART_Init+0x50>)
 8000974:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000976:	4b10      	ldr	r3, [pc, #64]	@ (80009b8 <MX_USART1_UART_Init+0x4c>)
 8000978:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800097c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b0e      	ldr	r3, [pc, #56]	@ (80009b8 <MX_USART1_UART_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <MX_USART1_UART_Init+0x4c>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800098a:	4b0b      	ldr	r3, [pc, #44]	@ (80009b8 <MX_USART1_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <MX_USART1_UART_Init+0x4c>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b08      	ldr	r3, [pc, #32]	@ (80009b8 <MX_USART1_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <MX_USART1_UART_Init+0x4c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009a2:	4805      	ldr	r0, [pc, #20]	@ (80009b8 <MX_USART1_UART_Init+0x4c>)
 80009a4:	f004 f9f2 	bl	8004d8c <HAL_UART_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009ae:	f000 f8e9 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	2000022c 	.word	0x2000022c
 80009bc:	40011000 	.word	0x40011000

080009c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009c4:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <MX_USART2_UART_Init+0x4c>)
 80009c6:	4a12      	ldr	r2, [pc, #72]	@ (8000a10 <MX_USART2_UART_Init+0x50>)
 80009c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ca:	4b10      	ldr	r3, [pc, #64]	@ (8000a0c <MX_USART2_UART_Init+0x4c>)
 80009cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <MX_USART2_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <MX_USART2_UART_Init+0x4c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009de:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <MX_USART2_UART_Init+0x4c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009e4:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <MX_USART2_UART_Init+0x4c>)
 80009e6:	220c      	movs	r2, #12
 80009e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ea:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <MX_USART2_UART_Init+0x4c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <MX_USART2_UART_Init+0x4c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009f6:	4805      	ldr	r0, [pc, #20]	@ (8000a0c <MX_USART2_UART_Init+0x4c>)
 80009f8:	f004 f9c8 	bl	8004d8c <HAL_UART_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a02:	f000 f8bf 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000274 	.word	0x20000274
 8000a10:	40004400 	.word	0x40004400

08000a14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a50 <MX_DMA_Init+0x3c>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	4a0b      	ldr	r2, [pc, #44]	@ (8000a50 <MX_DMA_Init+0x3c>)
 8000a24:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <MX_DMA_Init+0x3c>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2038      	movs	r0, #56	@ 0x38
 8000a3c:	f001 f945 	bl	8001cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a40:	2038      	movs	r0, #56	@ 0x38
 8000a42:	f001 f95e 	bl	8001d02 <HAL_NVIC_EnableIRQ>

}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800

08000a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	@ 0x28
 8000a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b38      	ldr	r3, [pc, #224]	@ (8000b50 <MX_GPIO_Init+0xfc>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a37      	ldr	r2, [pc, #220]	@ (8000b50 <MX_GPIO_Init+0xfc>)
 8000a74:	f043 0304 	orr.w	r3, r3, #4
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7a:	4b35      	ldr	r3, [pc, #212]	@ (8000b50 <MX_GPIO_Init+0xfc>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f003 0304 	and.w	r3, r3, #4
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b31      	ldr	r3, [pc, #196]	@ (8000b50 <MX_GPIO_Init+0xfc>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	4a30      	ldr	r2, [pc, #192]	@ (8000b50 <MX_GPIO_Init+0xfc>)
 8000a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a96:	4b2e      	ldr	r3, [pc, #184]	@ (8000b50 <MX_GPIO_Init+0xfc>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	4b2a      	ldr	r3, [pc, #168]	@ (8000b50 <MX_GPIO_Init+0xfc>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	4a29      	ldr	r2, [pc, #164]	@ (8000b50 <MX_GPIO_Init+0xfc>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab2:	4b27      	ldr	r3, [pc, #156]	@ (8000b50 <MX_GPIO_Init+0xfc>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	4b23      	ldr	r3, [pc, #140]	@ (8000b50 <MX_GPIO_Init+0xfc>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	4a22      	ldr	r2, [pc, #136]	@ (8000b50 <MX_GPIO_Init+0xfc>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ace:	4b20      	ldr	r3, [pc, #128]	@ (8000b50 <MX_GPIO_Init+0xfc>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ae0:	481c      	ldr	r0, [pc, #112]	@ (8000b54 <MX_GPIO_Init+0x100>)
 8000ae2:	f001 fe35 	bl	8002750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ae6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aec:	2301      	movs	r3, #1
 8000aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	4815      	ldr	r0, [pc, #84]	@ (8000b54 <MX_GPIO_Init+0x100>)
 8000b00:	f001 fc8a 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pin : option_Pin */
  GPIO_InitStruct.Pin = option_Pin;
 8000b04:	2302      	movs	r3, #2
 8000b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b08:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(option_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4619      	mov	r1, r3
 8000b18:	480f      	ldr	r0, [pc, #60]	@ (8000b58 <MX_GPIO_Init+0x104>)
 8000b1a:	f001 fc7d 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB3 PB4 PB5
                           PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000b1e:	f44f 73fe 	mov.w	r3, #508	@ 0x1fc
 8000b22:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4619      	mov	r1, r3
 8000b32:	480a      	ldr	r0, [pc, #40]	@ (8000b5c <MX_GPIO_Init+0x108>)
 8000b34:	f001 fc70 	bl	8002418 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	2007      	movs	r0, #7
 8000b3e:	f001 f8c4 	bl	8001cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b42:	2007      	movs	r0, #7
 8000b44:	f001 f8dd 	bl	8001d02 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b48:	bf00      	nop
 8000b4a:	3728      	adds	r7, #40	@ 0x28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020800 	.word	0x40020800
 8000b58:	40020000 	.word	0x40020000
 8000b5c:	40020400 	.word	0x40020400

08000b60 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)  // If TIM3 triggers this callback
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a04      	ldr	r2, [pc, #16]	@ (8000b80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d101      	bne.n	8000b76 <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        Joystick_SendReport();  // Call your report function
 8000b72:	f007 fec1 	bl	80088f8 <Joystick_SendReport>
    }
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40000400 	.word	0x40000400

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <Error_Handler+0x8>

08000b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <HAL_MspInit+0x4c>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000bdc <HAL_MspInit+0x4c>)
 8000ba0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ba4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bdc <HAL_MspInit+0x4c>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000baa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	603b      	str	r3, [r7, #0]
 8000bb6:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <HAL_MspInit+0x4c>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bba:	4a08      	ldr	r2, [pc, #32]	@ (8000bdc <HAL_MspInit+0x4c>)
 8000bbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc2:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <HAL_MspInit+0x4c>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800

08000be0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	@ 0x28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a40      	ldr	r2, [pc, #256]	@ (8000d00 <HAL_ADC_MspInit+0x120>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d17a      	bne.n	8000cf8 <HAL_ADC_MspInit+0x118>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	4b3f      	ldr	r3, [pc, #252]	@ (8000d04 <HAL_ADC_MspInit+0x124>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c0a:	4a3e      	ldr	r2, [pc, #248]	@ (8000d04 <HAL_ADC_MspInit+0x124>)
 8000c0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c12:	4b3c      	ldr	r3, [pc, #240]	@ (8000d04 <HAL_ADC_MspInit+0x124>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	4b38      	ldr	r3, [pc, #224]	@ (8000d04 <HAL_ADC_MspInit+0x124>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	4a37      	ldr	r2, [pc, #220]	@ (8000d04 <HAL_ADC_MspInit+0x124>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2e:	4b35      	ldr	r3, [pc, #212]	@ (8000d04 <HAL_ADC_MspInit+0x124>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	4b31      	ldr	r3, [pc, #196]	@ (8000d04 <HAL_ADC_MspInit+0x124>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	4a30      	ldr	r2, [pc, #192]	@ (8000d04 <HAL_ADC_MspInit+0x124>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4a:	4b2e      	ldr	r3, [pc, #184]	@ (8000d04 <HAL_ADC_MspInit+0x124>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c56:	23c0      	movs	r3, #192	@ 0xc0
 8000c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	4827      	ldr	r0, [pc, #156]	@ (8000d08 <HAL_ADC_MspInit+0x128>)
 8000c6a:	f001 fbd5 	bl	8002418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c72:	2303      	movs	r3, #3
 8000c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4822      	ldr	r0, [pc, #136]	@ (8000d0c <HAL_ADC_MspInit+0x12c>)
 8000c82:	f001 fbc9 	bl	8002418 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c86:	4b22      	ldr	r3, [pc, #136]	@ (8000d10 <HAL_ADC_MspInit+0x130>)
 8000c88:	4a22      	ldr	r2, [pc, #136]	@ (8000d14 <HAL_ADC_MspInit+0x134>)
 8000c8a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c8c:	4b20      	ldr	r3, [pc, #128]	@ (8000d10 <HAL_ADC_MspInit+0x130>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c92:	4b1f      	ldr	r3, [pc, #124]	@ (8000d10 <HAL_ADC_MspInit+0x130>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c98:	4b1d      	ldr	r3, [pc, #116]	@ (8000d10 <HAL_ADC_MspInit+0x130>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d10 <HAL_ADC_MspInit+0x130>)
 8000ca0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ca4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d10 <HAL_ADC_MspInit+0x130>)
 8000ca8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000cac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cae:	4b18      	ldr	r3, [pc, #96]	@ (8000d10 <HAL_ADC_MspInit+0x130>)
 8000cb0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cb4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000cb6:	4b16      	ldr	r3, [pc, #88]	@ (8000d10 <HAL_ADC_MspInit+0x130>)
 8000cb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cbc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000cbe:	4b14      	ldr	r3, [pc, #80]	@ (8000d10 <HAL_ADC_MspInit+0x130>)
 8000cc0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000cc4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cc6:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <HAL_ADC_MspInit+0x130>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ccc:	4810      	ldr	r0, [pc, #64]	@ (8000d10 <HAL_ADC_MspInit+0x130>)
 8000cce:	f001 f833 	bl	8001d38 <HAL_DMA_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8000cd8:	f7ff ff54 	bl	8000b84 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a0c      	ldr	r2, [pc, #48]	@ (8000d10 <HAL_ADC_MspInit+0x130>)
 8000ce0:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	@ (8000d10 <HAL_ADC_MspInit+0x130>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2100      	movs	r1, #0
 8000cec:	2012      	movs	r0, #18
 8000cee:	f000 ffec 	bl	8001cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000cf2:	2012      	movs	r0, #18
 8000cf4:	f001 f805 	bl	8001d02 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000cf8:	bf00      	nop
 8000cfa:	3728      	adds	r7, #40	@ 0x28
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40012000 	.word	0x40012000
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020000 	.word	0x40020000
 8000d0c:	40020400 	.word	0x40020400
 8000d10:	20000184 	.word	0x20000184
 8000d14:	40026410 	.word	0x40026410

08000d18 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0e      	ldr	r2, [pc, #56]	@ (8000d60 <HAL_TIM_Base_MspInit+0x48>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d115      	bne.n	8000d56 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d64 <HAL_TIM_Base_MspInit+0x4c>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d32:	4a0c      	ldr	r2, [pc, #48]	@ (8000d64 <HAL_TIM_Base_MspInit+0x4c>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d64 <HAL_TIM_Base_MspInit+0x4c>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	201d      	movs	r0, #29
 8000d4c:	f000 ffbd 	bl	8001cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d50:	201d      	movs	r0, #29
 8000d52:	f000 ffd6 	bl	8001d02 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40000400 	.word	0x40000400
 8000d64:	40023800 	.word	0x40023800

08000d68 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08c      	sub	sp, #48	@ 0x30
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a32      	ldr	r2, [pc, #200]	@ (8000e50 <HAL_UART_MspInit+0xe8>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d12d      	bne.n	8000de6 <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
 8000d8e:	4b31      	ldr	r3, [pc, #196]	@ (8000e54 <HAL_UART_MspInit+0xec>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d92:	4a30      	ldr	r2, [pc, #192]	@ (8000e54 <HAL_UART_MspInit+0xec>)
 8000d94:	f043 0310 	orr.w	r3, r3, #16
 8000d98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d9a:	4b2e      	ldr	r3, [pc, #184]	@ (8000e54 <HAL_UART_MspInit+0xec>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9e:	f003 0310 	and.w	r3, r3, #16
 8000da2:	61bb      	str	r3, [r7, #24]
 8000da4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
 8000daa:	4b2a      	ldr	r3, [pc, #168]	@ (8000e54 <HAL_UART_MspInit+0xec>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	4a29      	ldr	r2, [pc, #164]	@ (8000e54 <HAL_UART_MspInit+0xec>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db6:	4b27      	ldr	r3, [pc, #156]	@ (8000e54 <HAL_UART_MspInit+0xec>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dc2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dd4:	2307      	movs	r3, #7
 8000dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	4619      	mov	r1, r3
 8000dde:	481e      	ldr	r0, [pc, #120]	@ (8000e58 <HAL_UART_MspInit+0xf0>)
 8000de0:	f001 fb1a 	bl	8002418 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000de4:	e030      	b.n	8000e48 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a1c      	ldr	r2, [pc, #112]	@ (8000e5c <HAL_UART_MspInit+0xf4>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d12b      	bne.n	8000e48 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000df0:	2300      	movs	r3, #0
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	4b17      	ldr	r3, [pc, #92]	@ (8000e54 <HAL_UART_MspInit+0xec>)
 8000df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df8:	4a16      	ldr	r2, [pc, #88]	@ (8000e54 <HAL_UART_MspInit+0xec>)
 8000dfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dfe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e00:	4b14      	ldr	r3, [pc, #80]	@ (8000e54 <HAL_UART_MspInit+0xec>)
 8000e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	4b10      	ldr	r3, [pc, #64]	@ (8000e54 <HAL_UART_MspInit+0xec>)
 8000e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e14:	4a0f      	ldr	r2, [pc, #60]	@ (8000e54 <HAL_UART_MspInit+0xec>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e54 <HAL_UART_MspInit+0xec>)
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e28:	230c      	movs	r3, #12
 8000e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e38:	2307      	movs	r3, #7
 8000e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	f107 031c 	add.w	r3, r7, #28
 8000e40:	4619      	mov	r1, r3
 8000e42:	4805      	ldr	r0, [pc, #20]	@ (8000e58 <HAL_UART_MspInit+0xf0>)
 8000e44:	f001 fae8 	bl	8002418 <HAL_GPIO_Init>
}
 8000e48:	bf00      	nop
 8000e4a:	3730      	adds	r7, #48	@ 0x30
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40011000 	.word	0x40011000
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020000 	.word	0x40020000
 8000e5c:	40004400 	.word	0x40004400

08000e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <NMI_Handler+0x4>

08000e68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <HardFault_Handler+0x4>

08000e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <MemManage_Handler+0x4>

08000e78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <BusFault_Handler+0x4>

08000e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <UsageFault_Handler+0x4>

08000e88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb6:	f000 f8bf 	bl	8001038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(option_Pin);
 8000ec2:	2002      	movs	r0, #2
 8000ec4:	f001 fc78 	bl	80027b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ed0:	4802      	ldr	r0, [pc, #8]	@ (8000edc <ADC_IRQHandler+0x10>)
 8000ed2:	f000 f938 	bl	8001146 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	2000013c 	.word	0x2000013c

08000ee0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ee4:	4802      	ldr	r0, [pc, #8]	@ (8000ef0 <TIM3_IRQHandler+0x10>)
 8000ee6:	f003 fbcf 	bl	8004688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200001e4 	.word	0x200001e4

08000ef4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ef8:	4802      	ldr	r0, [pc, #8]	@ (8000f04 <DMA2_Stream0_IRQHandler+0x10>)
 8000efa:	f001 f823 	bl	8001f44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000184 	.word	0x20000184

08000f08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f0c:	4802      	ldr	r0, [pc, #8]	@ (8000f18 <OTG_FS_IRQHandler+0x10>)
 8000f0e:	f001 fdba 	bl	8002a86 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200007e8 	.word	0x200007e8

08000f1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f20:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <SystemInit+0x20>)
 8000f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f26:	4a05      	ldr	r2, [pc, #20]	@ (8000f3c <SystemInit+0x20>)
 8000f28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f44:	f7ff ffea 	bl	8000f1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f48:	480c      	ldr	r0, [pc, #48]	@ (8000f7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f4a:	490d      	ldr	r1, [pc, #52]	@ (8000f80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f50:	e002      	b.n	8000f58 <LoopCopyDataInit>

08000f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f56:	3304      	adds	r3, #4

08000f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f5c:	d3f9      	bcc.n	8000f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f60:	4c0a      	ldr	r4, [pc, #40]	@ (8000f8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f64:	e001      	b.n	8000f6a <LoopFillZerobss>

08000f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f68:	3204      	adds	r2, #4

08000f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f6c:	d3fb      	bcc.n	8000f66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f6e:	f008 f97f 	bl	8009270 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f72:	f7ff fac7 	bl	8000504 <main>
  bx  lr    
 8000f76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f80:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8000f84:	08009358 	.word	0x08009358
  ldr r2, =_sbss
 8000f88:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8000f8c:	20000d24 	.word	0x20000d24

08000f90 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f90:	e7fe      	b.n	8000f90 <DMA1_Stream0_IRQHandler>
	...

08000f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f98:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd4 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd4 <HAL_Init+0x40>)
 8000f9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd4 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd4 <HAL_Init+0x40>)
 8000faa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb0:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a07      	ldr	r2, [pc, #28]	@ (8000fd4 <HAL_Init+0x40>)
 8000fb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fbc:	2003      	movs	r0, #3
 8000fbe:	f000 fe79 	bl	8001cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc2:	200f      	movs	r0, #15
 8000fc4:	f000 f808 	bl	8000fd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc8:	f7ff fde2 	bl	8000b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40023c00 	.word	0x40023c00

08000fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe0:	4b12      	ldr	r3, [pc, #72]	@ (800102c <HAL_InitTick+0x54>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b12      	ldr	r3, [pc, #72]	@ (8001030 <HAL_InitTick+0x58>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 fe91 	bl	8001d1e <HAL_SYSTICK_Config>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e00e      	b.n	8001024 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b0f      	cmp	r3, #15
 800100a:	d80a      	bhi.n	8001022 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800100c:	2200      	movs	r2, #0
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	f04f 30ff 	mov.w	r0, #4294967295
 8001014:	f000 fe59 	bl	8001cca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001018:	4a06      	ldr	r2, [pc, #24]	@ (8001034 <HAL_InitTick+0x5c>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800101e:	2300      	movs	r3, #0
 8001020:	e000      	b.n	8001024 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000000 	.word	0x20000000
 8001030:	20000008 	.word	0x20000008
 8001034:	20000004 	.word	0x20000004

08001038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800103c:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <HAL_IncTick+0x20>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	4b06      	ldr	r3, [pc, #24]	@ (800105c <HAL_IncTick+0x24>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4413      	add	r3, r2
 8001048:	4a04      	ldr	r2, [pc, #16]	@ (800105c <HAL_IncTick+0x24>)
 800104a:	6013      	str	r3, [r2, #0]
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000008 	.word	0x20000008
 800105c:	200002cc 	.word	0x200002cc

08001060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return uwTick;
 8001064:	4b03      	ldr	r3, [pc, #12]	@ (8001074 <HAL_GetTick+0x14>)
 8001066:	681b      	ldr	r3, [r3, #0]
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	200002cc 	.word	0x200002cc

08001078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001080:	f7ff ffee 	bl	8001060 <HAL_GetTick>
 8001084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001090:	d005      	beq.n	800109e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001092:	4b0a      	ldr	r3, [pc, #40]	@ (80010bc <HAL_Delay+0x44>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4413      	add	r3, r2
 800109c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800109e:	bf00      	nop
 80010a0:	f7ff ffde 	bl	8001060 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d8f7      	bhi.n	80010a0 <HAL_Delay+0x28>
  {
  }
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000008 	.word	0x20000008

080010c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c8:	2300      	movs	r3, #0
 80010ca:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e033      	b.n	800113e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d109      	bne.n	80010f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff fd7e 	bl	8000be0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f6:	f003 0310 	and.w	r3, r3, #16
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d118      	bne.n	8001130 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001102:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001106:	f023 0302 	bic.w	r3, r3, #2
 800110a:	f043 0202 	orr.w	r2, r3, #2
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 fb76 	bl	8001804 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001122:	f023 0303 	bic.w	r3, r3, #3
 8001126:	f043 0201 	orr.w	r2, r3, #1
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	641a      	str	r2, [r3, #64]	@ 0x40
 800112e:	e001      	b.n	8001134 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800113c:	7bfb      	ldrb	r3, [r7, #15]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b086      	sub	sp, #24
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	f003 0320 	and.w	r3, r3, #32
 8001174:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d049      	beq.n	8001210 <HAL_ADC_IRQHandler+0xca>
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d046      	beq.n	8001210 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001186:	f003 0310 	and.w	r3, r3, #16
 800118a:	2b00      	cmp	r3, #0
 800118c:	d105      	bne.n	800119a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001192:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d12b      	bne.n	8001200 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d127      	bne.n	8001200 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011b6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d006      	beq.n	80011cc <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d119      	bne.n	8001200 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f022 0220 	bic.w	r2, r2, #32
 80011da:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d105      	bne.n	8001200 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f8:	f043 0201 	orr.w	r2, r3, #1
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 f9a5 	bl	8001550 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f06f 0212 	mvn.w	r2, #18
 800120e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800121e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d057      	beq.n	80012d6 <HAL_ADC_IRQHandler+0x190>
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d054      	beq.n	80012d6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001230:	f003 0310 	and.w	r3, r3, #16
 8001234:	2b00      	cmp	r3, #0
 8001236:	d105      	bne.n	8001244 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d139      	bne.n	80012c6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001258:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800125c:	2b00      	cmp	r3, #0
 800125e:	d006      	beq.n	800126e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800126a:	2b00      	cmp	r3, #0
 800126c:	d12b      	bne.n	80012c6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001278:	2b00      	cmp	r3, #0
 800127a:	d124      	bne.n	80012c6 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001286:	2b00      	cmp	r3, #0
 8001288:	d11d      	bne.n	80012c6 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800128e:	2b00      	cmp	r3, #0
 8001290:	d119      	bne.n	80012c6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012a0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d105      	bne.n	80012c6 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012be:	f043 0201 	orr.w	r2, r3, #1
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 fc1a 	bl	8001b00 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f06f 020c 	mvn.w	r2, #12
 80012d4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012e4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d017      	beq.n	800131c <HAL_ADC_IRQHandler+0x1d6>
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d014      	beq.n	800131c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d10d      	bne.n	800131c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001304:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 f933 	bl	8001578 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f06f 0201 	mvn.w	r2, #1
 800131a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f003 0320 	and.w	r3, r3, #32
 8001322:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800132a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d015      	beq.n	800135e <HAL_ADC_IRQHandler+0x218>
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d012      	beq.n	800135e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133c:	f043 0202 	orr.w	r2, r3, #2
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f06f 0220 	mvn.w	r2, #32
 800134c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 f91c 	bl	800158c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f06f 0220 	mvn.w	r2, #32
 800135c:	601a      	str	r2, [r3, #0]
  }
}
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001378:	2300      	movs	r3, #0
 800137a:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001382:	2b01      	cmp	r3, #1
 8001384:	d101      	bne.n	800138a <HAL_ADC_Start_DMA+0x22>
 8001386:	2302      	movs	r3, #2
 8001388:	e0d0      	b.n	800152c <HAL_ADC_Start_DMA+0x1c4>
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2201      	movs	r2, #1
 800138e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b01      	cmp	r3, #1
 800139e:	d018      	beq.n	80013d2 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0201 	orr.w	r2, r2, #1
 80013ae:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013b0:	4b60      	ldr	r3, [pc, #384]	@ (8001534 <HAL_ADC_Start_DMA+0x1cc>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a60      	ldr	r2, [pc, #384]	@ (8001538 <HAL_ADC_Start_DMA+0x1d0>)
 80013b6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ba:	0c9a      	lsrs	r2, r3, #18
 80013bc:	4613      	mov	r3, r2
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	4413      	add	r3, r2
 80013c2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80013c4:	e002      	b.n	80013cc <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f9      	bne.n	80013c6 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80013e0:	d107      	bne.n	80013f2 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013f0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	f040 8088 	bne.w	8001512 <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001406:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800140a:	f023 0301 	bic.w	r3, r3, #1
 800140e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001420:	2b00      	cmp	r3, #0
 8001422:	d007      	beq.n	8001434 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001428:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800142c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001438:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800143c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001440:	d106      	bne.n	8001450 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001446:	f023 0206 	bic.w	r2, r3, #6
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	645a      	str	r2, [r3, #68]	@ 0x44
 800144e:	e002      	b.n	8001456 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2200      	movs	r2, #0
 8001454:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800145e:	4b37      	ldr	r3, [pc, #220]	@ (800153c <HAL_ADC_Start_DMA+0x1d4>)
 8001460:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001466:	4a36      	ldr	r2, [pc, #216]	@ (8001540 <HAL_ADC_Start_DMA+0x1d8>)
 8001468:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800146e:	4a35      	ldr	r2, [pc, #212]	@ (8001544 <HAL_ADC_Start_DMA+0x1dc>)
 8001470:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001476:	4a34      	ldr	r2, [pc, #208]	@ (8001548 <HAL_ADC_Start_DMA+0x1e0>)
 8001478:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001482:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001492:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80014a2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	334c      	adds	r3, #76	@ 0x4c
 80014ae:	4619      	mov	r1, r3
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f000 fcee 	bl	8001e94 <HAL_DMA_Start_IT>
 80014b8:	4603      	mov	r3, r0
 80014ba:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 031f 	and.w	r3, r3, #31
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d10f      	bne.n	80014e8 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d129      	bne.n	800152a <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	e020      	b.n	800152a <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a17      	ldr	r2, [pc, #92]	@ (800154c <HAL_ADC_Start_DMA+0x1e4>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d11b      	bne.n	800152a <HAL_ADC_Start_DMA+0x1c2>
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d114      	bne.n	800152a <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	e00b      	b.n	800152a <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001516:	f043 0210 	orr.w	r2, r3, #16
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001522:	f043 0201 	orr.w	r2, r3, #1
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 800152a:	7ffb      	ldrb	r3, [r7, #31]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3720      	adds	r7, #32
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000000 	.word	0x20000000
 8001538:	431bde83 	.word	0x431bde83
 800153c:	40012300 	.word	0x40012300
 8001540:	080019fd 	.word	0x080019fd
 8001544:	08001ab7 	.word	0x08001ab7
 8001548:	08001ad3 	.word	0x08001ad3
 800154c:	40012000 	.word	0x40012000

08001550 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d101      	bne.n	80015bc <HAL_ADC_ConfigChannel+0x1c>
 80015b8:	2302      	movs	r3, #2
 80015ba:	e113      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x244>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b09      	cmp	r3, #9
 80015ca:	d925      	bls.n	8001618 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68d9      	ldr	r1, [r3, #12]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	461a      	mov	r2, r3
 80015da:	4613      	mov	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	3b1e      	subs	r3, #30
 80015e2:	2207      	movs	r2, #7
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43da      	mvns	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	400a      	ands	r2, r1
 80015f0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68d9      	ldr	r1, [r3, #12]
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	b29b      	uxth	r3, r3
 8001602:	4618      	mov	r0, r3
 8001604:	4603      	mov	r3, r0
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4403      	add	r3, r0
 800160a:	3b1e      	subs	r3, #30
 800160c:	409a      	lsls	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	430a      	orrs	r2, r1
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	e022      	b.n	800165e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6919      	ldr	r1, [r3, #16]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	b29b      	uxth	r3, r3
 8001624:	461a      	mov	r2, r3
 8001626:	4613      	mov	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4413      	add	r3, r2
 800162c:	2207      	movs	r2, #7
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43da      	mvns	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	400a      	ands	r2, r1
 800163a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6919      	ldr	r1, [r3, #16]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	b29b      	uxth	r3, r3
 800164c:	4618      	mov	r0, r3
 800164e:	4603      	mov	r3, r0
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4403      	add	r3, r0
 8001654:	409a      	lsls	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b06      	cmp	r3, #6
 8001664:	d824      	bhi.n	80016b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	3b05      	subs	r3, #5
 8001678:	221f      	movs	r2, #31
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43da      	mvns	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	400a      	ands	r2, r1
 8001686:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	b29b      	uxth	r3, r3
 8001694:	4618      	mov	r0, r3
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	3b05      	subs	r3, #5
 80016a2:	fa00 f203 	lsl.w	r2, r0, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80016ae:	e04c      	b.n	800174a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b0c      	cmp	r3, #12
 80016b6:	d824      	bhi.n	8001702 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	3b23      	subs	r3, #35	@ 0x23
 80016ca:	221f      	movs	r2, #31
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43da      	mvns	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	400a      	ands	r2, r1
 80016d8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	4613      	mov	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	3b23      	subs	r3, #35	@ 0x23
 80016f4:	fa00 f203 	lsl.w	r2, r0, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	430a      	orrs	r2, r1
 80016fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8001700:	e023      	b.n	800174a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	4613      	mov	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	3b41      	subs	r3, #65	@ 0x41
 8001714:	221f      	movs	r2, #31
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43da      	mvns	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	400a      	ands	r2, r1
 8001722:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	b29b      	uxth	r3, r3
 8001730:	4618      	mov	r0, r3
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	4613      	mov	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	3b41      	subs	r3, #65	@ 0x41
 800173e:	fa00 f203 	lsl.w	r2, r0, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800174a:	4b29      	ldr	r3, [pc, #164]	@ (80017f0 <HAL_ADC_ConfigChannel+0x250>)
 800174c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a28      	ldr	r2, [pc, #160]	@ (80017f4 <HAL_ADC_ConfigChannel+0x254>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d10f      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x1d8>
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b12      	cmp	r3, #18
 800175e:	d10b      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a1d      	ldr	r2, [pc, #116]	@ (80017f4 <HAL_ADC_ConfigChannel+0x254>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d12b      	bne.n	80017da <HAL_ADC_ConfigChannel+0x23a>
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a1c      	ldr	r2, [pc, #112]	@ (80017f8 <HAL_ADC_ConfigChannel+0x258>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d003      	beq.n	8001794 <HAL_ADC_ConfigChannel+0x1f4>
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b11      	cmp	r3, #17
 8001792:	d122      	bne.n	80017da <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a11      	ldr	r2, [pc, #68]	@ (80017f8 <HAL_ADC_ConfigChannel+0x258>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d111      	bne.n	80017da <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017b6:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <HAL_ADC_ConfigChannel+0x25c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a11      	ldr	r2, [pc, #68]	@ (8001800 <HAL_ADC_ConfigChannel+0x260>)
 80017bc:	fba2 2303 	umull	r2, r3, r2, r3
 80017c0:	0c9a      	lsrs	r2, r3, #18
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017cc:	e002      	b.n	80017d4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	3b01      	subs	r3, #1
 80017d2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f9      	bne.n	80017ce <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	40012300 	.word	0x40012300
 80017f4:	40012000 	.word	0x40012000
 80017f8:	10000012 	.word	0x10000012
 80017fc:	20000000 	.word	0x20000000
 8001800:	431bde83 	.word	0x431bde83

08001804 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800180c:	4b79      	ldr	r3, [pc, #484]	@ (80019f4 <ADC_Init+0x1f0>)
 800180e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	431a      	orrs	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001838:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6859      	ldr	r1, [r3, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	021a      	lsls	r2, r3, #8
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800185c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6859      	ldr	r1, [r3, #4]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800187e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6899      	ldr	r1, [r3, #8]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68da      	ldr	r2, [r3, #12]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	430a      	orrs	r2, r1
 8001890:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001896:	4a58      	ldr	r2, [pc, #352]	@ (80019f8 <ADC_Init+0x1f4>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d022      	beq.n	80018e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6899      	ldr	r1, [r3, #8]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80018cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6899      	ldr	r1, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	e00f      	b.n	8001902 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001900:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0202 	bic.w	r2, r2, #2
 8001910:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6899      	ldr	r1, [r3, #8]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	7e1b      	ldrb	r3, [r3, #24]
 800191c:	005a      	lsls	r2, r3, #1
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	430a      	orrs	r2, r1
 8001924:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 3020 	ldrb.w	r3, [r3, #32]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d01b      	beq.n	8001968 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800193e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800194e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6859      	ldr	r1, [r3, #4]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195a:	3b01      	subs	r3, #1
 800195c:	035a      	lsls	r2, r3, #13
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	430a      	orrs	r2, r1
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	e007      	b.n	8001978 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001976:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001986:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	3b01      	subs	r3, #1
 8001994:	051a      	lsls	r2, r3, #20
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	430a      	orrs	r2, r1
 800199c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80019ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6899      	ldr	r1, [r3, #8]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019ba:	025a      	lsls	r2, r3, #9
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	430a      	orrs	r2, r1
 80019c2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6899      	ldr	r1, [r3, #8]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	029a      	lsls	r2, r3, #10
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	609a      	str	r2, [r3, #8]
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	40012300 	.word	0x40012300
 80019f8:	0f000001 	.word	0x0f000001

080019fc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a08:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d13c      	bne.n	8001a90 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d12b      	bne.n	8001a88 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d127      	bne.n	8001a88 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a3e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d006      	beq.n	8001a54 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d119      	bne.n	8001a88 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0220 	bic.w	r2, r2, #32
 8001a62:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d105      	bne.n	8001a88 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a80:	f043 0201 	orr.w	r2, r3, #1
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f7ff fd61 	bl	8001550 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001a8e:	e00e      	b.n	8001aae <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a94:	f003 0310 	and.w	r3, r3, #16
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f7ff fd75 	bl	800158c <HAL_ADC_ErrorCallback>
}
 8001aa2:	e004      	b.n	8001aae <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	4798      	blx	r3
}
 8001aae:	bf00      	nop
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b084      	sub	sp, #16
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ac2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f7ff fd4d 	bl	8001564 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b084      	sub	sp, #16
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ade:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2240      	movs	r2, #64	@ 0x40
 8001ae4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aea:	f043 0204 	orr.w	r2, r3, #4
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f7ff fd4a 	bl	800158c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001af8:	bf00      	nop
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b24:	4b0c      	ldr	r3, [pc, #48]	@ (8001b58 <__NVIC_SetPriorityGrouping+0x44>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b30:	4013      	ands	r3, r2
 8001b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b46:	4a04      	ldr	r2, [pc, #16]	@ (8001b58 <__NVIC_SetPriorityGrouping+0x44>)
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	60d3      	str	r3, [r2, #12]
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b60:	4b04      	ldr	r3, [pc, #16]	@ (8001b74 <__NVIC_GetPriorityGrouping+0x18>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	0a1b      	lsrs	r3, r3, #8
 8001b66:	f003 0307 	and.w	r3, r3, #7
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	db0b      	blt.n	8001ba2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	f003 021f 	and.w	r2, r3, #31
 8001b90:	4907      	ldr	r1, [pc, #28]	@ (8001bb0 <__NVIC_EnableIRQ+0x38>)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	095b      	lsrs	r3, r3, #5
 8001b98:	2001      	movs	r0, #1
 8001b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000e100 	.word	0xe000e100

08001bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	6039      	str	r1, [r7, #0]
 8001bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	db0a      	blt.n	8001bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	490c      	ldr	r1, [pc, #48]	@ (8001c00 <__NVIC_SetPriority+0x4c>)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	0112      	lsls	r2, r2, #4
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bdc:	e00a      	b.n	8001bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4908      	ldr	r1, [pc, #32]	@ (8001c04 <__NVIC_SetPriority+0x50>)
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	3b04      	subs	r3, #4
 8001bec:	0112      	lsls	r2, r2, #4
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	761a      	strb	r2, [r3, #24]
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000e100 	.word	0xe000e100
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b089      	sub	sp, #36	@ 0x24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f1c3 0307 	rsb	r3, r3, #7
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	bf28      	it	cs
 8001c26:	2304      	movcs	r3, #4
 8001c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	2b06      	cmp	r3, #6
 8001c30:	d902      	bls.n	8001c38 <NVIC_EncodePriority+0x30>
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3b03      	subs	r3, #3
 8001c36:	e000      	b.n	8001c3a <NVIC_EncodePriority+0x32>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43da      	mvns	r2, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c50:	f04f 31ff 	mov.w	r1, #4294967295
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	43d9      	mvns	r1, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c60:	4313      	orrs	r3, r2
         );
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3724      	adds	r7, #36	@ 0x24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c80:	d301      	bcc.n	8001c86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c82:	2301      	movs	r3, #1
 8001c84:	e00f      	b.n	8001ca6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c86:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb0 <SysTick_Config+0x40>)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c8e:	210f      	movs	r1, #15
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295
 8001c94:	f7ff ff8e 	bl	8001bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c98:	4b05      	ldr	r3, [pc, #20]	@ (8001cb0 <SysTick_Config+0x40>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9e:	4b04      	ldr	r3, [pc, #16]	@ (8001cb0 <SysTick_Config+0x40>)
 8001ca0:	2207      	movs	r2, #7
 8001ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	e000e010 	.word	0xe000e010

08001cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ff29 	bl	8001b14 <__NVIC_SetPriorityGrouping>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b086      	sub	sp, #24
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	60b9      	str	r1, [r7, #8]
 8001cd4:	607a      	str	r2, [r7, #4]
 8001cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cdc:	f7ff ff3e 	bl	8001b5c <__NVIC_GetPriorityGrouping>
 8001ce0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	68b9      	ldr	r1, [r7, #8]
 8001ce6:	6978      	ldr	r0, [r7, #20]
 8001ce8:	f7ff ff8e 	bl	8001c08 <NVIC_EncodePriority>
 8001cec:	4602      	mov	r2, r0
 8001cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff5d 	bl	8001bb4 <__NVIC_SetPriority>
}
 8001cfa:	bf00      	nop
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	4603      	mov	r3, r0
 8001d0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff31 	bl	8001b78 <__NVIC_EnableIRQ>
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff ffa2 	bl	8001c70 <SysTick_Config>
 8001d2c:	4603      	mov	r3, r0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d44:	f7ff f98c 	bl	8001060 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e099      	b.n	8001e88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2202      	movs	r2, #2
 8001d58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 0201 	bic.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d74:	e00f      	b.n	8001d96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d76:	f7ff f973 	bl	8001060 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b05      	cmp	r3, #5
 8001d82:	d908      	bls.n	8001d96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2220      	movs	r2, #32
 8001d88:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e078      	b.n	8001e88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1e8      	bne.n	8001d76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	4b38      	ldr	r3, [pc, #224]	@ (8001e90 <HAL_DMA_Init+0x158>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	d107      	bne.n	8001e00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	f023 0307 	bic.w	r3, r3, #7
 8001e16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	d117      	bne.n	8001e5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00e      	beq.n	8001e5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 fa6f 	bl	8002320 <DMA_CheckFifoParam>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d008      	beq.n	8001e5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2240      	movs	r2, #64	@ 0x40
 8001e4c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001e56:	2301      	movs	r3, #1
 8001e58:	e016      	b.n	8001e88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 fa26 	bl	80022b4 <DMA_CalcBaseAndBitshift>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e70:	223f      	movs	r2, #63	@ 0x3f
 8001e72:	409a      	lsls	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	f010803f 	.word	0xf010803f

08001e94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eaa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_DMA_Start_IT+0x26>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e040      	b.n	8001f3c <HAL_DMA_Start_IT+0xa8>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d12f      	bne.n	8001f2e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 f9b8 	bl	8002258 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eec:	223f      	movs	r2, #63	@ 0x3f
 8001eee:	409a      	lsls	r2, r3
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0216 	orr.w	r2, r2, #22
 8001f02:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d007      	beq.n	8001f1c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0208 	orr.w	r2, r2, #8
 8001f1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0201 	orr.w	r2, r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	e005      	b.n	8001f3a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f36:	2302      	movs	r3, #2
 8001f38:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f50:	4b8e      	ldr	r3, [pc, #568]	@ (800218c <HAL_DMA_IRQHandler+0x248>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a8e      	ldr	r2, [pc, #568]	@ (8002190 <HAL_DMA_IRQHandler+0x24c>)
 8001f56:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5a:	0a9b      	lsrs	r3, r3, #10
 8001f5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f6e:	2208      	movs	r2, #8
 8001f70:	409a      	lsls	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d01a      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d013      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0204 	bic.w	r2, r2, #4
 8001f96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f9c:	2208      	movs	r2, #8
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa8:	f043 0201 	orr.w	r2, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d012      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00b      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	409a      	lsls	r2, r3
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fde:	f043 0202 	orr.w	r2, r3, #2
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fea:	2204      	movs	r2, #4
 8001fec:	409a      	lsls	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d012      	beq.n	800201c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00b      	beq.n	800201c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002008:	2204      	movs	r2, #4
 800200a:	409a      	lsls	r2, r3
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002014:	f043 0204 	orr.w	r2, r3, #4
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002020:	2210      	movs	r2, #16
 8002022:	409a      	lsls	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4013      	ands	r3, r2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d043      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b00      	cmp	r3, #0
 8002038:	d03c      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800203e:	2210      	movs	r2, #16
 8002040:	409a      	lsls	r2, r3
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d018      	beq.n	8002086 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d108      	bne.n	8002074 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002066:	2b00      	cmp	r3, #0
 8002068:	d024      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	4798      	blx	r3
 8002072:	e01f      	b.n	80020b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002078:	2b00      	cmp	r3, #0
 800207a:	d01b      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	4798      	blx	r3
 8002084:	e016      	b.n	80020b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002090:	2b00      	cmp	r3, #0
 8002092:	d107      	bne.n	80020a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0208 	bic.w	r2, r2, #8
 80020a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b8:	2220      	movs	r2, #32
 80020ba:	409a      	lsls	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4013      	ands	r3, r2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 808f 	beq.w	80021e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0310 	and.w	r3, r3, #16
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 8087 	beq.w	80021e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020da:	2220      	movs	r2, #32
 80020dc:	409a      	lsls	r2, r3
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b05      	cmp	r3, #5
 80020ec:	d136      	bne.n	800215c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0216 	bic.w	r2, r2, #22
 80020fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	695a      	ldr	r2, [r3, #20]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800210c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002112:	2b00      	cmp	r3, #0
 8002114:	d103      	bne.n	800211e <HAL_DMA_IRQHandler+0x1da>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800211a:	2b00      	cmp	r3, #0
 800211c:	d007      	beq.n	800212e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0208 	bic.w	r2, r2, #8
 800212c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002132:	223f      	movs	r2, #63	@ 0x3f
 8002134:	409a      	lsls	r2, r3
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800214e:	2b00      	cmp	r3, #0
 8002150:	d07e      	beq.n	8002250 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	4798      	blx	r3
        }
        return;
 800215a:	e079      	b.n	8002250 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d01d      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10d      	bne.n	8002194 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217c:	2b00      	cmp	r3, #0
 800217e:	d031      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	4798      	blx	r3
 8002188:	e02c      	b.n	80021e4 <HAL_DMA_IRQHandler+0x2a0>
 800218a:	bf00      	nop
 800218c:	20000000 	.word	0x20000000
 8002190:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002198:	2b00      	cmp	r3, #0
 800219a:	d023      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	4798      	blx	r3
 80021a4:	e01e      	b.n	80021e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10f      	bne.n	80021d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0210 	bic.w	r2, r2, #16
 80021c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d032      	beq.n	8002252 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d022      	beq.n	800223e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2205      	movs	r2, #5
 80021fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0201 	bic.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	3301      	adds	r3, #1
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	429a      	cmp	r2, r3
 800221a:	d307      	bcc.n	800222c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f2      	bne.n	8002210 <HAL_DMA_IRQHandler+0x2cc>
 800222a:	e000      	b.n	800222e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800222c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002242:	2b00      	cmp	r3, #0
 8002244:	d005      	beq.n	8002252 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	4798      	blx	r3
 800224e:	e000      	b.n	8002252 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002250:	bf00      	nop
    }
  }
}
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
 8002264:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002274:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2b40      	cmp	r3, #64	@ 0x40
 8002284:	d108      	bne.n	8002298 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002296:	e007      	b.n	80022a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	60da      	str	r2, [r3, #12]
}
 80022a8:	bf00      	nop
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	3b10      	subs	r3, #16
 80022c4:	4a14      	ldr	r2, [pc, #80]	@ (8002318 <DMA_CalcBaseAndBitshift+0x64>)
 80022c6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ca:	091b      	lsrs	r3, r3, #4
 80022cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022ce:	4a13      	ldr	r2, [pc, #76]	@ (800231c <DMA_CalcBaseAndBitshift+0x68>)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4413      	add	r3, r2
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d909      	bls.n	80022f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022ea:	f023 0303 	bic.w	r3, r3, #3
 80022ee:	1d1a      	adds	r2, r3, #4
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	659a      	str	r2, [r3, #88]	@ 0x58
 80022f4:	e007      	b.n	8002306 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022fe:	f023 0303 	bic.w	r3, r3, #3
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800230a:	4618      	mov	r0, r3
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	aaaaaaab 	.word	0xaaaaaaab
 800231c:	08009340 	.word	0x08009340

08002320 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002330:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d11f      	bne.n	800237a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2b03      	cmp	r3, #3
 800233e:	d856      	bhi.n	80023ee <DMA_CheckFifoParam+0xce>
 8002340:	a201      	add	r2, pc, #4	@ (adr r2, 8002348 <DMA_CheckFifoParam+0x28>)
 8002342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002346:	bf00      	nop
 8002348:	08002359 	.word	0x08002359
 800234c:	0800236b 	.word	0x0800236b
 8002350:	08002359 	.word	0x08002359
 8002354:	080023ef 	.word	0x080023ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800235c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d046      	beq.n	80023f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002368:	e043      	b.n	80023f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800236e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002372:	d140      	bne.n	80023f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002378:	e03d      	b.n	80023f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002382:	d121      	bne.n	80023c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b03      	cmp	r3, #3
 8002388:	d837      	bhi.n	80023fa <DMA_CheckFifoParam+0xda>
 800238a:	a201      	add	r2, pc, #4	@ (adr r2, 8002390 <DMA_CheckFifoParam+0x70>)
 800238c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002390:	080023a1 	.word	0x080023a1
 8002394:	080023a7 	.word	0x080023a7
 8002398:	080023a1 	.word	0x080023a1
 800239c:	080023b9 	.word	0x080023b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
      break;
 80023a4:	e030      	b.n	8002408 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d025      	beq.n	80023fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023b6:	e022      	b.n	80023fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023bc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023c0:	d11f      	bne.n	8002402 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023c6:	e01c      	b.n	8002402 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d903      	bls.n	80023d6 <DMA_CheckFifoParam+0xb6>
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	d003      	beq.n	80023dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023d4:	e018      	b.n	8002408 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	73fb      	strb	r3, [r7, #15]
      break;
 80023da:	e015      	b.n	8002408 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00e      	beq.n	8002406 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	73fb      	strb	r3, [r7, #15]
      break;
 80023ec:	e00b      	b.n	8002406 <DMA_CheckFifoParam+0xe6>
      break;
 80023ee:	bf00      	nop
 80023f0:	e00a      	b.n	8002408 <DMA_CheckFifoParam+0xe8>
      break;
 80023f2:	bf00      	nop
 80023f4:	e008      	b.n	8002408 <DMA_CheckFifoParam+0xe8>
      break;
 80023f6:	bf00      	nop
 80023f8:	e006      	b.n	8002408 <DMA_CheckFifoParam+0xe8>
      break;
 80023fa:	bf00      	nop
 80023fc:	e004      	b.n	8002408 <DMA_CheckFifoParam+0xe8>
      break;
 80023fe:	bf00      	nop
 8002400:	e002      	b.n	8002408 <DMA_CheckFifoParam+0xe8>
      break;   
 8002402:	bf00      	nop
 8002404:	e000      	b.n	8002408 <DMA_CheckFifoParam+0xe8>
      break;
 8002406:	bf00      	nop
    }
  } 
  
  return status; 
 8002408:	7bfb      	ldrb	r3, [r7, #15]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop

08002418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002418:	b480      	push	{r7}
 800241a:	b089      	sub	sp, #36	@ 0x24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800242a:	2300      	movs	r3, #0
 800242c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
 8002432:	e159      	b.n	80026e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002434:	2201      	movs	r2, #1
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	4013      	ands	r3, r2
 8002446:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	429a      	cmp	r2, r3
 800244e:	f040 8148 	bne.w	80026e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	2b01      	cmp	r3, #1
 800245c:	d005      	beq.n	800246a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002466:	2b02      	cmp	r3, #2
 8002468:	d130      	bne.n	80024cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	2203      	movs	r2, #3
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024a0:	2201      	movs	r2, #1
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	091b      	lsrs	r3, r3, #4
 80024b6:	f003 0201 	and.w	r2, r3, #1
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d017      	beq.n	8002508 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	2203      	movs	r2, #3
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d123      	bne.n	800255c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	08da      	lsrs	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3208      	adds	r2, #8
 800251c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002520:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	220f      	movs	r2, #15
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	08da      	lsrs	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	3208      	adds	r2, #8
 8002556:	69b9      	ldr	r1, [r7, #24]
 8002558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	2203      	movs	r2, #3
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0203 	and.w	r2, r3, #3
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 80a2 	beq.w	80026e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	4b57      	ldr	r3, [pc, #348]	@ (8002700 <HAL_GPIO_Init+0x2e8>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a6:	4a56      	ldr	r2, [pc, #344]	@ (8002700 <HAL_GPIO_Init+0x2e8>)
 80025a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ae:	4b54      	ldr	r3, [pc, #336]	@ (8002700 <HAL_GPIO_Init+0x2e8>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ba:	4a52      	ldr	r2, [pc, #328]	@ (8002704 <HAL_GPIO_Init+0x2ec>)
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	089b      	lsrs	r3, r3, #2
 80025c0:	3302      	adds	r3, #2
 80025c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	220f      	movs	r2, #15
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4013      	ands	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a49      	ldr	r2, [pc, #292]	@ (8002708 <HAL_GPIO_Init+0x2f0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d019      	beq.n	800261a <HAL_GPIO_Init+0x202>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a48      	ldr	r2, [pc, #288]	@ (800270c <HAL_GPIO_Init+0x2f4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d013      	beq.n	8002616 <HAL_GPIO_Init+0x1fe>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a47      	ldr	r2, [pc, #284]	@ (8002710 <HAL_GPIO_Init+0x2f8>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d00d      	beq.n	8002612 <HAL_GPIO_Init+0x1fa>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a46      	ldr	r2, [pc, #280]	@ (8002714 <HAL_GPIO_Init+0x2fc>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d007      	beq.n	800260e <HAL_GPIO_Init+0x1f6>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a45      	ldr	r2, [pc, #276]	@ (8002718 <HAL_GPIO_Init+0x300>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d101      	bne.n	800260a <HAL_GPIO_Init+0x1f2>
 8002606:	2304      	movs	r3, #4
 8002608:	e008      	b.n	800261c <HAL_GPIO_Init+0x204>
 800260a:	2307      	movs	r3, #7
 800260c:	e006      	b.n	800261c <HAL_GPIO_Init+0x204>
 800260e:	2303      	movs	r3, #3
 8002610:	e004      	b.n	800261c <HAL_GPIO_Init+0x204>
 8002612:	2302      	movs	r3, #2
 8002614:	e002      	b.n	800261c <HAL_GPIO_Init+0x204>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <HAL_GPIO_Init+0x204>
 800261a:	2300      	movs	r3, #0
 800261c:	69fa      	ldr	r2, [r7, #28]
 800261e:	f002 0203 	and.w	r2, r2, #3
 8002622:	0092      	lsls	r2, r2, #2
 8002624:	4093      	lsls	r3, r2
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800262c:	4935      	ldr	r1, [pc, #212]	@ (8002704 <HAL_GPIO_Init+0x2ec>)
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	089b      	lsrs	r3, r3, #2
 8002632:	3302      	adds	r3, #2
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800263a:	4b38      	ldr	r3, [pc, #224]	@ (800271c <HAL_GPIO_Init+0x304>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	43db      	mvns	r3, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4013      	ands	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800265e:	4a2f      	ldr	r2, [pc, #188]	@ (800271c <HAL_GPIO_Init+0x304>)
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002664:	4b2d      	ldr	r3, [pc, #180]	@ (800271c <HAL_GPIO_Init+0x304>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002688:	4a24      	ldr	r2, [pc, #144]	@ (800271c <HAL_GPIO_Init+0x304>)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800268e:	4b23      	ldr	r3, [pc, #140]	@ (800271c <HAL_GPIO_Init+0x304>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	43db      	mvns	r3, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4013      	ands	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026b2:	4a1a      	ldr	r2, [pc, #104]	@ (800271c <HAL_GPIO_Init+0x304>)
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026b8:	4b18      	ldr	r3, [pc, #96]	@ (800271c <HAL_GPIO_Init+0x304>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026dc:	4a0f      	ldr	r2, [pc, #60]	@ (800271c <HAL_GPIO_Init+0x304>)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3301      	adds	r3, #1
 80026e6:	61fb      	str	r3, [r7, #28]
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	2b0f      	cmp	r3, #15
 80026ec:	f67f aea2 	bls.w	8002434 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026f0:	bf00      	nop
 80026f2:	bf00      	nop
 80026f4:	3724      	adds	r7, #36	@ 0x24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800
 8002704:	40013800 	.word	0x40013800
 8002708:	40020000 	.word	0x40020000
 800270c:	40020400 	.word	0x40020400
 8002710:	40020800 	.word	0x40020800
 8002714:	40020c00 	.word	0x40020c00
 8002718:	40021000 	.word	0x40021000
 800271c:	40013c00 	.word	0x40013c00

08002720 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	460b      	mov	r3, r1
 800272a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691a      	ldr	r2, [r3, #16]
 8002730:	887b      	ldrh	r3, [r7, #2]
 8002732:	4013      	ands	r3, r2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d002      	beq.n	800273e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002738:	2301      	movs	r3, #1
 800273a:	73fb      	strb	r3, [r7, #15]
 800273c:	e001      	b.n	8002742 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002742:	7bfb      	ldrb	r3, [r7, #15]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	807b      	strh	r3, [r7, #2]
 800275c:	4613      	mov	r3, r2
 800275e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002760:	787b      	ldrb	r3, [r7, #1]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002766:	887a      	ldrh	r2, [r7, #2]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800276c:	e003      	b.n	8002776 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800276e:	887b      	ldrh	r3, [r7, #2]
 8002770:	041a      	lsls	r2, r3, #16
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	619a      	str	r2, [r3, #24]
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002782:	b480      	push	{r7}
 8002784:	b085      	sub	sp, #20
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
 800278a:	460b      	mov	r3, r1
 800278c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002794:	887a      	ldrh	r2, [r7, #2]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4013      	ands	r3, r2
 800279a:	041a      	lsls	r2, r3, #16
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	43d9      	mvns	r1, r3
 80027a0:	887b      	ldrh	r3, [r7, #2]
 80027a2:	400b      	ands	r3, r1
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	619a      	str	r2, [r3, #24]
}
 80027aa:	bf00      	nop
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
	...

080027b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027c2:	4b08      	ldr	r3, [pc, #32]	@ (80027e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027c4:	695a      	ldr	r2, [r3, #20]
 80027c6:	88fb      	ldrh	r3, [r7, #6]
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d006      	beq.n	80027dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027ce:	4a05      	ldr	r2, [pc, #20]	@ (80027e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027d0:	88fb      	ldrh	r3, [r7, #6]
 80027d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027d4:	88fb      	ldrh	r3, [r7, #6]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 f806 	bl	80027e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80027dc:	bf00      	nop
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40013c00 	.word	0x40013c00

080027e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b086      	sub	sp, #24
 8002802:	af02      	add	r7, sp, #8
 8002804:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e101      	b.n	8002a14 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d106      	bne.n	8002830 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f006 fa20 	bl	8008c70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2203      	movs	r2, #3
 8002834:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800283e:	d102      	bne.n	8002846 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f002 fe79 	bl	8005542 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6818      	ldr	r0, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	7c1a      	ldrb	r2, [r3, #16]
 8002858:	f88d 2000 	strb.w	r2, [sp]
 800285c:	3304      	adds	r3, #4
 800285e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002860:	f002 fd58 	bl	8005314 <USB_CoreInit>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d005      	beq.n	8002876 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2202      	movs	r2, #2
 800286e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e0ce      	b.n	8002a14 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2100      	movs	r1, #0
 800287c:	4618      	mov	r0, r3
 800287e:	f002 fe71 	bl	8005564 <USB_SetCurrentMode>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0bf      	b.n	8002a14 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002894:	2300      	movs	r3, #0
 8002896:	73fb      	strb	r3, [r7, #15]
 8002898:	e04a      	b.n	8002930 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800289a:	7bfa      	ldrb	r2, [r7, #15]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	4413      	add	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	3315      	adds	r3, #21
 80028aa:	2201      	movs	r2, #1
 80028ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028ae:	7bfa      	ldrb	r2, [r7, #15]
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4413      	add	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	3314      	adds	r3, #20
 80028be:	7bfa      	ldrb	r2, [r7, #15]
 80028c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028c2:	7bfa      	ldrb	r2, [r7, #15]
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	b298      	uxth	r0, r3
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	4413      	add	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	332e      	adds	r3, #46	@ 0x2e
 80028d6:	4602      	mov	r2, r0
 80028d8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028da:	7bfa      	ldrb	r2, [r7, #15]
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	4413      	add	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	440b      	add	r3, r1
 80028e8:	3318      	adds	r3, #24
 80028ea:	2200      	movs	r2, #0
 80028ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028ee:	7bfa      	ldrb	r2, [r7, #15]
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	4613      	mov	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	4413      	add	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	440b      	add	r3, r1
 80028fc:	331c      	adds	r3, #28
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002902:	7bfa      	ldrb	r2, [r7, #15]
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4413      	add	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	440b      	add	r3, r1
 8002910:	3320      	adds	r3, #32
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002916:	7bfa      	ldrb	r2, [r7, #15]
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4413      	add	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	3324      	adds	r3, #36	@ 0x24
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800292a:	7bfb      	ldrb	r3, [r7, #15]
 800292c:	3301      	adds	r3, #1
 800292e:	73fb      	strb	r3, [r7, #15]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	791b      	ldrb	r3, [r3, #4]
 8002934:	7bfa      	ldrb	r2, [r7, #15]
 8002936:	429a      	cmp	r2, r3
 8002938:	d3af      	bcc.n	800289a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800293a:	2300      	movs	r3, #0
 800293c:	73fb      	strb	r3, [r7, #15]
 800293e:	e044      	b.n	80029ca <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002940:	7bfa      	ldrb	r2, [r7, #15]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002952:	2200      	movs	r2, #0
 8002954:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002956:	7bfa      	ldrb	r2, [r7, #15]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	4413      	add	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002968:	7bfa      	ldrb	r2, [r7, #15]
 800296a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800296c:	7bfa      	ldrb	r2, [r7, #15]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	4413      	add	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800297e:	2200      	movs	r2, #0
 8002980:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002982:	7bfa      	ldrb	r2, [r7, #15]
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	4413      	add	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002998:	7bfa      	ldrb	r2, [r7, #15]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	4413      	add	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029ae:	7bfa      	ldrb	r2, [r7, #15]
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4413      	add	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	440b      	add	r3, r1
 80029bc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
 80029c6:	3301      	adds	r3, #1
 80029c8:	73fb      	strb	r3, [r7, #15]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	791b      	ldrb	r3, [r3, #4]
 80029ce:	7bfa      	ldrb	r2, [r7, #15]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d3b5      	bcc.n	8002940 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6818      	ldr	r0, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	7c1a      	ldrb	r2, [r3, #16]
 80029dc:	f88d 2000 	strb.w	r2, [sp]
 80029e0:	3304      	adds	r3, #4
 80029e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029e4:	f002 fe0a 	bl	80055fc <USB_DevInit>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d005      	beq.n	80029fa <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2202      	movs	r2, #2
 80029f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e00c      	b.n	8002a14 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f003 fe54 	bl	80066ba <USB_DevDisconnect>

  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d101      	bne.n	8002a38 <HAL_PCD_Start+0x1c>
 8002a34:	2302      	movs	r3, #2
 8002a36:	e022      	b.n	8002a7e <HAL_PCD_Start+0x62>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d009      	beq.n	8002a60 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d105      	bne.n	8002a60 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a58:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f002 fd5b 	bl	8005520 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f003 fe02 	bl	8006678 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a86:	b590      	push	{r4, r7, lr}
 8002a88:	b08d      	sub	sp, #52	@ 0x34
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f003 fec0 	bl	8006822 <USB_GetMode>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f040 848c 	bne.w	80033c2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f003 fe24 	bl	80066fc <USB_ReadInterrupts>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 8482 	beq.w	80033c0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	0a1b      	lsrs	r3, r3, #8
 8002ac6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f003 fe11 	bl	80066fc <USB_ReadInterrupts>
 8002ada:	4603      	mov	r3, r0
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d107      	bne.n	8002af4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695a      	ldr	r2, [r3, #20]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f002 0202 	and.w	r2, r2, #2
 8002af2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f003 fdff 	bl	80066fc <USB_ReadInterrupts>
 8002afe:	4603      	mov	r3, r0
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	2b10      	cmp	r3, #16
 8002b06:	d161      	bne.n	8002bcc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699a      	ldr	r2, [r3, #24]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0210 	bic.w	r2, r2, #16
 8002b16:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	f003 020f 	and.w	r2, r3, #15
 8002b24:	4613      	mov	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	4413      	add	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	4413      	add	r3, r2
 8002b34:	3304      	adds	r3, #4
 8002b36:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002b3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b42:	d124      	bne.n	8002b8e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d035      	beq.n	8002bbc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	091b      	lsrs	r3, r3, #4
 8002b58:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	6a38      	ldr	r0, [r7, #32]
 8002b64:	f003 fc36 	bl	80063d4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	091b      	lsrs	r3, r3, #4
 8002b70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b74:	441a      	add	r2, r3
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	695a      	ldr	r2, [r3, #20]
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	091b      	lsrs	r3, r3, #4
 8002b82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b86:	441a      	add	r2, r3
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	615a      	str	r2, [r3, #20]
 8002b8c:	e016      	b.n	8002bbc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002b94:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002b98:	d110      	bne.n	8002bbc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ba0:	2208      	movs	r2, #8
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	6a38      	ldr	r0, [r7, #32]
 8002ba6:	f003 fc15 	bl	80063d4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	695a      	ldr	r2, [r3, #20]
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	091b      	lsrs	r3, r3, #4
 8002bb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bb6:	441a      	add	r2, r3
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699a      	ldr	r2, [r3, #24]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0210 	orr.w	r2, r2, #16
 8002bca:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f003 fd93 	bl	80066fc <USB_ReadInterrupts>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bdc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002be0:	f040 80a7 	bne.w	8002d32 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f003 fd98 	bl	8006722 <USB_ReadDevAllOutEpInterrupt>
 8002bf2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002bf4:	e099      	b.n	8002d2a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 808e 	beq.w	8002d1e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f003 fdbc 	bl	800678a <USB_ReadDevOutEPInterrupt>
 8002c12:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00c      	beq.n	8002c38 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c20:	015a      	lsls	r2, r3, #5
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	4413      	add	r3, r2
 8002c26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002c30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 fe8c 	bl	8003950 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00c      	beq.n	8002c5c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c44:	015a      	lsls	r2, r3, #5
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c4e:	461a      	mov	r2, r3
 8002c50:	2308      	movs	r3, #8
 8002c52:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002c54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 ff62 	bl	8003b20 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d008      	beq.n	8002c78 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c72:	461a      	mov	r2, r3
 8002c74:	2310      	movs	r3, #16
 8002c76:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d030      	beq.n	8002ce4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c8a:	2b80      	cmp	r3, #128	@ 0x80
 8002c8c:	d109      	bne.n	8002ca2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	69fa      	ldr	r2, [r7, #28]
 8002c98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c9c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ca0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	78db      	ldrb	r3, [r3, #3]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d108      	bne.n	8002cd2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	4619      	mov	r1, r3
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f006 f8cb 	bl	8008e68 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd4:	015a      	lsls	r2, r3, #5
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	4413      	add	r3, r2
 8002cda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cde:	461a      	mov	r2, r3
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	f003 0320 	and.w	r3, r3, #32
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d008      	beq.n	8002d00 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf0:	015a      	lsls	r2, r3, #5
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	2320      	movs	r3, #32
 8002cfe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d009      	beq.n	8002d1e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0c:	015a      	lsls	r2, r3, #5
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d16:	461a      	mov	r2, r3
 8002d18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d1c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d20:	3301      	adds	r3, #1
 8002d22:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d26:	085b      	lsrs	r3, r3, #1
 8002d28:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f47f af62 	bne.w	8002bf6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f003 fce0 	bl	80066fc <USB_ReadInterrupts>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d42:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d46:	f040 80db 	bne.w	8002f00 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f003 fd01 	bl	8006756 <USB_ReadDevAllInEpInterrupt>
 8002d54:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002d5a:	e0cd      	b.n	8002ef8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 80c2 	beq.w	8002eec <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	4611      	mov	r1, r2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f003 fd27 	bl	80067c6 <USB_ReadDevInEPInterrupt>
 8002d78:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d057      	beq.n	8002e34 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69f9      	ldr	r1, [r7, #28]
 8002da0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002da4:	4013      	ands	r3, r2
 8002da6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002daa:	015a      	lsls	r2, r3, #5
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002db4:	461a      	mov	r2, r3
 8002db6:	2301      	movs	r3, #1
 8002db8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	799b      	ldrb	r3, [r3, #6]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d132      	bne.n	8002e28 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	4413      	add	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	3320      	adds	r3, #32
 8002dd2:	6819      	ldr	r1, [r3, #0]
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dd8:	4613      	mov	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	4413      	add	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4403      	add	r3, r0
 8002de2:	331c      	adds	r3, #28
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4419      	add	r1, r3
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dec:	4613      	mov	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4403      	add	r3, r0
 8002df6:	3320      	adds	r3, #32
 8002df8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d113      	bne.n	8002e28 <HAL_PCD_IRQHandler+0x3a2>
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e04:	4613      	mov	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4413      	add	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	3324      	adds	r3, #36	@ 0x24
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d108      	bne.n	8002e28 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6818      	ldr	r0, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e20:	461a      	mov	r2, r3
 8002e22:	2101      	movs	r1, #1
 8002e24:	f003 fd2e 	bl	8006884 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f005 ff9f 	bl	8008d72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d008      	beq.n	8002e50 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	2308      	movs	r3, #8
 8002e4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d008      	beq.n	8002e6c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e66:	461a      	mov	r2, r3
 8002e68:	2310      	movs	r3, #16
 8002e6a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d008      	beq.n	8002e88 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e82:	461a      	mov	r2, r3
 8002e84:	2340      	movs	r3, #64	@ 0x40
 8002e86:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d023      	beq.n	8002eda <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002e92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e94:	6a38      	ldr	r0, [r7, #32]
 8002e96:	f002 fd15 	bl	80058c4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	3310      	adds	r3, #16
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3304      	adds	r3, #4
 8002eac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	78db      	ldrb	r3, [r3, #3]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d108      	bne.n	8002ec8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f005 ffe2 	bl	8008e8c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eca:	015a      	lsls	r2, r3, #5
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	4413      	add	r3, r2
 8002ed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ee4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 fca5 	bl	8003836 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eee:	3301      	adds	r3, #1
 8002ef0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef4:	085b      	lsrs	r3, r3, #1
 8002ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f47f af2e 	bne.w	8002d5c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f003 fbf9 	bl	80066fc <USB_ReadInterrupts>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002f10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f14:	d122      	bne.n	8002f5c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	69fa      	ldr	r2, [r7, #28]
 8002f20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f24:	f023 0301 	bic.w	r3, r3, #1
 8002f28:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d108      	bne.n	8002f46 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fe8c 	bl	8003c5c <HAL_PCDEx_LPM_Callback>
 8002f44:	e002      	b.n	8002f4c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f005 ff80 	bl	8008e4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	695a      	ldr	r2, [r3, #20]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002f5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f003 fbcb 	bl	80066fc <USB_ReadInterrupts>
 8002f66:	4603      	mov	r3, r0
 8002f68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f70:	d112      	bne.n	8002f98 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d102      	bne.n	8002f88 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f005 ff3c 	bl	8008e00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695a      	ldr	r2, [r3, #20]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002f96:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f003 fbad 	bl	80066fc <USB_ReadInterrupts>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fa8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fac:	f040 80b7 	bne.w	800311e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	69fa      	ldr	r2, [r7, #28]
 8002fba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fbe:	f023 0301 	bic.w	r3, r3, #1
 8002fc2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2110      	movs	r1, #16
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f002 fc7a 	bl	80058c4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fd4:	e046      	b.n	8003064 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002fe8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fec:	015a      	lsls	r2, r3, #5
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ffa:	0151      	lsls	r1, r2, #5
 8002ffc:	69fa      	ldr	r2, [r7, #28]
 8002ffe:	440a      	add	r2, r1
 8003000:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003004:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003008:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800300a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800300c:	015a      	lsls	r2, r3, #5
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	4413      	add	r3, r2
 8003012:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003016:	461a      	mov	r2, r3
 8003018:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800301c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800301e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	4413      	add	r3, r2
 8003026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800302e:	0151      	lsls	r1, r2, #5
 8003030:	69fa      	ldr	r2, [r7, #28]
 8003032:	440a      	add	r2, r1
 8003034:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003038:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800303c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800303e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003040:	015a      	lsls	r2, r3, #5
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	4413      	add	r3, r2
 8003046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800304e:	0151      	lsls	r1, r2, #5
 8003050:	69fa      	ldr	r2, [r7, #28]
 8003052:	440a      	add	r2, r1
 8003054:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003058:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800305c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800305e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003060:	3301      	adds	r3, #1
 8003062:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	791b      	ldrb	r3, [r3, #4]
 8003068:	461a      	mov	r2, r3
 800306a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800306c:	4293      	cmp	r3, r2
 800306e:	d3b2      	bcc.n	8002fd6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	69fa      	ldr	r2, [r7, #28]
 800307a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800307e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003082:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	7bdb      	ldrb	r3, [r3, #15]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d016      	beq.n	80030ba <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003092:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003096:	69fa      	ldr	r2, [r7, #28]
 8003098:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800309c:	f043 030b 	orr.w	r3, r3, #11
 80030a0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ac:	69fa      	ldr	r2, [r7, #28]
 80030ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030b2:	f043 030b 	orr.w	r3, r3, #11
 80030b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80030b8:	e015      	b.n	80030e6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	69fa      	ldr	r2, [r7, #28]
 80030c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80030cc:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80030d0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	69fa      	ldr	r2, [r7, #28]
 80030dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030e0:	f043 030b 	orr.w	r3, r3, #11
 80030e4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	69fa      	ldr	r2, [r7, #28]
 80030f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030f4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80030f8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6818      	ldr	r0, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003108:	461a      	mov	r2, r3
 800310a:	f003 fbbb 	bl	8006884 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695a      	ldr	r2, [r3, #20]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800311c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f003 faea 	bl	80066fc <USB_ReadInterrupts>
 8003128:	4603      	mov	r3, r0
 800312a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800312e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003132:	d123      	bne.n	800317c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f003 fb80 	bl	800683e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f002 fc37 	bl	80059b6 <USB_GetDevSpeed>
 8003148:	4603      	mov	r3, r0
 800314a:	461a      	mov	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681c      	ldr	r4, [r3, #0]
 8003154:	f001 f9b2 	bl	80044bc <HAL_RCC_GetHCLKFreq>
 8003158:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800315e:	461a      	mov	r2, r3
 8003160:	4620      	mov	r0, r4
 8003162:	f002 f93b 	bl	80053dc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f005 fe2b 	bl	8008dc2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695a      	ldr	r2, [r3, #20]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800317a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f003 fabb 	bl	80066fc <USB_ReadInterrupts>
 8003186:	4603      	mov	r3, r0
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b08      	cmp	r3, #8
 800318e:	d10a      	bne.n	80031a6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f005 fe08 	bl	8008da6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695a      	ldr	r2, [r3, #20]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f002 0208 	and.w	r2, r2, #8
 80031a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f003 faa6 	bl	80066fc <USB_ReadInterrupts>
 80031b0:	4603      	mov	r3, r0
 80031b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031b6:	2b80      	cmp	r3, #128	@ 0x80
 80031b8:	d123      	bne.n	8003202 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031c6:	2301      	movs	r3, #1
 80031c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80031ca:	e014      	b.n	80031f6 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031d0:	4613      	mov	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	4413      	add	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d105      	bne.n	80031f0 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80031e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	4619      	mov	r1, r3
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 faf2 	bl	80037d4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f2:	3301      	adds	r3, #1
 80031f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	791b      	ldrb	r3, [r3, #4]
 80031fa:	461a      	mov	r2, r3
 80031fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fe:	4293      	cmp	r3, r2
 8003200:	d3e4      	bcc.n	80031cc <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f003 fa78 	bl	80066fc <USB_ReadInterrupts>
 800320c:	4603      	mov	r3, r0
 800320e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003212:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003216:	d13c      	bne.n	8003292 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003218:	2301      	movs	r3, #1
 800321a:	627b      	str	r3, [r7, #36]	@ 0x24
 800321c:	e02b      	b.n	8003276 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800321e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003220:	015a      	lsls	r2, r3, #5
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	4413      	add	r3, r2
 8003226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003232:	4613      	mov	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	4413      	add	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	3318      	adds	r3, #24
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d115      	bne.n	8003270 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003244:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003246:	2b00      	cmp	r3, #0
 8003248:	da12      	bge.n	8003270 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800324e:	4613      	mov	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	4413      	add	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	440b      	add	r3, r1
 8003258:	3317      	adds	r3, #23
 800325a:	2201      	movs	r2, #1
 800325c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800325e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003260:	b2db      	uxtb	r3, r3
 8003262:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003266:	b2db      	uxtb	r3, r3
 8003268:	4619      	mov	r1, r3
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 fab2 	bl	80037d4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003272:	3301      	adds	r3, #1
 8003274:	627b      	str	r3, [r7, #36]	@ 0x24
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	791b      	ldrb	r3, [r3, #4]
 800327a:	461a      	mov	r2, r3
 800327c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327e:	4293      	cmp	r3, r2
 8003280:	d3cd      	bcc.n	800321e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	695a      	ldr	r2, [r3, #20]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003290:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f003 fa30 	bl	80066fc <USB_ReadInterrupts>
 800329c:	4603      	mov	r3, r0
 800329e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032a6:	d156      	bne.n	8003356 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032a8:	2301      	movs	r3, #1
 80032aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80032ac:	e045      	b.n	800333a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80032ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032c2:	4613      	mov	r3, r2
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	4413      	add	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d12e      	bne.n	8003334 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80032d6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80032d8:	2b00      	cmp	r3, #0
 80032da:	da2b      	bge.n	8003334 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	0c1a      	lsrs	r2, r3, #16
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80032e6:	4053      	eors	r3, r2
 80032e8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d121      	bne.n	8003334 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032f4:	4613      	mov	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	4413      	add	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	440b      	add	r3, r1
 80032fe:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003302:	2201      	movs	r2, #1
 8003304:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003312:	6a3b      	ldr	r3, [r7, #32]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10a      	bne.n	8003334 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	69fa      	ldr	r2, [r7, #28]
 8003328:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800332c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003330:	6053      	str	r3, [r2, #4]
            break;
 8003332:	e008      	b.n	8003346 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003336:	3301      	adds	r3, #1
 8003338:	627b      	str	r3, [r7, #36]	@ 0x24
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	791b      	ldrb	r3, [r3, #4]
 800333e:	461a      	mov	r2, r3
 8003340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003342:	4293      	cmp	r3, r2
 8003344:	d3b3      	bcc.n	80032ae <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	695a      	ldr	r2, [r3, #20]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003354:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f003 f9ce 	bl	80066fc <USB_ReadInterrupts>
 8003360:	4603      	mov	r3, r0
 8003362:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003366:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800336a:	d10a      	bne.n	8003382 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f005 fd9f 	bl	8008eb0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695a      	ldr	r2, [r3, #20]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003380:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f003 f9b8 	bl	80066fc <USB_ReadInterrupts>
 800338c:	4603      	mov	r3, r0
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b04      	cmp	r3, #4
 8003394:	d115      	bne.n	80033c2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d002      	beq.n	80033ae <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f005 fd8f 	bl	8008ecc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6859      	ldr	r1, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	605a      	str	r2, [r3, #4]
 80033be:	e000      	b.n	80033c2 <HAL_PCD_IRQHandler+0x93c>
      return;
 80033c0:	bf00      	nop
    }
  }
}
 80033c2:	3734      	adds	r7, #52	@ 0x34
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd90      	pop	{r4, r7, pc}

080033c8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d101      	bne.n	80033e2 <HAL_PCD_SetAddress+0x1a>
 80033de:	2302      	movs	r3, #2
 80033e0:	e012      	b.n	8003408 <HAL_PCD_SetAddress+0x40>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	78fa      	ldrb	r2, [r7, #3]
 80033ee:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	78fa      	ldrb	r2, [r7, #3]
 80033f6:	4611      	mov	r1, r2
 80033f8:	4618      	mov	r0, r3
 80033fa:	f003 f917 	bl	800662c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	4608      	mov	r0, r1
 800341a:	4611      	mov	r1, r2
 800341c:	461a      	mov	r2, r3
 800341e:	4603      	mov	r3, r0
 8003420:	70fb      	strb	r3, [r7, #3]
 8003422:	460b      	mov	r3, r1
 8003424:	803b      	strh	r3, [r7, #0]
 8003426:	4613      	mov	r3, r2
 8003428:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800342e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003432:	2b00      	cmp	r3, #0
 8003434:	da0f      	bge.n	8003456 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003436:	78fb      	ldrb	r3, [r7, #3]
 8003438:	f003 020f 	and.w	r2, r3, #15
 800343c:	4613      	mov	r3, r2
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	4413      	add	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	3310      	adds	r3, #16
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	4413      	add	r3, r2
 800344a:	3304      	adds	r3, #4
 800344c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2201      	movs	r2, #1
 8003452:	705a      	strb	r2, [r3, #1]
 8003454:	e00f      	b.n	8003476 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003456:	78fb      	ldrb	r3, [r7, #3]
 8003458:	f003 020f 	and.w	r2, r3, #15
 800345c:	4613      	mov	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	4413      	add	r3, r2
 800346c:	3304      	adds	r3, #4
 800346e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003476:	78fb      	ldrb	r3, [r7, #3]
 8003478:	f003 030f 	and.w	r3, r3, #15
 800347c:	b2da      	uxtb	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003482:	883b      	ldrh	r3, [r7, #0]
 8003484:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	78ba      	ldrb	r2, [r7, #2]
 8003490:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	785b      	ldrb	r3, [r3, #1]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d004      	beq.n	80034a4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	461a      	mov	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80034a4:	78bb      	ldrb	r3, [r7, #2]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d102      	bne.n	80034b0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d101      	bne.n	80034be <HAL_PCD_EP_Open+0xae>
 80034ba:	2302      	movs	r3, #2
 80034bc:	e00e      	b.n	80034dc <HAL_PCD_EP_Open+0xcc>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68f9      	ldr	r1, [r7, #12]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f002 fa97 	bl	8005a00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80034da:	7afb      	ldrb	r3, [r7, #11]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	da0f      	bge.n	8003518 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034f8:	78fb      	ldrb	r3, [r7, #3]
 80034fa:	f003 020f 	and.w	r2, r3, #15
 80034fe:	4613      	mov	r3, r2
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	4413      	add	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	3310      	adds	r3, #16
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	4413      	add	r3, r2
 800350c:	3304      	adds	r3, #4
 800350e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2201      	movs	r2, #1
 8003514:	705a      	strb	r2, [r3, #1]
 8003516:	e00f      	b.n	8003538 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003518:	78fb      	ldrb	r3, [r7, #3]
 800351a:	f003 020f 	and.w	r2, r3, #15
 800351e:	4613      	mov	r3, r2
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	4413      	add	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	4413      	add	r3, r2
 800352e:	3304      	adds	r3, #4
 8003530:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003538:	78fb      	ldrb	r3, [r7, #3]
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	b2da      	uxtb	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800354a:	2b01      	cmp	r3, #1
 800354c:	d101      	bne.n	8003552 <HAL_PCD_EP_Close+0x6e>
 800354e:	2302      	movs	r3, #2
 8003550:	e00e      	b.n	8003570 <HAL_PCD_EP_Close+0x8c>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68f9      	ldr	r1, [r7, #12]
 8003560:	4618      	mov	r0, r3
 8003562:	f002 fad5 	bl	8005b10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	607a      	str	r2, [r7, #4]
 8003582:	603b      	str	r3, [r7, #0]
 8003584:	460b      	mov	r3, r1
 8003586:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003588:	7afb      	ldrb	r3, [r7, #11]
 800358a:	f003 020f 	and.w	r2, r3, #15
 800358e:	4613      	mov	r3, r2
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	4413      	add	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	4413      	add	r3, r2
 800359e:	3304      	adds	r3, #4
 80035a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2200      	movs	r2, #0
 80035b2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	2200      	movs	r2, #0
 80035b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035ba:	7afb      	ldrb	r3, [r7, #11]
 80035bc:	f003 030f 	and.w	r3, r3, #15
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	799b      	ldrb	r3, [r3, #6]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d102      	bne.n	80035d4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6818      	ldr	r0, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	799b      	ldrb	r3, [r3, #6]
 80035dc:	461a      	mov	r2, r3
 80035de:	6979      	ldr	r1, [r7, #20]
 80035e0:	f002 fb72 	bl	8005cc8 <USB_EPStartXfer>

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b086      	sub	sp, #24
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	607a      	str	r2, [r7, #4]
 80035f8:	603b      	str	r3, [r7, #0]
 80035fa:	460b      	mov	r3, r1
 80035fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035fe:	7afb      	ldrb	r3, [r7, #11]
 8003600:	f003 020f 	and.w	r2, r3, #15
 8003604:	4613      	mov	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	4413      	add	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	3310      	adds	r3, #16
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	4413      	add	r3, r2
 8003612:	3304      	adds	r3, #4
 8003614:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2200      	movs	r2, #0
 8003626:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	2201      	movs	r2, #1
 800362c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800362e:	7afb      	ldrb	r3, [r7, #11]
 8003630:	f003 030f 	and.w	r3, r3, #15
 8003634:	b2da      	uxtb	r2, r3
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	799b      	ldrb	r3, [r3, #6]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d102      	bne.n	8003648 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6818      	ldr	r0, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	799b      	ldrb	r3, [r3, #6]
 8003650:	461a      	mov	r2, r3
 8003652:	6979      	ldr	r1, [r7, #20]
 8003654:	f002 fb38 	bl	8005cc8 <USB_EPStartXfer>

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b084      	sub	sp, #16
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
 800366a:	460b      	mov	r3, r1
 800366c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800366e:	78fb      	ldrb	r3, [r7, #3]
 8003670:	f003 030f 	and.w	r3, r3, #15
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	7912      	ldrb	r2, [r2, #4]
 8003678:	4293      	cmp	r3, r2
 800367a:	d901      	bls.n	8003680 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e04f      	b.n	8003720 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003680:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003684:	2b00      	cmp	r3, #0
 8003686:	da0f      	bge.n	80036a8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	f003 020f 	and.w	r2, r3, #15
 800368e:	4613      	mov	r3, r2
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	4413      	add	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	3310      	adds	r3, #16
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	4413      	add	r3, r2
 800369c:	3304      	adds	r3, #4
 800369e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2201      	movs	r2, #1
 80036a4:	705a      	strb	r2, [r3, #1]
 80036a6:	e00d      	b.n	80036c4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036a8:	78fa      	ldrb	r2, [r7, #3]
 80036aa:	4613      	mov	r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	4413      	add	r3, r2
 80036ba:	3304      	adds	r3, #4
 80036bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2201      	movs	r2, #1
 80036c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036ca:	78fb      	ldrb	r3, [r7, #3]
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_PCD_EP_SetStall+0x82>
 80036e0:	2302      	movs	r3, #2
 80036e2:	e01d      	b.n	8003720 <HAL_PCD_EP_SetStall+0xbe>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68f9      	ldr	r1, [r7, #12]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f002 fec6 	bl	8006484 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d109      	bne.n	8003716 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6818      	ldr	r0, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	7999      	ldrb	r1, [r3, #6]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003710:	461a      	mov	r2, r3
 8003712:	f003 f8b7 	bl	8006884 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003734:	78fb      	ldrb	r3, [r7, #3]
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	7912      	ldrb	r2, [r2, #4]
 800373e:	4293      	cmp	r3, r2
 8003740:	d901      	bls.n	8003746 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e042      	b.n	80037cc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003746:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800374a:	2b00      	cmp	r3, #0
 800374c:	da0f      	bge.n	800376e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800374e:	78fb      	ldrb	r3, [r7, #3]
 8003750:	f003 020f 	and.w	r2, r3, #15
 8003754:	4613      	mov	r3, r2
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	4413      	add	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	3310      	adds	r3, #16
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	4413      	add	r3, r2
 8003762:	3304      	adds	r3, #4
 8003764:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2201      	movs	r2, #1
 800376a:	705a      	strb	r2, [r3, #1]
 800376c:	e00f      	b.n	800378e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800376e:	78fb      	ldrb	r3, [r7, #3]
 8003770:	f003 020f 	and.w	r2, r3, #15
 8003774:	4613      	mov	r3, r2
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	4413      	add	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	4413      	add	r3, r2
 8003784:	3304      	adds	r3, #4
 8003786:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003794:	78fb      	ldrb	r3, [r7, #3]
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	b2da      	uxtb	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d101      	bne.n	80037ae <HAL_PCD_EP_ClrStall+0x86>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e00e      	b.n	80037cc <HAL_PCD_EP_ClrStall+0xa4>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68f9      	ldr	r1, [r7, #12]
 80037bc:	4618      	mov	r0, r3
 80037be:	f002 fecf 	bl	8006560 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80037e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	da0c      	bge.n	8003802 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037e8:	78fb      	ldrb	r3, [r7, #3]
 80037ea:	f003 020f 	and.w	r2, r3, #15
 80037ee:	4613      	mov	r3, r2
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	4413      	add	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	3310      	adds	r3, #16
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	4413      	add	r3, r2
 80037fc:	3304      	adds	r3, #4
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	e00c      	b.n	800381c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003802:	78fb      	ldrb	r3, [r7, #3]
 8003804:	f003 020f 	and.w	r2, r3, #15
 8003808:	4613      	mov	r3, r2
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	4413      	add	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	4413      	add	r3, r2
 8003818:	3304      	adds	r3, #4
 800381a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68f9      	ldr	r1, [r7, #12]
 8003822:	4618      	mov	r0, r3
 8003824:	f002 fcee 	bl	8006204 <USB_EPStopXfer>
 8003828:	4603      	mov	r3, r0
 800382a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800382c:	7afb      	ldrb	r3, [r7, #11]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b08a      	sub	sp, #40	@ 0x28
 800383a:	af02      	add	r7, sp, #8
 800383c:	6078      	str	r0, [r7, #4]
 800383e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	4613      	mov	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	3310      	adds	r3, #16
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	4413      	add	r3, r2
 800385a:	3304      	adds	r3, #4
 800385c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	695a      	ldr	r2, [r3, #20]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	429a      	cmp	r2, r3
 8003868:	d901      	bls.n	800386e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e06b      	b.n	8003946 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	691a      	ldr	r2, [r3, #16]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	429a      	cmp	r2, r3
 8003882:	d902      	bls.n	800388a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	3303      	adds	r3, #3
 800388e:	089b      	lsrs	r3, r3, #2
 8003890:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003892:	e02a      	b.n	80038ea <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	691a      	ldr	r2, [r3, #16]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	69fa      	ldr	r2, [r7, #28]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d902      	bls.n	80038b0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	3303      	adds	r3, #3
 80038b4:	089b      	lsrs	r3, r3, #2
 80038b6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	68d9      	ldr	r1, [r3, #12]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	4603      	mov	r3, r0
 80038cc:	6978      	ldr	r0, [r7, #20]
 80038ce:	f002 fd43 	bl	8006358 <USB_WritePacket>

    ep->xfer_buff  += len;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	441a      	add	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	695a      	ldr	r2, [r3, #20]
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	441a      	add	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	015a      	lsls	r2, r3, #5
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	4413      	add	r3, r2
 80038f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d809      	bhi.n	8003914 <PCD_WriteEmptyTxFifo+0xde>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	695a      	ldr	r2, [r3, #20]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003908:	429a      	cmp	r2, r3
 800390a:	d203      	bcs.n	8003914 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1bf      	bne.n	8003894 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	691a      	ldr	r2, [r3, #16]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	429a      	cmp	r2, r3
 800391e:	d811      	bhi.n	8003944 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	2201      	movs	r2, #1
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003934:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	43db      	mvns	r3, r3
 800393a:	6939      	ldr	r1, [r7, #16]
 800393c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003940:	4013      	ands	r3, r2
 8003942:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3720      	adds	r7, #32
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b088      	sub	sp, #32
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	333c      	adds	r3, #60	@ 0x3c
 8003968:	3304      	adds	r3, #4
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	015a      	lsls	r2, r3, #5
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	4413      	add	r3, r2
 8003976:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	799b      	ldrb	r3, [r3, #6]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d17b      	bne.n	8003a7e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f003 0308 	and.w	r3, r3, #8
 800398c:	2b00      	cmp	r3, #0
 800398e:	d015      	beq.n	80039bc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	4a61      	ldr	r2, [pc, #388]	@ (8003b18 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003994:	4293      	cmp	r3, r2
 8003996:	f240 80b9 	bls.w	8003b0c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 80b3 	beq.w	8003b0c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	015a      	lsls	r2, r3, #5
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	4413      	add	r3, r2
 80039ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039b2:	461a      	mov	r2, r3
 80039b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039b8:	6093      	str	r3, [r2, #8]
 80039ba:	e0a7      	b.n	8003b0c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f003 0320 	and.w	r3, r3, #32
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d009      	beq.n	80039da <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039d2:	461a      	mov	r2, r3
 80039d4:	2320      	movs	r3, #32
 80039d6:	6093      	str	r3, [r2, #8]
 80039d8:	e098      	b.n	8003b0c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f040 8093 	bne.w	8003b0c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	4a4b      	ldr	r2, [pc, #300]	@ (8003b18 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d90f      	bls.n	8003a0e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00a      	beq.n	8003a0e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a04:	461a      	mov	r2, r3
 8003a06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a0a:	6093      	str	r3, [r2, #8]
 8003a0c:	e07e      	b.n	8003b0c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	4613      	mov	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	4413      	add	r3, r2
 8003a20:	3304      	adds	r3, #4
 8003a22:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6a1a      	ldr	r2, [r3, #32]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	0159      	lsls	r1, r3, #5
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	440b      	add	r3, r1
 8003a30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a3a:	1ad2      	subs	r2, r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d114      	bne.n	8003a70 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d109      	bne.n	8003a62 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a58:	461a      	mov	r2, r3
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	f002 ff12 	bl	8006884 <USB_EP0_OutStart>
 8003a60:	e006      	b.n	8003a70 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	441a      	add	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	4619      	mov	r1, r3
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f005 f960 	bl	8008d3c <HAL_PCD_DataOutStageCallback>
 8003a7c:	e046      	b.n	8003b0c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	4a26      	ldr	r2, [pc, #152]	@ (8003b1c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d124      	bne.n	8003ad0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003aa2:	6093      	str	r3, [r2, #8]
 8003aa4:	e032      	b.n	8003b0c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f003 0320 	and.w	r3, r3, #32
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003abc:	461a      	mov	r2, r3
 8003abe:	2320      	movs	r3, #32
 8003ac0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f005 f937 	bl	8008d3c <HAL_PCD_DataOutStageCallback>
 8003ace:	e01d      	b.n	8003b0c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d114      	bne.n	8003b00 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	4613      	mov	r3, r2
 8003adc:	00db      	lsls	r3, r3, #3
 8003ade:	4413      	add	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	440b      	add	r3, r1
 8003ae4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d108      	bne.n	8003b00 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6818      	ldr	r0, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003af8:	461a      	mov	r2, r3
 8003afa:	2100      	movs	r1, #0
 8003afc:	f002 fec2 	bl	8006884 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	4619      	mov	r1, r3
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f005 f918 	bl	8008d3c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3720      	adds	r7, #32
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	4f54300a 	.word	0x4f54300a
 8003b1c:	4f54310a 	.word	0x4f54310a

08003b20 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	333c      	adds	r3, #60	@ 0x3c
 8003b38:	3304      	adds	r3, #4
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	015a      	lsls	r2, r3, #5
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	4413      	add	r3, r2
 8003b46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	4a15      	ldr	r2, [pc, #84]	@ (8003ba8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d90e      	bls.n	8003b74 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d009      	beq.n	8003b74 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b72:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f005 f8cf 	bl	8008d18 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8003ba8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d90c      	bls.n	8003b9c <PCD_EP_OutSetupPacket_int+0x7c>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	799b      	ldrb	r3, [r3, #6]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d108      	bne.n	8003b9c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6818      	ldr	r0, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b94:	461a      	mov	r2, r3
 8003b96:	2101      	movs	r1, #1
 8003b98:	f002 fe74 	bl	8006884 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	4f54300a 	.word	0x4f54300a

08003bac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	70fb      	strb	r3, [r7, #3]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003bc4:	78fb      	ldrb	r3, [r7, #3]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d107      	bne.n	8003bda <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003bca:	883b      	ldrh	r3, [r7, #0]
 8003bcc:	0419      	lsls	r1, r3, #16
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003bd8:	e028      	b.n	8003c2c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be0:	0c1b      	lsrs	r3, r3, #16
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	4413      	add	r3, r2
 8003be6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003be8:	2300      	movs	r3, #0
 8003bea:	73fb      	strb	r3, [r7, #15]
 8003bec:	e00d      	b.n	8003c0a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
 8003bf4:	3340      	adds	r3, #64	@ 0x40
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	0c1b      	lsrs	r3, r3, #16
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	4413      	add	r3, r2
 8003c02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
 8003c06:	3301      	adds	r3, #1
 8003c08:	73fb      	strb	r3, [r7, #15]
 8003c0a:	7bfa      	ldrb	r2, [r7, #15]
 8003c0c:	78fb      	ldrb	r3, [r7, #3]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d3ec      	bcc.n	8003bee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003c14:	883b      	ldrh	r3, [r7, #0]
 8003c16:	0418      	lsls	r0, r3, #16
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6819      	ldr	r1, [r3, #0]
 8003c1c:	78fb      	ldrb	r3, [r7, #3]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	4302      	orrs	r2, r0
 8003c24:	3340      	adds	r3, #64	@ 0x40
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	440b      	add	r3, r1
 8003c2a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
 8003c42:	460b      	mov	r3, r1
 8003c44:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	887a      	ldrh	r2, [r7, #2]
 8003c4c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	460b      	mov	r3, r1
 8003c66:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e267      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d075      	beq.n	8003d7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003c92:	4b88      	ldr	r3, [pc, #544]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 030c 	and.w	r3, r3, #12
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d00c      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c9e:	4b85      	ldr	r3, [pc, #532]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d112      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003caa:	4b82      	ldr	r3, [pc, #520]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cb6:	d10b      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb8:	4b7e      	ldr	r3, [pc, #504]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d05b      	beq.n	8003d7c <HAL_RCC_OscConfig+0x108>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d157      	bne.n	8003d7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e242      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cd8:	d106      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x74>
 8003cda:	4b76      	ldr	r3, [pc, #472]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a75      	ldr	r2, [pc, #468]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ce4:	6013      	str	r3, [r2, #0]
 8003ce6:	e01d      	b.n	8003d24 <HAL_RCC_OscConfig+0xb0>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cf0:	d10c      	bne.n	8003d0c <HAL_RCC_OscConfig+0x98>
 8003cf2:	4b70      	ldr	r3, [pc, #448]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a6f      	ldr	r2, [pc, #444]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003cf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cfc:	6013      	str	r3, [r2, #0]
 8003cfe:	4b6d      	ldr	r3, [pc, #436]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a6c      	ldr	r2, [pc, #432]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d08:	6013      	str	r3, [r2, #0]
 8003d0a:	e00b      	b.n	8003d24 <HAL_RCC_OscConfig+0xb0>
 8003d0c:	4b69      	ldr	r3, [pc, #420]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a68      	ldr	r2, [pc, #416]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d16:	6013      	str	r3, [r2, #0]
 8003d18:	4b66      	ldr	r3, [pc, #408]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a65      	ldr	r2, [pc, #404]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d013      	beq.n	8003d54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2c:	f7fd f998 	bl	8001060 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d34:	f7fd f994 	bl	8001060 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b64      	cmp	r3, #100	@ 0x64
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e207      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d46:	4b5b      	ldr	r3, [pc, #364]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCC_OscConfig+0xc0>
 8003d52:	e014      	b.n	8003d7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d54:	f7fd f984 	bl	8001060 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d5c:	f7fd f980 	bl	8001060 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b64      	cmp	r3, #100	@ 0x64
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e1f3      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d6e:	4b51      	ldr	r3, [pc, #324]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f0      	bne.n	8003d5c <HAL_RCC_OscConfig+0xe8>
 8003d7a:	e000      	b.n	8003d7e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d063      	beq.n	8003e52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003d8a:	4b4a      	ldr	r3, [pc, #296]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 030c 	and.w	r3, r3, #12
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00b      	beq.n	8003dae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d96:	4b47      	ldr	r3, [pc, #284]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d11c      	bne.n	8003ddc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003da2:	4b44      	ldr	r3, [pc, #272]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d116      	bne.n	8003ddc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dae:	4b41      	ldr	r3, [pc, #260]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d005      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x152>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d001      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e1c7      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc6:	4b3b      	ldr	r3, [pc, #236]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	4937      	ldr	r1, [pc, #220]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dda:	e03a      	b.n	8003e52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d020      	beq.n	8003e26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003de4:	4b34      	ldr	r3, [pc, #208]	@ (8003eb8 <HAL_RCC_OscConfig+0x244>)
 8003de6:	2201      	movs	r2, #1
 8003de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dea:	f7fd f939 	bl	8001060 <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003df2:	f7fd f935 	bl	8001060 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e1a8      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e04:	4b2b      	ldr	r3, [pc, #172]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0f0      	beq.n	8003df2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e10:	4b28      	ldr	r3, [pc, #160]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	4925      	ldr	r1, [pc, #148]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	600b      	str	r3, [r1, #0]
 8003e24:	e015      	b.n	8003e52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e26:	4b24      	ldr	r3, [pc, #144]	@ (8003eb8 <HAL_RCC_OscConfig+0x244>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2c:	f7fd f918 	bl	8001060 <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e34:	f7fd f914 	bl	8001060 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e187      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e46:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1f0      	bne.n	8003e34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d036      	beq.n	8003ecc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d016      	beq.n	8003e94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e66:	4b15      	ldr	r3, [pc, #84]	@ (8003ebc <HAL_RCC_OscConfig+0x248>)
 8003e68:	2201      	movs	r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6c:	f7fd f8f8 	bl	8001060 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e74:	f7fd f8f4 	bl	8001060 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e167      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e86:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003e88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0f0      	beq.n	8003e74 <HAL_RCC_OscConfig+0x200>
 8003e92:	e01b      	b.n	8003ecc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e94:	4b09      	ldr	r3, [pc, #36]	@ (8003ebc <HAL_RCC_OscConfig+0x248>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e9a:	f7fd f8e1 	bl	8001060 <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea0:	e00e      	b.n	8003ec0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ea2:	f7fd f8dd 	bl	8001060 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d907      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e150      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	42470000 	.word	0x42470000
 8003ebc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ec0:	4b88      	ldr	r3, [pc, #544]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003ec2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1ea      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 8097 	beq.w	8004008 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eda:	2300      	movs	r3, #0
 8003edc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ede:	4b81      	ldr	r3, [pc, #516]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10f      	bne.n	8003f0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eea:	2300      	movs	r3, #0
 8003eec:	60bb      	str	r3, [r7, #8]
 8003eee:	4b7d      	ldr	r3, [pc, #500]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef2:	4a7c      	ldr	r2, [pc, #496]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003ef4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ef8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003efa:	4b7a      	ldr	r3, [pc, #488]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f02:	60bb      	str	r3, [r7, #8]
 8003f04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f06:	2301      	movs	r3, #1
 8003f08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f0a:	4b77      	ldr	r3, [pc, #476]	@ (80040e8 <HAL_RCC_OscConfig+0x474>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d118      	bne.n	8003f48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f16:	4b74      	ldr	r3, [pc, #464]	@ (80040e8 <HAL_RCC_OscConfig+0x474>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a73      	ldr	r2, [pc, #460]	@ (80040e8 <HAL_RCC_OscConfig+0x474>)
 8003f1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f22:	f7fd f89d 	bl	8001060 <HAL_GetTick>
 8003f26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f28:	e008      	b.n	8003f3c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f2a:	f7fd f899 	bl	8001060 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d901      	bls.n	8003f3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e10c      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f3c:	4b6a      	ldr	r3, [pc, #424]	@ (80040e8 <HAL_RCC_OscConfig+0x474>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0f0      	beq.n	8003f2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d106      	bne.n	8003f5e <HAL_RCC_OscConfig+0x2ea>
 8003f50:	4b64      	ldr	r3, [pc, #400]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f54:	4a63      	ldr	r2, [pc, #396]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f56:	f043 0301 	orr.w	r3, r3, #1
 8003f5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f5c:	e01c      	b.n	8003f98 <HAL_RCC_OscConfig+0x324>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	2b05      	cmp	r3, #5
 8003f64:	d10c      	bne.n	8003f80 <HAL_RCC_OscConfig+0x30c>
 8003f66:	4b5f      	ldr	r3, [pc, #380]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f6a:	4a5e      	ldr	r2, [pc, #376]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f6c:	f043 0304 	orr.w	r3, r3, #4
 8003f70:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f72:	4b5c      	ldr	r3, [pc, #368]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f76:	4a5b      	ldr	r2, [pc, #364]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f78:	f043 0301 	orr.w	r3, r3, #1
 8003f7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f7e:	e00b      	b.n	8003f98 <HAL_RCC_OscConfig+0x324>
 8003f80:	4b58      	ldr	r3, [pc, #352]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f84:	4a57      	ldr	r2, [pc, #348]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f86:	f023 0301 	bic.w	r3, r3, #1
 8003f8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f8c:	4b55      	ldr	r3, [pc, #340]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f90:	4a54      	ldr	r2, [pc, #336]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f92:	f023 0304 	bic.w	r3, r3, #4
 8003f96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d015      	beq.n	8003fcc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa0:	f7fd f85e 	bl	8001060 <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa6:	e00a      	b.n	8003fbe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fa8:	f7fd f85a 	bl	8001060 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e0cb      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fbe:	4b49      	ldr	r3, [pc, #292]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0ee      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x334>
 8003fca:	e014      	b.n	8003ff6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fcc:	f7fd f848 	bl	8001060 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd2:	e00a      	b.n	8003fea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fd4:	f7fd f844 	bl	8001060 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e0b5      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fea:	4b3e      	ldr	r3, [pc, #248]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1ee      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ff6:	7dfb      	ldrb	r3, [r7, #23]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d105      	bne.n	8004008 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ffc:	4b39      	ldr	r3, [pc, #228]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004000:	4a38      	ldr	r2, [pc, #224]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8004002:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004006:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 80a1 	beq.w	8004154 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004012:	4b34      	ldr	r3, [pc, #208]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 030c 	and.w	r3, r3, #12
 800401a:	2b08      	cmp	r3, #8
 800401c:	d05c      	beq.n	80040d8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	2b02      	cmp	r3, #2
 8004024:	d141      	bne.n	80040aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004026:	4b31      	ldr	r3, [pc, #196]	@ (80040ec <HAL_RCC_OscConfig+0x478>)
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402c:	f7fd f818 	bl	8001060 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004034:	f7fd f814 	bl	8001060 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e087      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004046:	4b27      	ldr	r3, [pc, #156]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f0      	bne.n	8004034 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69da      	ldr	r2, [r3, #28]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004060:	019b      	lsls	r3, r3, #6
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004068:	085b      	lsrs	r3, r3, #1
 800406a:	3b01      	subs	r3, #1
 800406c:	041b      	lsls	r3, r3, #16
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004074:	061b      	lsls	r3, r3, #24
 8004076:	491b      	ldr	r1, [pc, #108]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 8004078:	4313      	orrs	r3, r2
 800407a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800407c:	4b1b      	ldr	r3, [pc, #108]	@ (80040ec <HAL_RCC_OscConfig+0x478>)
 800407e:	2201      	movs	r2, #1
 8004080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004082:	f7fc ffed 	bl	8001060 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004088:	e008      	b.n	800409c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800408a:	f7fc ffe9 	bl	8001060 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e05c      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800409c:	4b11      	ldr	r3, [pc, #68]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0f0      	beq.n	800408a <HAL_RCC_OscConfig+0x416>
 80040a8:	e054      	b.n	8004154 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040aa:	4b10      	ldr	r3, [pc, #64]	@ (80040ec <HAL_RCC_OscConfig+0x478>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b0:	f7fc ffd6 	bl	8001060 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b8:	f7fc ffd2 	bl	8001060 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e045      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ca:	4b06      	ldr	r3, [pc, #24]	@ (80040e4 <HAL_RCC_OscConfig+0x470>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f0      	bne.n	80040b8 <HAL_RCC_OscConfig+0x444>
 80040d6:	e03d      	b.n	8004154 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d107      	bne.n	80040f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e038      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
 80040e4:	40023800 	.word	0x40023800
 80040e8:	40007000 	.word	0x40007000
 80040ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004160 <HAL_RCC_OscConfig+0x4ec>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d028      	beq.n	8004150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004108:	429a      	cmp	r2, r3
 800410a:	d121      	bne.n	8004150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004116:	429a      	cmp	r2, r3
 8004118:	d11a      	bne.n	8004150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004120:	4013      	ands	r3, r2
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004126:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004128:	4293      	cmp	r3, r2
 800412a:	d111      	bne.n	8004150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004136:	085b      	lsrs	r3, r3, #1
 8004138:	3b01      	subs	r3, #1
 800413a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800413c:	429a      	cmp	r2, r3
 800413e:	d107      	bne.n	8004150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800414c:	429a      	cmp	r2, r3
 800414e:	d001      	beq.n	8004154 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e000      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	40023800 	.word	0x40023800

08004164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0cc      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004178:	4b68      	ldr	r3, [pc, #416]	@ (800431c <HAL_RCC_ClockConfig+0x1b8>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	429a      	cmp	r2, r3
 8004184:	d90c      	bls.n	80041a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004186:	4b65      	ldr	r3, [pc, #404]	@ (800431c <HAL_RCC_ClockConfig+0x1b8>)
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800418e:	4b63      	ldr	r3, [pc, #396]	@ (800431c <HAL_RCC_ClockConfig+0x1b8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d001      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e0b8      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d020      	beq.n	80041ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041b8:	4b59      	ldr	r3, [pc, #356]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	4a58      	ldr	r2, [pc, #352]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80041c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0308 	and.w	r3, r3, #8
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d005      	beq.n	80041dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041d0:	4b53      	ldr	r3, [pc, #332]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	4a52      	ldr	r2, [pc, #328]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80041da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041dc:	4b50      	ldr	r3, [pc, #320]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	494d      	ldr	r1, [pc, #308]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d044      	beq.n	8004284 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d107      	bne.n	8004212 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004202:	4b47      	ldr	r3, [pc, #284]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d119      	bne.n	8004242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e07f      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2b02      	cmp	r3, #2
 8004218:	d003      	beq.n	8004222 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800421e:	2b03      	cmp	r3, #3
 8004220:	d107      	bne.n	8004232 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004222:	4b3f      	ldr	r3, [pc, #252]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d109      	bne.n	8004242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e06f      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004232:	4b3b      	ldr	r3, [pc, #236]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e067      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004242:	4b37      	ldr	r3, [pc, #220]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f023 0203 	bic.w	r2, r3, #3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	4934      	ldr	r1, [pc, #208]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004250:	4313      	orrs	r3, r2
 8004252:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004254:	f7fc ff04 	bl	8001060 <HAL_GetTick>
 8004258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425a:	e00a      	b.n	8004272 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800425c:	f7fc ff00 	bl	8001060 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800426a:	4293      	cmp	r3, r2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e04f      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004272:	4b2b      	ldr	r3, [pc, #172]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 020c 	and.w	r2, r3, #12
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	429a      	cmp	r2, r3
 8004282:	d1eb      	bne.n	800425c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004284:	4b25      	ldr	r3, [pc, #148]	@ (800431c <HAL_RCC_ClockConfig+0x1b8>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	429a      	cmp	r2, r3
 8004290:	d20c      	bcs.n	80042ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004292:	4b22      	ldr	r3, [pc, #136]	@ (800431c <HAL_RCC_ClockConfig+0x1b8>)
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	b2d2      	uxtb	r2, r2
 8004298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800429a:	4b20      	ldr	r3, [pc, #128]	@ (800431c <HAL_RCC_ClockConfig+0x1b8>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0307 	and.w	r3, r3, #7
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d001      	beq.n	80042ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e032      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d008      	beq.n	80042ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042b8:	4b19      	ldr	r3, [pc, #100]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	4916      	ldr	r1, [pc, #88]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d009      	beq.n	80042ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042d6:	4b12      	ldr	r3, [pc, #72]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	490e      	ldr	r1, [pc, #56]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042ea:	f000 f821 	bl	8004330 <HAL_RCC_GetSysClockFreq>
 80042ee:	4602      	mov	r2, r0
 80042f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	091b      	lsrs	r3, r3, #4
 80042f6:	f003 030f 	and.w	r3, r3, #15
 80042fa:	490a      	ldr	r1, [pc, #40]	@ (8004324 <HAL_RCC_ClockConfig+0x1c0>)
 80042fc:	5ccb      	ldrb	r3, [r1, r3]
 80042fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004302:	4a09      	ldr	r2, [pc, #36]	@ (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 8004304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004306:	4b09      	ldr	r3, [pc, #36]	@ (800432c <HAL_RCC_ClockConfig+0x1c8>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4618      	mov	r0, r3
 800430c:	f7fc fe64 	bl	8000fd8 <HAL_InitTick>

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40023c00 	.word	0x40023c00
 8004320:	40023800 	.word	0x40023800
 8004324:	08009328 	.word	0x08009328
 8004328:	20000000 	.word	0x20000000
 800432c:	20000004 	.word	0x20000004

08004330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004334:	b090      	sub	sp, #64	@ 0x40
 8004336:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004348:	4b59      	ldr	r3, [pc, #356]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 030c 	and.w	r3, r3, #12
 8004350:	2b08      	cmp	r3, #8
 8004352:	d00d      	beq.n	8004370 <HAL_RCC_GetSysClockFreq+0x40>
 8004354:	2b08      	cmp	r3, #8
 8004356:	f200 80a1 	bhi.w	800449c <HAL_RCC_GetSysClockFreq+0x16c>
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <HAL_RCC_GetSysClockFreq+0x34>
 800435e:	2b04      	cmp	r3, #4
 8004360:	d003      	beq.n	800436a <HAL_RCC_GetSysClockFreq+0x3a>
 8004362:	e09b      	b.n	800449c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004364:	4b53      	ldr	r3, [pc, #332]	@ (80044b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004366:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004368:	e09b      	b.n	80044a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800436a:	4b53      	ldr	r3, [pc, #332]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800436c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800436e:	e098      	b.n	80044a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004370:	4b4f      	ldr	r3, [pc, #316]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004378:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800437a:	4b4d      	ldr	r3, [pc, #308]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d028      	beq.n	80043d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004386:	4b4a      	ldr	r3, [pc, #296]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	099b      	lsrs	r3, r3, #6
 800438c:	2200      	movs	r2, #0
 800438e:	623b      	str	r3, [r7, #32]
 8004390:	627a      	str	r2, [r7, #36]	@ 0x24
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004398:	2100      	movs	r1, #0
 800439a:	4b47      	ldr	r3, [pc, #284]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800439c:	fb03 f201 	mul.w	r2, r3, r1
 80043a0:	2300      	movs	r3, #0
 80043a2:	fb00 f303 	mul.w	r3, r0, r3
 80043a6:	4413      	add	r3, r2
 80043a8:	4a43      	ldr	r2, [pc, #268]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80043aa:	fba0 1202 	umull	r1, r2, r0, r2
 80043ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043b0:	460a      	mov	r2, r1
 80043b2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80043b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043b6:	4413      	add	r3, r2
 80043b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043bc:	2200      	movs	r2, #0
 80043be:	61bb      	str	r3, [r7, #24]
 80043c0:	61fa      	str	r2, [r7, #28]
 80043c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80043ca:	f7fb ff05 	bl	80001d8 <__aeabi_uldivmod>
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	4613      	mov	r3, r2
 80043d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043d6:	e053      	b.n	8004480 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043d8:	4b35      	ldr	r3, [pc, #212]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	099b      	lsrs	r3, r3, #6
 80043de:	2200      	movs	r2, #0
 80043e0:	613b      	str	r3, [r7, #16]
 80043e2:	617a      	str	r2, [r7, #20]
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80043ea:	f04f 0b00 	mov.w	fp, #0
 80043ee:	4652      	mov	r2, sl
 80043f0:	465b      	mov	r3, fp
 80043f2:	f04f 0000 	mov.w	r0, #0
 80043f6:	f04f 0100 	mov.w	r1, #0
 80043fa:	0159      	lsls	r1, r3, #5
 80043fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004400:	0150      	lsls	r0, r2, #5
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	ebb2 080a 	subs.w	r8, r2, sl
 800440a:	eb63 090b 	sbc.w	r9, r3, fp
 800440e:	f04f 0200 	mov.w	r2, #0
 8004412:	f04f 0300 	mov.w	r3, #0
 8004416:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800441a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800441e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004422:	ebb2 0408 	subs.w	r4, r2, r8
 8004426:	eb63 0509 	sbc.w	r5, r3, r9
 800442a:	f04f 0200 	mov.w	r2, #0
 800442e:	f04f 0300 	mov.w	r3, #0
 8004432:	00eb      	lsls	r3, r5, #3
 8004434:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004438:	00e2      	lsls	r2, r4, #3
 800443a:	4614      	mov	r4, r2
 800443c:	461d      	mov	r5, r3
 800443e:	eb14 030a 	adds.w	r3, r4, sl
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	eb45 030b 	adc.w	r3, r5, fp
 8004448:	607b      	str	r3, [r7, #4]
 800444a:	f04f 0200 	mov.w	r2, #0
 800444e:	f04f 0300 	mov.w	r3, #0
 8004452:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004456:	4629      	mov	r1, r5
 8004458:	028b      	lsls	r3, r1, #10
 800445a:	4621      	mov	r1, r4
 800445c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004460:	4621      	mov	r1, r4
 8004462:	028a      	lsls	r2, r1, #10
 8004464:	4610      	mov	r0, r2
 8004466:	4619      	mov	r1, r3
 8004468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800446a:	2200      	movs	r2, #0
 800446c:	60bb      	str	r3, [r7, #8]
 800446e:	60fa      	str	r2, [r7, #12]
 8004470:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004474:	f7fb feb0 	bl	80001d8 <__aeabi_uldivmod>
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	4613      	mov	r3, r2
 800447e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004480:	4b0b      	ldr	r3, [pc, #44]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	0c1b      	lsrs	r3, r3, #16
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	3301      	adds	r3, #1
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004490:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004494:	fbb2 f3f3 	udiv	r3, r2, r3
 8004498:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800449a:	e002      	b.n	80044a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800449c:	4b05      	ldr	r3, [pc, #20]	@ (80044b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800449e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3740      	adds	r7, #64	@ 0x40
 80044a8:	46bd      	mov	sp, r7
 80044aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044ae:	bf00      	nop
 80044b0:	40023800 	.word	0x40023800
 80044b4:	00f42400 	.word	0x00f42400
 80044b8:	017d7840 	.word	0x017d7840

080044bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044c0:	4b03      	ldr	r3, [pc, #12]	@ (80044d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80044c2:	681b      	ldr	r3, [r3, #0]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	20000000 	.word	0x20000000

080044d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044d8:	f7ff fff0 	bl	80044bc <HAL_RCC_GetHCLKFreq>
 80044dc:	4602      	mov	r2, r0
 80044de:	4b05      	ldr	r3, [pc, #20]	@ (80044f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	0a9b      	lsrs	r3, r3, #10
 80044e4:	f003 0307 	and.w	r3, r3, #7
 80044e8:	4903      	ldr	r1, [pc, #12]	@ (80044f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ea:	5ccb      	ldrb	r3, [r1, r3]
 80044ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	40023800 	.word	0x40023800
 80044f8:	08009338 	.word	0x08009338

080044fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004500:	f7ff ffdc 	bl	80044bc <HAL_RCC_GetHCLKFreq>
 8004504:	4602      	mov	r2, r0
 8004506:	4b05      	ldr	r3, [pc, #20]	@ (800451c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	0b5b      	lsrs	r3, r3, #13
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	4903      	ldr	r1, [pc, #12]	@ (8004520 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004512:	5ccb      	ldrb	r3, [r1, r3]
 8004514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004518:	4618      	mov	r0, r3
 800451a:	bd80      	pop	{r7, pc}
 800451c:	40023800 	.word	0x40023800
 8004520:	08009338 	.word	0x08009338

08004524 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e041      	b.n	80045ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d106      	bne.n	8004550 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7fc fbe4 	bl	8000d18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2202      	movs	r2, #2
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3304      	adds	r3, #4
 8004560:	4619      	mov	r1, r3
 8004562:	4610      	mov	r0, r2
 8004564:	f000 fa70 	bl	8004a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
	...

080045c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d001      	beq.n	80045dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e044      	b.n	8004666 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2202      	movs	r2, #2
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0201 	orr.w	r2, r2, #1
 80045f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a1e      	ldr	r2, [pc, #120]	@ (8004674 <HAL_TIM_Base_Start_IT+0xb0>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d018      	beq.n	8004630 <HAL_TIM_Base_Start_IT+0x6c>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004606:	d013      	beq.n	8004630 <HAL_TIM_Base_Start_IT+0x6c>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a1a      	ldr	r2, [pc, #104]	@ (8004678 <HAL_TIM_Base_Start_IT+0xb4>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d00e      	beq.n	8004630 <HAL_TIM_Base_Start_IT+0x6c>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a19      	ldr	r2, [pc, #100]	@ (800467c <HAL_TIM_Base_Start_IT+0xb8>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d009      	beq.n	8004630 <HAL_TIM_Base_Start_IT+0x6c>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a17      	ldr	r2, [pc, #92]	@ (8004680 <HAL_TIM_Base_Start_IT+0xbc>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d004      	beq.n	8004630 <HAL_TIM_Base_Start_IT+0x6c>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a16      	ldr	r2, [pc, #88]	@ (8004684 <HAL_TIM_Base_Start_IT+0xc0>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d111      	bne.n	8004654 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2b06      	cmp	r3, #6
 8004640:	d010      	beq.n	8004664 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f042 0201 	orr.w	r2, r2, #1
 8004650:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004652:	e007      	b.n	8004664 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0201 	orr.w	r2, r2, #1
 8004662:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	40010000 	.word	0x40010000
 8004678:	40000400 	.word	0x40000400
 800467c:	40000800 	.word	0x40000800
 8004680:	40000c00 	.word	0x40000c00
 8004684:	40014000 	.word	0x40014000

08004688 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d020      	beq.n	80046ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d01b      	beq.n	80046ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f06f 0202 	mvn.w	r2, #2
 80046bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f999 	bl	8004a0a <HAL_TIM_IC_CaptureCallback>
 80046d8:	e005      	b.n	80046e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f98b 	bl	80049f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f99c 	bl	8004a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f003 0304 	and.w	r3, r3, #4
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d020      	beq.n	8004738 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01b      	beq.n	8004738 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f06f 0204 	mvn.w	r2, #4
 8004708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2202      	movs	r2, #2
 800470e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f973 	bl	8004a0a <HAL_TIM_IC_CaptureCallback>
 8004724:	e005      	b.n	8004732 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f965 	bl	80049f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f976 	bl	8004a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	2b00      	cmp	r3, #0
 8004740:	d020      	beq.n	8004784 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	2b00      	cmp	r3, #0
 800474a:	d01b      	beq.n	8004784 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f06f 0208 	mvn.w	r2, #8
 8004754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2204      	movs	r2, #4
 800475a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f94d 	bl	8004a0a <HAL_TIM_IC_CaptureCallback>
 8004770:	e005      	b.n	800477e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f93f 	bl	80049f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f950 	bl	8004a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f003 0310 	and.w	r3, r3, #16
 800478a:	2b00      	cmp	r3, #0
 800478c:	d020      	beq.n	80047d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f003 0310 	and.w	r3, r3, #16
 8004794:	2b00      	cmp	r3, #0
 8004796:	d01b      	beq.n	80047d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f06f 0210 	mvn.w	r2, #16
 80047a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2208      	movs	r2, #8
 80047a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f927 	bl	8004a0a <HAL_TIM_IC_CaptureCallback>
 80047bc:	e005      	b.n	80047ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f919 	bl	80049f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f92a 	bl	8004a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00c      	beq.n	80047f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d007      	beq.n	80047f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f06f 0201 	mvn.w	r2, #1
 80047ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fc f9b6 	bl	8000b60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00c      	beq.n	8004818 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004804:	2b00      	cmp	r3, #0
 8004806:	d007      	beq.n	8004818 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 fab0 	bl	8004d78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00c      	beq.n	800483c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004828:	2b00      	cmp	r3, #0
 800482a:	d007      	beq.n	800483c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f8fb 	bl	8004a32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	f003 0320 	and.w	r3, r3, #32
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00c      	beq.n	8004860 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f003 0320 	and.w	r3, r3, #32
 800484c:	2b00      	cmp	r3, #0
 800484e:	d007      	beq.n	8004860 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f06f 0220 	mvn.w	r2, #32
 8004858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 fa82 	bl	8004d64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004860:	bf00      	nop
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800487c:	2b01      	cmp	r3, #1
 800487e:	d101      	bne.n	8004884 <HAL_TIM_ConfigClockSource+0x1c>
 8004880:	2302      	movs	r3, #2
 8004882:	e0b4      	b.n	80049ee <HAL_TIM_ConfigClockSource+0x186>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80048a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048bc:	d03e      	beq.n	800493c <HAL_TIM_ConfigClockSource+0xd4>
 80048be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048c2:	f200 8087 	bhi.w	80049d4 <HAL_TIM_ConfigClockSource+0x16c>
 80048c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048ca:	f000 8086 	beq.w	80049da <HAL_TIM_ConfigClockSource+0x172>
 80048ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048d2:	d87f      	bhi.n	80049d4 <HAL_TIM_ConfigClockSource+0x16c>
 80048d4:	2b70      	cmp	r3, #112	@ 0x70
 80048d6:	d01a      	beq.n	800490e <HAL_TIM_ConfigClockSource+0xa6>
 80048d8:	2b70      	cmp	r3, #112	@ 0x70
 80048da:	d87b      	bhi.n	80049d4 <HAL_TIM_ConfigClockSource+0x16c>
 80048dc:	2b60      	cmp	r3, #96	@ 0x60
 80048de:	d050      	beq.n	8004982 <HAL_TIM_ConfigClockSource+0x11a>
 80048e0:	2b60      	cmp	r3, #96	@ 0x60
 80048e2:	d877      	bhi.n	80049d4 <HAL_TIM_ConfigClockSource+0x16c>
 80048e4:	2b50      	cmp	r3, #80	@ 0x50
 80048e6:	d03c      	beq.n	8004962 <HAL_TIM_ConfigClockSource+0xfa>
 80048e8:	2b50      	cmp	r3, #80	@ 0x50
 80048ea:	d873      	bhi.n	80049d4 <HAL_TIM_ConfigClockSource+0x16c>
 80048ec:	2b40      	cmp	r3, #64	@ 0x40
 80048ee:	d058      	beq.n	80049a2 <HAL_TIM_ConfigClockSource+0x13a>
 80048f0:	2b40      	cmp	r3, #64	@ 0x40
 80048f2:	d86f      	bhi.n	80049d4 <HAL_TIM_ConfigClockSource+0x16c>
 80048f4:	2b30      	cmp	r3, #48	@ 0x30
 80048f6:	d064      	beq.n	80049c2 <HAL_TIM_ConfigClockSource+0x15a>
 80048f8:	2b30      	cmp	r3, #48	@ 0x30
 80048fa:	d86b      	bhi.n	80049d4 <HAL_TIM_ConfigClockSource+0x16c>
 80048fc:	2b20      	cmp	r3, #32
 80048fe:	d060      	beq.n	80049c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004900:	2b20      	cmp	r3, #32
 8004902:	d867      	bhi.n	80049d4 <HAL_TIM_ConfigClockSource+0x16c>
 8004904:	2b00      	cmp	r3, #0
 8004906:	d05c      	beq.n	80049c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004908:	2b10      	cmp	r3, #16
 800490a:	d05a      	beq.n	80049c2 <HAL_TIM_ConfigClockSource+0x15a>
 800490c:	e062      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800491e:	f000 f993 	bl	8004c48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004930:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	609a      	str	r2, [r3, #8]
      break;
 800493a:	e04f      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800494c:	f000 f97c 	bl	8004c48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689a      	ldr	r2, [r3, #8]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800495e:	609a      	str	r2, [r3, #8]
      break;
 8004960:	e03c      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800496e:	461a      	mov	r2, r3
 8004970:	f000 f8f0 	bl	8004b54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2150      	movs	r1, #80	@ 0x50
 800497a:	4618      	mov	r0, r3
 800497c:	f000 f949 	bl	8004c12 <TIM_ITRx_SetConfig>
      break;
 8004980:	e02c      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800498e:	461a      	mov	r2, r3
 8004990:	f000 f90f 	bl	8004bb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2160      	movs	r1, #96	@ 0x60
 800499a:	4618      	mov	r0, r3
 800499c:	f000 f939 	bl	8004c12 <TIM_ITRx_SetConfig>
      break;
 80049a0:	e01c      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ae:	461a      	mov	r2, r3
 80049b0:	f000 f8d0 	bl	8004b54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2140      	movs	r1, #64	@ 0x40
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 f929 	bl	8004c12 <TIM_ITRx_SetConfig>
      break;
 80049c0:	e00c      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4619      	mov	r1, r3
 80049cc:	4610      	mov	r0, r2
 80049ce:	f000 f920 	bl	8004c12 <TIM_ITRx_SetConfig>
      break;
 80049d2:	e003      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	73fb      	strb	r3, [r7, #15]
      break;
 80049d8:	e000      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b083      	sub	sp, #12
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049fe:	bf00      	nop
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
	...

08004a48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a37      	ldr	r2, [pc, #220]	@ (8004b38 <TIM_Base_SetConfig+0xf0>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d00f      	beq.n	8004a80 <TIM_Base_SetConfig+0x38>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a66:	d00b      	beq.n	8004a80 <TIM_Base_SetConfig+0x38>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a34      	ldr	r2, [pc, #208]	@ (8004b3c <TIM_Base_SetConfig+0xf4>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d007      	beq.n	8004a80 <TIM_Base_SetConfig+0x38>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a33      	ldr	r2, [pc, #204]	@ (8004b40 <TIM_Base_SetConfig+0xf8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d003      	beq.n	8004a80 <TIM_Base_SetConfig+0x38>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a32      	ldr	r2, [pc, #200]	@ (8004b44 <TIM_Base_SetConfig+0xfc>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d108      	bne.n	8004a92 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a28      	ldr	r2, [pc, #160]	@ (8004b38 <TIM_Base_SetConfig+0xf0>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d01b      	beq.n	8004ad2 <TIM_Base_SetConfig+0x8a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aa0:	d017      	beq.n	8004ad2 <TIM_Base_SetConfig+0x8a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a25      	ldr	r2, [pc, #148]	@ (8004b3c <TIM_Base_SetConfig+0xf4>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d013      	beq.n	8004ad2 <TIM_Base_SetConfig+0x8a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a24      	ldr	r2, [pc, #144]	@ (8004b40 <TIM_Base_SetConfig+0xf8>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d00f      	beq.n	8004ad2 <TIM_Base_SetConfig+0x8a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a23      	ldr	r2, [pc, #140]	@ (8004b44 <TIM_Base_SetConfig+0xfc>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d00b      	beq.n	8004ad2 <TIM_Base_SetConfig+0x8a>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a22      	ldr	r2, [pc, #136]	@ (8004b48 <TIM_Base_SetConfig+0x100>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d007      	beq.n	8004ad2 <TIM_Base_SetConfig+0x8a>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a21      	ldr	r2, [pc, #132]	@ (8004b4c <TIM_Base_SetConfig+0x104>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d003      	beq.n	8004ad2 <TIM_Base_SetConfig+0x8a>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a20      	ldr	r2, [pc, #128]	@ (8004b50 <TIM_Base_SetConfig+0x108>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d108      	bne.n	8004ae4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	689a      	ldr	r2, [r3, #8]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a0c      	ldr	r2, [pc, #48]	@ (8004b38 <TIM_Base_SetConfig+0xf0>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d103      	bne.n	8004b12 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	691a      	ldr	r2, [r3, #16]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f043 0204 	orr.w	r2, r3, #4
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	601a      	str	r2, [r3, #0]
}
 8004b2a:	bf00      	nop
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	40010000 	.word	0x40010000
 8004b3c:	40000400 	.word	0x40000400
 8004b40:	40000800 	.word	0x40000800
 8004b44:	40000c00 	.word	0x40000c00
 8004b48:	40014000 	.word	0x40014000
 8004b4c:	40014400 	.word	0x40014400
 8004b50:	40014800 	.word	0x40014800

08004b54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	f023 0201 	bic.w	r2, r3, #1
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	011b      	lsls	r3, r3, #4
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f023 030a 	bic.w	r3, r3, #10
 8004b90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	621a      	str	r2, [r3, #32]
}
 8004ba6:	bf00      	nop
 8004ba8:	371c      	adds	r7, #28
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b087      	sub	sp, #28
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	60f8      	str	r0, [r7, #12]
 8004bba:	60b9      	str	r1, [r7, #8]
 8004bbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	f023 0210 	bic.w	r2, r3, #16
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004bdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	031b      	lsls	r3, r3, #12
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004bee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	621a      	str	r2, [r3, #32]
}
 8004c06:	bf00      	nop
 8004c08:	371c      	adds	r7, #28
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b085      	sub	sp, #20
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
 8004c1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f043 0307 	orr.w	r3, r3, #7
 8004c34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	609a      	str	r2, [r3, #8]
}
 8004c3c:	bf00      	nop
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b087      	sub	sp, #28
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
 8004c54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	021a      	lsls	r2, r3, #8
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	609a      	str	r2, [r3, #8]
}
 8004c7c:	bf00      	nop
 8004c7e:	371c      	adds	r7, #28
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d101      	bne.n	8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	e050      	b.n	8004d42 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a1c      	ldr	r2, [pc, #112]	@ (8004d50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d018      	beq.n	8004d16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cec:	d013      	beq.n	8004d16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a18      	ldr	r2, [pc, #96]	@ (8004d54 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d00e      	beq.n	8004d16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a16      	ldr	r2, [pc, #88]	@ (8004d58 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d009      	beq.n	8004d16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a15      	ldr	r2, [pc, #84]	@ (8004d5c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d004      	beq.n	8004d16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a13      	ldr	r2, [pc, #76]	@ (8004d60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d10c      	bne.n	8004d30 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	40010000 	.word	0x40010000
 8004d54:	40000400 	.word	0x40000400
 8004d58:	40000800 	.word	0x40000800
 8004d5c:	40000c00 	.word	0x40000c00
 8004d60:	40014000 	.word	0x40014000

08004d64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e042      	b.n	8004e24 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d106      	bne.n	8004db8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7fb ffd8 	bl	8000d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2224      	movs	r2, #36	@ 0x24
 8004dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004dce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 f82b 	bl	8004e2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	691a      	ldr	r2, [r3, #16]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004de4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	695a      	ldr	r2, [r3, #20]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004df4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68da      	ldr	r2, [r3, #12]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e30:	b0c0      	sub	sp, #256	@ 0x100
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e48:	68d9      	ldr	r1, [r3, #12]
 8004e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	ea40 0301 	orr.w	r3, r0, r1
 8004e54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e5a:	689a      	ldr	r2, [r3, #8]
 8004e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	431a      	orrs	r2, r3
 8004e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004e84:	f021 010c 	bic.w	r1, r1, #12
 8004e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e92:	430b      	orrs	r3, r1
 8004e94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea6:	6999      	ldr	r1, [r3, #24]
 8004ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	ea40 0301 	orr.w	r3, r0, r1
 8004eb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	4b8f      	ldr	r3, [pc, #572]	@ (80050f8 <UART_SetConfig+0x2cc>)
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d005      	beq.n	8004ecc <UART_SetConfig+0xa0>
 8004ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	4b8d      	ldr	r3, [pc, #564]	@ (80050fc <UART_SetConfig+0x2d0>)
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d104      	bne.n	8004ed6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ecc:	f7ff fb16 	bl	80044fc <HAL_RCC_GetPCLK2Freq>
 8004ed0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004ed4:	e003      	b.n	8004ede <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ed6:	f7ff fafd 	bl	80044d4 <HAL_RCC_GetPCLK1Freq>
 8004eda:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ee8:	f040 810c 	bne.w	8005104 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004eec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004ef6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004efa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004efe:	4622      	mov	r2, r4
 8004f00:	462b      	mov	r3, r5
 8004f02:	1891      	adds	r1, r2, r2
 8004f04:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004f06:	415b      	adcs	r3, r3
 8004f08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f0e:	4621      	mov	r1, r4
 8004f10:	eb12 0801 	adds.w	r8, r2, r1
 8004f14:	4629      	mov	r1, r5
 8004f16:	eb43 0901 	adc.w	r9, r3, r1
 8004f1a:	f04f 0200 	mov.w	r2, #0
 8004f1e:	f04f 0300 	mov.w	r3, #0
 8004f22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f2e:	4690      	mov	r8, r2
 8004f30:	4699      	mov	r9, r3
 8004f32:	4623      	mov	r3, r4
 8004f34:	eb18 0303 	adds.w	r3, r8, r3
 8004f38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f3c:	462b      	mov	r3, r5
 8004f3e:	eb49 0303 	adc.w	r3, r9, r3
 8004f42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f52:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004f56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	18db      	adds	r3, r3, r3
 8004f5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f60:	4613      	mov	r3, r2
 8004f62:	eb42 0303 	adc.w	r3, r2, r3
 8004f66:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004f6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004f70:	f7fb f932 	bl	80001d8 <__aeabi_uldivmod>
 8004f74:	4602      	mov	r2, r0
 8004f76:	460b      	mov	r3, r1
 8004f78:	4b61      	ldr	r3, [pc, #388]	@ (8005100 <UART_SetConfig+0x2d4>)
 8004f7a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f7e:	095b      	lsrs	r3, r3, #5
 8004f80:	011c      	lsls	r4, r3, #4
 8004f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f86:	2200      	movs	r2, #0
 8004f88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f8c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004f90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004f94:	4642      	mov	r2, r8
 8004f96:	464b      	mov	r3, r9
 8004f98:	1891      	adds	r1, r2, r2
 8004f9a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004f9c:	415b      	adcs	r3, r3
 8004f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fa0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004fa4:	4641      	mov	r1, r8
 8004fa6:	eb12 0a01 	adds.w	sl, r2, r1
 8004faa:	4649      	mov	r1, r9
 8004fac:	eb43 0b01 	adc.w	fp, r3, r1
 8004fb0:	f04f 0200 	mov.w	r2, #0
 8004fb4:	f04f 0300 	mov.w	r3, #0
 8004fb8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fbc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fc4:	4692      	mov	sl, r2
 8004fc6:	469b      	mov	fp, r3
 8004fc8:	4643      	mov	r3, r8
 8004fca:	eb1a 0303 	adds.w	r3, sl, r3
 8004fce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004fd2:	464b      	mov	r3, r9
 8004fd4:	eb4b 0303 	adc.w	r3, fp, r3
 8004fd8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004fe8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004fec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	18db      	adds	r3, r3, r3
 8004ff4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	eb42 0303 	adc.w	r3, r2, r3
 8004ffc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ffe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005002:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005006:	f7fb f8e7 	bl	80001d8 <__aeabi_uldivmod>
 800500a:	4602      	mov	r2, r0
 800500c:	460b      	mov	r3, r1
 800500e:	4611      	mov	r1, r2
 8005010:	4b3b      	ldr	r3, [pc, #236]	@ (8005100 <UART_SetConfig+0x2d4>)
 8005012:	fba3 2301 	umull	r2, r3, r3, r1
 8005016:	095b      	lsrs	r3, r3, #5
 8005018:	2264      	movs	r2, #100	@ 0x64
 800501a:	fb02 f303 	mul.w	r3, r2, r3
 800501e:	1acb      	subs	r3, r1, r3
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005026:	4b36      	ldr	r3, [pc, #216]	@ (8005100 <UART_SetConfig+0x2d4>)
 8005028:	fba3 2302 	umull	r2, r3, r3, r2
 800502c:	095b      	lsrs	r3, r3, #5
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005034:	441c      	add	r4, r3
 8005036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800503a:	2200      	movs	r2, #0
 800503c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005040:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005044:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005048:	4642      	mov	r2, r8
 800504a:	464b      	mov	r3, r9
 800504c:	1891      	adds	r1, r2, r2
 800504e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005050:	415b      	adcs	r3, r3
 8005052:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005054:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005058:	4641      	mov	r1, r8
 800505a:	1851      	adds	r1, r2, r1
 800505c:	6339      	str	r1, [r7, #48]	@ 0x30
 800505e:	4649      	mov	r1, r9
 8005060:	414b      	adcs	r3, r1
 8005062:	637b      	str	r3, [r7, #52]	@ 0x34
 8005064:	f04f 0200 	mov.w	r2, #0
 8005068:	f04f 0300 	mov.w	r3, #0
 800506c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005070:	4659      	mov	r1, fp
 8005072:	00cb      	lsls	r3, r1, #3
 8005074:	4651      	mov	r1, sl
 8005076:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800507a:	4651      	mov	r1, sl
 800507c:	00ca      	lsls	r2, r1, #3
 800507e:	4610      	mov	r0, r2
 8005080:	4619      	mov	r1, r3
 8005082:	4603      	mov	r3, r0
 8005084:	4642      	mov	r2, r8
 8005086:	189b      	adds	r3, r3, r2
 8005088:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800508c:	464b      	mov	r3, r9
 800508e:	460a      	mov	r2, r1
 8005090:	eb42 0303 	adc.w	r3, r2, r3
 8005094:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80050a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80050a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80050ac:	460b      	mov	r3, r1
 80050ae:	18db      	adds	r3, r3, r3
 80050b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050b2:	4613      	mov	r3, r2
 80050b4:	eb42 0303 	adc.w	r3, r2, r3
 80050b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80050be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80050c2:	f7fb f889 	bl	80001d8 <__aeabi_uldivmod>
 80050c6:	4602      	mov	r2, r0
 80050c8:	460b      	mov	r3, r1
 80050ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005100 <UART_SetConfig+0x2d4>)
 80050cc:	fba3 1302 	umull	r1, r3, r3, r2
 80050d0:	095b      	lsrs	r3, r3, #5
 80050d2:	2164      	movs	r1, #100	@ 0x64
 80050d4:	fb01 f303 	mul.w	r3, r1, r3
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	3332      	adds	r3, #50	@ 0x32
 80050de:	4a08      	ldr	r2, [pc, #32]	@ (8005100 <UART_SetConfig+0x2d4>)
 80050e0:	fba2 2303 	umull	r2, r3, r2, r3
 80050e4:	095b      	lsrs	r3, r3, #5
 80050e6:	f003 0207 	and.w	r2, r3, #7
 80050ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4422      	add	r2, r4
 80050f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050f4:	e106      	b.n	8005304 <UART_SetConfig+0x4d8>
 80050f6:	bf00      	nop
 80050f8:	40011000 	.word	0x40011000
 80050fc:	40011400 	.word	0x40011400
 8005100:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005108:	2200      	movs	r2, #0
 800510a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800510e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005112:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005116:	4642      	mov	r2, r8
 8005118:	464b      	mov	r3, r9
 800511a:	1891      	adds	r1, r2, r2
 800511c:	6239      	str	r1, [r7, #32]
 800511e:	415b      	adcs	r3, r3
 8005120:	627b      	str	r3, [r7, #36]	@ 0x24
 8005122:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005126:	4641      	mov	r1, r8
 8005128:	1854      	adds	r4, r2, r1
 800512a:	4649      	mov	r1, r9
 800512c:	eb43 0501 	adc.w	r5, r3, r1
 8005130:	f04f 0200 	mov.w	r2, #0
 8005134:	f04f 0300 	mov.w	r3, #0
 8005138:	00eb      	lsls	r3, r5, #3
 800513a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800513e:	00e2      	lsls	r2, r4, #3
 8005140:	4614      	mov	r4, r2
 8005142:	461d      	mov	r5, r3
 8005144:	4643      	mov	r3, r8
 8005146:	18e3      	adds	r3, r4, r3
 8005148:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800514c:	464b      	mov	r3, r9
 800514e:	eb45 0303 	adc.w	r3, r5, r3
 8005152:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005162:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005166:	f04f 0200 	mov.w	r2, #0
 800516a:	f04f 0300 	mov.w	r3, #0
 800516e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005172:	4629      	mov	r1, r5
 8005174:	008b      	lsls	r3, r1, #2
 8005176:	4621      	mov	r1, r4
 8005178:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800517c:	4621      	mov	r1, r4
 800517e:	008a      	lsls	r2, r1, #2
 8005180:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005184:	f7fb f828 	bl	80001d8 <__aeabi_uldivmod>
 8005188:	4602      	mov	r2, r0
 800518a:	460b      	mov	r3, r1
 800518c:	4b60      	ldr	r3, [pc, #384]	@ (8005310 <UART_SetConfig+0x4e4>)
 800518e:	fba3 2302 	umull	r2, r3, r3, r2
 8005192:	095b      	lsrs	r3, r3, #5
 8005194:	011c      	lsls	r4, r3, #4
 8005196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800519a:	2200      	movs	r2, #0
 800519c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80051a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80051a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80051a8:	4642      	mov	r2, r8
 80051aa:	464b      	mov	r3, r9
 80051ac:	1891      	adds	r1, r2, r2
 80051ae:	61b9      	str	r1, [r7, #24]
 80051b0:	415b      	adcs	r3, r3
 80051b2:	61fb      	str	r3, [r7, #28]
 80051b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051b8:	4641      	mov	r1, r8
 80051ba:	1851      	adds	r1, r2, r1
 80051bc:	6139      	str	r1, [r7, #16]
 80051be:	4649      	mov	r1, r9
 80051c0:	414b      	adcs	r3, r1
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	f04f 0200 	mov.w	r2, #0
 80051c8:	f04f 0300 	mov.w	r3, #0
 80051cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051d0:	4659      	mov	r1, fp
 80051d2:	00cb      	lsls	r3, r1, #3
 80051d4:	4651      	mov	r1, sl
 80051d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051da:	4651      	mov	r1, sl
 80051dc:	00ca      	lsls	r2, r1, #3
 80051de:	4610      	mov	r0, r2
 80051e0:	4619      	mov	r1, r3
 80051e2:	4603      	mov	r3, r0
 80051e4:	4642      	mov	r2, r8
 80051e6:	189b      	adds	r3, r3, r2
 80051e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80051ec:	464b      	mov	r3, r9
 80051ee:	460a      	mov	r2, r1
 80051f0:	eb42 0303 	adc.w	r3, r2, r3
 80051f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80051f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005202:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005204:	f04f 0200 	mov.w	r2, #0
 8005208:	f04f 0300 	mov.w	r3, #0
 800520c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005210:	4649      	mov	r1, r9
 8005212:	008b      	lsls	r3, r1, #2
 8005214:	4641      	mov	r1, r8
 8005216:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800521a:	4641      	mov	r1, r8
 800521c:	008a      	lsls	r2, r1, #2
 800521e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005222:	f7fa ffd9 	bl	80001d8 <__aeabi_uldivmod>
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	4611      	mov	r1, r2
 800522c:	4b38      	ldr	r3, [pc, #224]	@ (8005310 <UART_SetConfig+0x4e4>)
 800522e:	fba3 2301 	umull	r2, r3, r3, r1
 8005232:	095b      	lsrs	r3, r3, #5
 8005234:	2264      	movs	r2, #100	@ 0x64
 8005236:	fb02 f303 	mul.w	r3, r2, r3
 800523a:	1acb      	subs	r3, r1, r3
 800523c:	011b      	lsls	r3, r3, #4
 800523e:	3332      	adds	r3, #50	@ 0x32
 8005240:	4a33      	ldr	r2, [pc, #204]	@ (8005310 <UART_SetConfig+0x4e4>)
 8005242:	fba2 2303 	umull	r2, r3, r2, r3
 8005246:	095b      	lsrs	r3, r3, #5
 8005248:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800524c:	441c      	add	r4, r3
 800524e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005252:	2200      	movs	r2, #0
 8005254:	673b      	str	r3, [r7, #112]	@ 0x70
 8005256:	677a      	str	r2, [r7, #116]	@ 0x74
 8005258:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800525c:	4642      	mov	r2, r8
 800525e:	464b      	mov	r3, r9
 8005260:	1891      	adds	r1, r2, r2
 8005262:	60b9      	str	r1, [r7, #8]
 8005264:	415b      	adcs	r3, r3
 8005266:	60fb      	str	r3, [r7, #12]
 8005268:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800526c:	4641      	mov	r1, r8
 800526e:	1851      	adds	r1, r2, r1
 8005270:	6039      	str	r1, [r7, #0]
 8005272:	4649      	mov	r1, r9
 8005274:	414b      	adcs	r3, r1
 8005276:	607b      	str	r3, [r7, #4]
 8005278:	f04f 0200 	mov.w	r2, #0
 800527c:	f04f 0300 	mov.w	r3, #0
 8005280:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005284:	4659      	mov	r1, fp
 8005286:	00cb      	lsls	r3, r1, #3
 8005288:	4651      	mov	r1, sl
 800528a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800528e:	4651      	mov	r1, sl
 8005290:	00ca      	lsls	r2, r1, #3
 8005292:	4610      	mov	r0, r2
 8005294:	4619      	mov	r1, r3
 8005296:	4603      	mov	r3, r0
 8005298:	4642      	mov	r2, r8
 800529a:	189b      	adds	r3, r3, r2
 800529c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800529e:	464b      	mov	r3, r9
 80052a0:	460a      	mov	r2, r1
 80052a2:	eb42 0303 	adc.w	r3, r2, r3
 80052a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80052a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80052b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80052b4:	f04f 0200 	mov.w	r2, #0
 80052b8:	f04f 0300 	mov.w	r3, #0
 80052bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80052c0:	4649      	mov	r1, r9
 80052c2:	008b      	lsls	r3, r1, #2
 80052c4:	4641      	mov	r1, r8
 80052c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052ca:	4641      	mov	r1, r8
 80052cc:	008a      	lsls	r2, r1, #2
 80052ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80052d2:	f7fa ff81 	bl	80001d8 <__aeabi_uldivmod>
 80052d6:	4602      	mov	r2, r0
 80052d8:	460b      	mov	r3, r1
 80052da:	4b0d      	ldr	r3, [pc, #52]	@ (8005310 <UART_SetConfig+0x4e4>)
 80052dc:	fba3 1302 	umull	r1, r3, r3, r2
 80052e0:	095b      	lsrs	r3, r3, #5
 80052e2:	2164      	movs	r1, #100	@ 0x64
 80052e4:	fb01 f303 	mul.w	r3, r1, r3
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	011b      	lsls	r3, r3, #4
 80052ec:	3332      	adds	r3, #50	@ 0x32
 80052ee:	4a08      	ldr	r2, [pc, #32]	@ (8005310 <UART_SetConfig+0x4e4>)
 80052f0:	fba2 2303 	umull	r2, r3, r2, r3
 80052f4:	095b      	lsrs	r3, r3, #5
 80052f6:	f003 020f 	and.w	r2, r3, #15
 80052fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4422      	add	r2, r4
 8005302:	609a      	str	r2, [r3, #8]
}
 8005304:	bf00      	nop
 8005306:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800530a:	46bd      	mov	sp, r7
 800530c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005310:	51eb851f 	.word	0x51eb851f

08005314 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005314:	b084      	sub	sp, #16
 8005316:	b580      	push	{r7, lr}
 8005318:	b084      	sub	sp, #16
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	f107 001c 	add.w	r0, r7, #28
 8005322:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005326:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800532a:	2b01      	cmp	r3, #1
 800532c:	d123      	bne.n	8005376 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005332:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005342:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005356:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800535a:	2b01      	cmp	r3, #1
 800535c:	d105      	bne.n	800536a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f001 fae8 	bl	8006940 <USB_CoreReset>
 8005370:	4603      	mov	r3, r0
 8005372:	73fb      	strb	r3, [r7, #15]
 8005374:	e01b      	b.n	80053ae <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f001 fadc 	bl	8006940 <USB_CoreReset>
 8005388:	4603      	mov	r3, r0
 800538a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800538c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005390:	2b00      	cmp	r3, #0
 8005392:	d106      	bne.n	80053a2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005398:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	639a      	str	r2, [r3, #56]	@ 0x38
 80053a0:	e005      	b.n	80053ae <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80053ae:	7fbb      	ldrb	r3, [r7, #30]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d10b      	bne.n	80053cc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f043 0206 	orr.w	r2, r3, #6
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f043 0220 	orr.w	r2, r3, #32
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80053cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053d8:	b004      	add	sp, #16
 80053da:	4770      	bx	lr

080053dc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80053dc:	b480      	push	{r7}
 80053de:	b087      	sub	sp, #28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	4613      	mov	r3, r2
 80053e8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80053ea:	79fb      	ldrb	r3, [r7, #7]
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d165      	bne.n	80054bc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4a41      	ldr	r2, [pc, #260]	@ (80054f8 <USB_SetTurnaroundTime+0x11c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d906      	bls.n	8005406 <USB_SetTurnaroundTime+0x2a>
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	4a40      	ldr	r2, [pc, #256]	@ (80054fc <USB_SetTurnaroundTime+0x120>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d202      	bcs.n	8005406 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005400:	230f      	movs	r3, #15
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	e062      	b.n	80054cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	4a3c      	ldr	r2, [pc, #240]	@ (80054fc <USB_SetTurnaroundTime+0x120>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d306      	bcc.n	800541c <USB_SetTurnaroundTime+0x40>
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	4a3b      	ldr	r2, [pc, #236]	@ (8005500 <USB_SetTurnaroundTime+0x124>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d202      	bcs.n	800541c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005416:	230e      	movs	r3, #14
 8005418:	617b      	str	r3, [r7, #20]
 800541a:	e057      	b.n	80054cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	4a38      	ldr	r2, [pc, #224]	@ (8005500 <USB_SetTurnaroundTime+0x124>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d306      	bcc.n	8005432 <USB_SetTurnaroundTime+0x56>
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	4a37      	ldr	r2, [pc, #220]	@ (8005504 <USB_SetTurnaroundTime+0x128>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d202      	bcs.n	8005432 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800542c:	230d      	movs	r3, #13
 800542e:	617b      	str	r3, [r7, #20]
 8005430:	e04c      	b.n	80054cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	4a33      	ldr	r2, [pc, #204]	@ (8005504 <USB_SetTurnaroundTime+0x128>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d306      	bcc.n	8005448 <USB_SetTurnaroundTime+0x6c>
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	4a32      	ldr	r2, [pc, #200]	@ (8005508 <USB_SetTurnaroundTime+0x12c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d802      	bhi.n	8005448 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005442:	230c      	movs	r3, #12
 8005444:	617b      	str	r3, [r7, #20]
 8005446:	e041      	b.n	80054cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	4a2f      	ldr	r2, [pc, #188]	@ (8005508 <USB_SetTurnaroundTime+0x12c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d906      	bls.n	800545e <USB_SetTurnaroundTime+0x82>
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	4a2e      	ldr	r2, [pc, #184]	@ (800550c <USB_SetTurnaroundTime+0x130>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d802      	bhi.n	800545e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005458:	230b      	movs	r3, #11
 800545a:	617b      	str	r3, [r7, #20]
 800545c:	e036      	b.n	80054cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	4a2a      	ldr	r2, [pc, #168]	@ (800550c <USB_SetTurnaroundTime+0x130>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d906      	bls.n	8005474 <USB_SetTurnaroundTime+0x98>
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	4a29      	ldr	r2, [pc, #164]	@ (8005510 <USB_SetTurnaroundTime+0x134>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d802      	bhi.n	8005474 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800546e:	230a      	movs	r3, #10
 8005470:	617b      	str	r3, [r7, #20]
 8005472:	e02b      	b.n	80054cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	4a26      	ldr	r2, [pc, #152]	@ (8005510 <USB_SetTurnaroundTime+0x134>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d906      	bls.n	800548a <USB_SetTurnaroundTime+0xae>
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	4a25      	ldr	r2, [pc, #148]	@ (8005514 <USB_SetTurnaroundTime+0x138>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d202      	bcs.n	800548a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005484:	2309      	movs	r3, #9
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	e020      	b.n	80054cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	4a21      	ldr	r2, [pc, #132]	@ (8005514 <USB_SetTurnaroundTime+0x138>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d306      	bcc.n	80054a0 <USB_SetTurnaroundTime+0xc4>
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	4a20      	ldr	r2, [pc, #128]	@ (8005518 <USB_SetTurnaroundTime+0x13c>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d802      	bhi.n	80054a0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800549a:	2308      	movs	r3, #8
 800549c:	617b      	str	r3, [r7, #20]
 800549e:	e015      	b.n	80054cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	4a1d      	ldr	r2, [pc, #116]	@ (8005518 <USB_SetTurnaroundTime+0x13c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d906      	bls.n	80054b6 <USB_SetTurnaroundTime+0xda>
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	4a1c      	ldr	r2, [pc, #112]	@ (800551c <USB_SetTurnaroundTime+0x140>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d202      	bcs.n	80054b6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80054b0:	2307      	movs	r3, #7
 80054b2:	617b      	str	r3, [r7, #20]
 80054b4:	e00a      	b.n	80054cc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80054b6:	2306      	movs	r3, #6
 80054b8:	617b      	str	r3, [r7, #20]
 80054ba:	e007      	b.n	80054cc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80054bc:	79fb      	ldrb	r3, [r7, #7]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d102      	bne.n	80054c8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80054c2:	2309      	movs	r3, #9
 80054c4:	617b      	str	r3, [r7, #20]
 80054c6:	e001      	b.n	80054cc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80054c8:	2309      	movs	r3, #9
 80054ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	68da      	ldr	r2, [r3, #12]
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	029b      	lsls	r3, r3, #10
 80054e0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80054e4:	431a      	orrs	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	371c      	adds	r7, #28
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	00d8acbf 	.word	0x00d8acbf
 80054fc:	00e4e1c0 	.word	0x00e4e1c0
 8005500:	00f42400 	.word	0x00f42400
 8005504:	01067380 	.word	0x01067380
 8005508:	011a499f 	.word	0x011a499f
 800550c:	01312cff 	.word	0x01312cff
 8005510:	014ca43f 	.word	0x014ca43f
 8005514:	016e3600 	.word	0x016e3600
 8005518:	01a6ab1f 	.word	0x01a6ab1f
 800551c:	01e84800 	.word	0x01e84800

08005520 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f043 0201 	orr.w	r2, r3, #1
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005542:	b480      	push	{r7}
 8005544:	b083      	sub	sp, #12
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f023 0201 	bic.w	r2, r3, #1
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	460b      	mov	r3, r1
 800556e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005570:	2300      	movs	r3, #0
 8005572:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005580:	78fb      	ldrb	r3, [r7, #3]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d115      	bne.n	80055b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005592:	200a      	movs	r0, #10
 8005594:	f7fb fd70 	bl	8001078 <HAL_Delay>
      ms += 10U;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	330a      	adds	r3, #10
 800559c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f001 f93f 	bl	8006822 <USB_GetMode>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d01e      	beq.n	80055e8 <USB_SetCurrentMode+0x84>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2bc7      	cmp	r3, #199	@ 0xc7
 80055ae:	d9f0      	bls.n	8005592 <USB_SetCurrentMode+0x2e>
 80055b0:	e01a      	b.n	80055e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80055b2:	78fb      	ldrb	r3, [r7, #3]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d115      	bne.n	80055e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80055c4:	200a      	movs	r0, #10
 80055c6:	f7fb fd57 	bl	8001078 <HAL_Delay>
      ms += 10U;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	330a      	adds	r3, #10
 80055ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f001 f926 	bl	8006822 <USB_GetMode>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d005      	beq.n	80055e8 <USB_SetCurrentMode+0x84>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2bc7      	cmp	r3, #199	@ 0xc7
 80055e0:	d9f0      	bls.n	80055c4 <USB_SetCurrentMode+0x60>
 80055e2:	e001      	b.n	80055e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e005      	b.n	80055f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2bc8      	cmp	r3, #200	@ 0xc8
 80055ec:	d101      	bne.n	80055f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e000      	b.n	80055f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055fc:	b084      	sub	sp, #16
 80055fe:	b580      	push	{r7, lr}
 8005600:	b086      	sub	sp, #24
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
 8005606:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800560a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800560e:	2300      	movs	r3, #0
 8005610:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005616:	2300      	movs	r3, #0
 8005618:	613b      	str	r3, [r7, #16]
 800561a:	e009      	b.n	8005630 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	3340      	adds	r3, #64	@ 0x40
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	2200      	movs	r2, #0
 8005628:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	3301      	adds	r3, #1
 800562e:	613b      	str	r3, [r7, #16]
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	2b0e      	cmp	r3, #14
 8005634:	d9f2      	bls.n	800561c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005636:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800563a:	2b00      	cmp	r3, #0
 800563c:	d11c      	bne.n	8005678 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800564c:	f043 0302 	orr.w	r3, r3, #2
 8005650:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005656:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005662:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800566e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	639a      	str	r2, [r3, #56]	@ 0x38
 8005676:	e00b      	b.n	8005690 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800567c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005688:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005696:	461a      	mov	r2, r3
 8005698:	2300      	movs	r3, #0
 800569a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800569c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d10d      	bne.n	80056c0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80056a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d104      	bne.n	80056b6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80056ac:	2100      	movs	r1, #0
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f968 	bl	8005984 <USB_SetDevSpeed>
 80056b4:	e008      	b.n	80056c8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80056b6:	2101      	movs	r1, #1
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f963 	bl	8005984 <USB_SetDevSpeed>
 80056be:	e003      	b.n	80056c8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80056c0:	2103      	movs	r1, #3
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f95e 	bl	8005984 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056c8:	2110      	movs	r1, #16
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f8fa 	bl	80058c4 <USB_FlushTxFifo>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f924 	bl	8005928 <USB_FlushRxFifo>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056f0:	461a      	mov	r2, r3
 80056f2:	2300      	movs	r3, #0
 80056f4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056fc:	461a      	mov	r2, r3
 80056fe:	2300      	movs	r3, #0
 8005700:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005708:	461a      	mov	r2, r3
 800570a:	2300      	movs	r3, #0
 800570c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800570e:	2300      	movs	r3, #0
 8005710:	613b      	str	r3, [r7, #16]
 8005712:	e043      	b.n	800579c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	015a      	lsls	r2, r3, #5
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4413      	add	r3, r2
 800571c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005726:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800572a:	d118      	bne.n	800575e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10a      	bne.n	8005748 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4413      	add	r3, r2
 800573a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800573e:	461a      	mov	r2, r3
 8005740:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005744:	6013      	str	r3, [r2, #0]
 8005746:	e013      	b.n	8005770 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4413      	add	r3, r2
 8005750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005754:	461a      	mov	r2, r3
 8005756:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800575a:	6013      	str	r3, [r2, #0]
 800575c:	e008      	b.n	8005770 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	4413      	add	r3, r2
 8005766:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800576a:	461a      	mov	r2, r3
 800576c:	2300      	movs	r3, #0
 800576e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800577c:	461a      	mov	r2, r3
 800577e:	2300      	movs	r3, #0
 8005780:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	4413      	add	r3, r2
 800578a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800578e:	461a      	mov	r2, r3
 8005790:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005794:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	3301      	adds	r3, #1
 800579a:	613b      	str	r3, [r7, #16]
 800579c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80057a0:	461a      	mov	r2, r3
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d3b5      	bcc.n	8005714 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057a8:	2300      	movs	r3, #0
 80057aa:	613b      	str	r3, [r7, #16]
 80057ac:	e043      	b.n	8005836 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057c4:	d118      	bne.n	80057f8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10a      	bne.n	80057e2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057d8:	461a      	mov	r2, r3
 80057da:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80057de:	6013      	str	r3, [r2, #0]
 80057e0:	e013      	b.n	800580a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	015a      	lsls	r2, r3, #5
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057ee:	461a      	mov	r2, r3
 80057f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	e008      	b.n	800580a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005804:	461a      	mov	r2, r3
 8005806:	2300      	movs	r3, #0
 8005808:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	4413      	add	r3, r2
 8005812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005816:	461a      	mov	r2, r3
 8005818:	2300      	movs	r3, #0
 800581a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005828:	461a      	mov	r2, r3
 800582a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800582e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	3301      	adds	r3, #1
 8005834:	613b      	str	r3, [r7, #16]
 8005836:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800583a:	461a      	mov	r2, r3
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	4293      	cmp	r3, r2
 8005840:	d3b5      	bcc.n	80057ae <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005850:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005854:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005862:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005864:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005868:	2b00      	cmp	r3, #0
 800586a:	d105      	bne.n	8005878 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	f043 0210 	orr.w	r2, r3, #16
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	699a      	ldr	r2, [r3, #24]
 800587c:	4b10      	ldr	r3, [pc, #64]	@ (80058c0 <USB_DevInit+0x2c4>)
 800587e:	4313      	orrs	r3, r2
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005884:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005888:	2b00      	cmp	r3, #0
 800588a:	d005      	beq.n	8005898 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	f043 0208 	orr.w	r2, r3, #8
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005898:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800589c:	2b01      	cmp	r3, #1
 800589e:	d107      	bne.n	80058b0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80058a8:	f043 0304 	orr.w	r3, r3, #4
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80058b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058bc:	b004      	add	sp, #16
 80058be:	4770      	bx	lr
 80058c0:	803c3800 	.word	0x803c3800

080058c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058ce:	2300      	movs	r3, #0
 80058d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	3301      	adds	r3, #1
 80058d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058de:	d901      	bls.n	80058e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e01b      	b.n	800591c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	daf2      	bge.n	80058d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80058ec:	2300      	movs	r3, #0
 80058ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	019b      	lsls	r3, r3, #6
 80058f4:	f043 0220 	orr.w	r2, r3, #32
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	3301      	adds	r3, #1
 8005900:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005908:	d901      	bls.n	800590e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e006      	b.n	800591c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f003 0320 	and.w	r3, r3, #32
 8005916:	2b20      	cmp	r3, #32
 8005918:	d0f0      	beq.n	80058fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005930:	2300      	movs	r3, #0
 8005932:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	3301      	adds	r3, #1
 8005938:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005940:	d901      	bls.n	8005946 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e018      	b.n	8005978 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	daf2      	bge.n	8005934 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800594e:	2300      	movs	r3, #0
 8005950:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2210      	movs	r2, #16
 8005956:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	3301      	adds	r3, #1
 800595c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005964:	d901      	bls.n	800596a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e006      	b.n	8005978 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	f003 0310 	and.w	r3, r3, #16
 8005972:	2b10      	cmp	r3, #16
 8005974:	d0f0      	beq.n	8005958 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	78fb      	ldrb	r3, [r7, #3]
 800599e:	68f9      	ldr	r1, [r7, #12]
 80059a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059a4:	4313      	orrs	r3, r2
 80059a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b087      	sub	sp, #28
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 0306 	and.w	r3, r3, #6
 80059ce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d102      	bne.n	80059dc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80059d6:	2300      	movs	r3, #0
 80059d8:	75fb      	strb	r3, [r7, #23]
 80059da:	e00a      	b.n	80059f2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d002      	beq.n	80059e8 <USB_GetDevSpeed+0x32>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b06      	cmp	r3, #6
 80059e6:	d102      	bne.n	80059ee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80059e8:	2302      	movs	r3, #2
 80059ea:	75fb      	strb	r3, [r7, #23]
 80059ec:	e001      	b.n	80059f2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80059ee:	230f      	movs	r3, #15
 80059f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80059f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	371c      	adds	r7, #28
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	785b      	ldrb	r3, [r3, #1]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d13a      	bne.n	8005a92 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a22:	69da      	ldr	r2, [r3, #28]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	f003 030f 	and.w	r3, r3, #15
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	68f9      	ldr	r1, [r7, #12]
 8005a36:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d155      	bne.n	8005b00 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	791b      	ldrb	r3, [r3, #4]
 8005a6e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a70:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	059b      	lsls	r3, r3, #22
 8005a76:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	0151      	lsls	r1, r2, #5
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	440a      	add	r2, r1
 8005a82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	e036      	b.n	8005b00 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a98:	69da      	ldr	r2, [r3, #28]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	f003 030f 	and.w	r3, r3, #15
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa8:	041b      	lsls	r3, r3, #16
 8005aaa:	68f9      	ldr	r1, [r7, #12]
 8005aac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d11a      	bne.n	8005b00 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	791b      	ldrb	r3, [r3, #4]
 8005ae4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ae6:	430b      	orrs	r3, r1
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	0151      	lsls	r1, r2, #5
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	440a      	add	r2, r1
 8005af2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005af6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005afa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005afe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
	...

08005b10 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	785b      	ldrb	r3, [r3, #1]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d161      	bne.n	8005bf0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b42:	d11f      	bne.n	8005b84 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	0151      	lsls	r1, r2, #5
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	440a      	add	r2, r1
 8005b5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b5e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005b62:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	0151      	lsls	r1, r2, #5
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	440a      	add	r2, r1
 8005b7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b7e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	f003 030f 	and.w	r3, r3, #15
 8005b94:	2101      	movs	r1, #1
 8005b96:	fa01 f303 	lsl.w	r3, r1, r3
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	43db      	mvns	r3, r3
 8005b9e:	68f9      	ldr	r1, [r7, #12]
 8005ba0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bae:	69da      	ldr	r2, [r3, #28]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	f003 030f 	and.w	r3, r3, #15
 8005bb8:	2101      	movs	r1, #1
 8005bba:	fa01 f303 	lsl.w	r3, r1, r3
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	43db      	mvns	r3, r3
 8005bc2:	68f9      	ldr	r1, [r7, #12]
 8005bc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005bc8:	4013      	ands	r3, r2
 8005bca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	0159      	lsls	r1, r3, #5
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	440b      	add	r3, r1
 8005be2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005be6:	4619      	mov	r1, r3
 8005be8:	4b35      	ldr	r3, [pc, #212]	@ (8005cc0 <USB_DeactivateEndpoint+0x1b0>)
 8005bea:	4013      	ands	r3, r2
 8005bec:	600b      	str	r3, [r1, #0]
 8005bee:	e060      	b.n	8005cb2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c06:	d11f      	bne.n	8005c48 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	0151      	lsls	r1, r2, #5
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	440a      	add	r2, r1
 8005c1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c22:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005c26:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	0151      	lsls	r1, r2, #5
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	440a      	add	r2, r1
 8005c3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c42:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	f003 030f 	and.w	r3, r3, #15
 8005c58:	2101      	movs	r1, #1
 8005c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c5e:	041b      	lsls	r3, r3, #16
 8005c60:	43db      	mvns	r3, r3
 8005c62:	68f9      	ldr	r1, [r7, #12]
 8005c64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c68:	4013      	ands	r3, r2
 8005c6a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c72:	69da      	ldr	r2, [r3, #28]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	f003 030f 	and.w	r3, r3, #15
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c82:	041b      	lsls	r3, r3, #16
 8005c84:	43db      	mvns	r3, r3
 8005c86:	68f9      	ldr	r1, [r7, #12]
 8005c88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	0159      	lsls	r1, r3, #5
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	440b      	add	r3, r1
 8005ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005caa:	4619      	mov	r1, r3
 8005cac:	4b05      	ldr	r3, [pc, #20]	@ (8005cc4 <USB_DeactivateEndpoint+0x1b4>)
 8005cae:	4013      	ands	r3, r2
 8005cb0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	ec337800 	.word	0xec337800
 8005cc4:	eff37800 	.word	0xeff37800

08005cc8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b08a      	sub	sp, #40	@ 0x28
 8005ccc:	af02      	add	r7, sp, #8
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	785b      	ldrb	r3, [r3, #1]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	f040 817f 	bne.w	8005fe8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d132      	bne.n	8005d58 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	69ba      	ldr	r2, [r7, #24]
 8005d02:	0151      	lsls	r1, r2, #5
 8005d04:	69fa      	ldr	r2, [r7, #28]
 8005d06:	440a      	add	r2, r1
 8005d08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d0c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005d10:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005d14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	69ba      	ldr	r2, [r7, #24]
 8005d26:	0151      	lsls	r1, r2, #5
 8005d28:	69fa      	ldr	r2, [r7, #28]
 8005d2a:	440a      	add	r2, r1
 8005d2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d30:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	0151      	lsls	r1, r2, #5
 8005d48:	69fa      	ldr	r2, [r7, #28]
 8005d4a:	440a      	add	r2, r1
 8005d4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d50:	0cdb      	lsrs	r3, r3, #19
 8005d52:	04db      	lsls	r3, r3, #19
 8005d54:	6113      	str	r3, [r2, #16]
 8005d56:	e097      	b.n	8005e88 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	0151      	lsls	r1, r2, #5
 8005d6a:	69fa      	ldr	r2, [r7, #28]
 8005d6c:	440a      	add	r2, r1
 8005d6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d72:	0cdb      	lsrs	r3, r3, #19
 8005d74:	04db      	lsls	r3, r3, #19
 8005d76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	69ba      	ldr	r2, [r7, #24]
 8005d88:	0151      	lsls	r1, r2, #5
 8005d8a:	69fa      	ldr	r2, [r7, #28]
 8005d8c:	440a      	add	r2, r1
 8005d8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d92:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005d96:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005d9a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d11a      	bne.n	8005dd8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	691a      	ldr	r2, [r3, #16]
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d903      	bls.n	8005db6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	689a      	ldr	r2, [r3, #8]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	0151      	lsls	r1, r2, #5
 8005dc8:	69fa      	ldr	r2, [r7, #28]
 8005dca:	440a      	add	r2, r1
 8005dcc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dd0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005dd4:	6113      	str	r3, [r2, #16]
 8005dd6:	e044      	b.n	8005e62 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	691a      	ldr	r2, [r3, #16]
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	4413      	add	r3, r2
 8005de2:	1e5a      	subs	r2, r3, #1
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dec:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	015a      	lsls	r2, r3, #5
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	4413      	add	r3, r2
 8005df6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dfa:	691a      	ldr	r2, [r3, #16]
 8005dfc:	8afb      	ldrh	r3, [r7, #22]
 8005dfe:	04d9      	lsls	r1, r3, #19
 8005e00:	4ba4      	ldr	r3, [pc, #656]	@ (8006094 <USB_EPStartXfer+0x3cc>)
 8005e02:	400b      	ands	r3, r1
 8005e04:	69b9      	ldr	r1, [r7, #24]
 8005e06:	0148      	lsls	r0, r1, #5
 8005e08:	69f9      	ldr	r1, [r7, #28]
 8005e0a:	4401      	add	r1, r0
 8005e0c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005e10:	4313      	orrs	r3, r2
 8005e12:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	791b      	ldrb	r3, [r3, #4]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d122      	bne.n	8005e62 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	0151      	lsls	r1, r2, #5
 8005e2e:	69fa      	ldr	r2, [r7, #28]
 8005e30:	440a      	add	r2, r1
 8005e32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e36:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005e3a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e48:	691a      	ldr	r2, [r3, #16]
 8005e4a:	8afb      	ldrh	r3, [r7, #22]
 8005e4c:	075b      	lsls	r3, r3, #29
 8005e4e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005e52:	69b9      	ldr	r1, [r7, #24]
 8005e54:	0148      	lsls	r0, r1, #5
 8005e56:	69f9      	ldr	r1, [r7, #28]
 8005e58:	4401      	add	r1, r0
 8005e5a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e6e:	691a      	ldr	r2, [r3, #16]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e78:	69b9      	ldr	r1, [r7, #24]
 8005e7a:	0148      	lsls	r0, r1, #5
 8005e7c:	69f9      	ldr	r1, [r7, #28]
 8005e7e:	4401      	add	r1, r0
 8005e80:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005e84:	4313      	orrs	r3, r2
 8005e86:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005e88:	79fb      	ldrb	r3, [r7, #7]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d14b      	bne.n	8005f26 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	69db      	ldr	r3, [r3, #28]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d009      	beq.n	8005eaa <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	69db      	ldr	r3, [r3, #28]
 8005ea8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	791b      	ldrb	r3, [r3, #4]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d128      	bne.n	8005f04 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d110      	bne.n	8005ee4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	015a      	lsls	r2, r3, #5
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	0151      	lsls	r1, r2, #5
 8005ed4:	69fa      	ldr	r2, [r7, #28]
 8005ed6:	440a      	add	r2, r1
 8005ed8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005edc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	e00f      	b.n	8005f04 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	0151      	lsls	r1, r2, #5
 8005ef6:	69fa      	ldr	r2, [r7, #28]
 8005ef8:	440a      	add	r2, r1
 8005efa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005efe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f02:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	69ba      	ldr	r2, [r7, #24]
 8005f14:	0151      	lsls	r1, r2, #5
 8005f16:	69fa      	ldr	r2, [r7, #28]
 8005f18:	440a      	add	r2, r1
 8005f1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f1e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005f22:	6013      	str	r3, [r2, #0]
 8005f24:	e166      	b.n	80061f4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	015a      	lsls	r2, r3, #5
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	69ba      	ldr	r2, [r7, #24]
 8005f36:	0151      	lsls	r1, r2, #5
 8005f38:	69fa      	ldr	r2, [r7, #28]
 8005f3a:	440a      	add	r2, r1
 8005f3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f40:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005f44:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	791b      	ldrb	r3, [r3, #4]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d015      	beq.n	8005f7a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 814e 	beq.w	80061f4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	f003 030f 	and.w	r3, r3, #15
 8005f68:	2101      	movs	r1, #1
 8005f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f6e:	69f9      	ldr	r1, [r7, #28]
 8005f70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f74:	4313      	orrs	r3, r2
 8005f76:	634b      	str	r3, [r1, #52]	@ 0x34
 8005f78:	e13c      	b.n	80061f4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d110      	bne.n	8005fac <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	015a      	lsls	r2, r3, #5
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	0151      	lsls	r1, r2, #5
 8005f9c:	69fa      	ldr	r2, [r7, #28]
 8005f9e:	440a      	add	r2, r1
 8005fa0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fa4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005fa8:	6013      	str	r3, [r2, #0]
 8005faa:	e00f      	b.n	8005fcc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	0151      	lsls	r1, r2, #5
 8005fbe:	69fa      	ldr	r2, [r7, #28]
 8005fc0:	440a      	add	r2, r1
 8005fc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fca:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	68d9      	ldr	r1, [r3, #12]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	781a      	ldrb	r2, [r3, #0]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	b298      	uxth	r0, r3
 8005fda:	79fb      	ldrb	r3, [r7, #7]
 8005fdc:	9300      	str	r3, [sp, #0]
 8005fde:	4603      	mov	r3, r0
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f000 f9b9 	bl	8006358 <USB_WritePacket>
 8005fe6:	e105      	b.n	80061f4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	0151      	lsls	r1, r2, #5
 8005ffa:	69fa      	ldr	r2, [r7, #28]
 8005ffc:	440a      	add	r2, r1
 8005ffe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006002:	0cdb      	lsrs	r3, r3, #19
 8006004:	04db      	lsls	r3, r3, #19
 8006006:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	4413      	add	r3, r2
 8006010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	69ba      	ldr	r2, [r7, #24]
 8006018:	0151      	lsls	r1, r2, #5
 800601a:	69fa      	ldr	r2, [r7, #28]
 800601c:	440a      	add	r2, r1
 800601e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006022:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006026:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800602a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d132      	bne.n	8006098 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	689a      	ldr	r2, [r3, #8]
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	689a      	ldr	r2, [r3, #8]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	015a      	lsls	r2, r3, #5
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	4413      	add	r3, r2
 8006052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006056:	691a      	ldr	r2, [r3, #16]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006060:	69b9      	ldr	r1, [r7, #24]
 8006062:	0148      	lsls	r0, r1, #5
 8006064:	69f9      	ldr	r1, [r7, #28]
 8006066:	4401      	add	r1, r0
 8006068:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800606c:	4313      	orrs	r3, r2
 800606e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	0151      	lsls	r1, r2, #5
 8006082:	69fa      	ldr	r2, [r7, #28]
 8006084:	440a      	add	r2, r1
 8006086:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800608a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800608e:	6113      	str	r3, [r2, #16]
 8006090:	e062      	b.n	8006158 <USB_EPStartXfer+0x490>
 8006092:	bf00      	nop
 8006094:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d123      	bne.n	80060e8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ac:	691a      	ldr	r2, [r3, #16]
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060b6:	69b9      	ldr	r1, [r7, #24]
 80060b8:	0148      	lsls	r0, r1, #5
 80060ba:	69f9      	ldr	r1, [r7, #28]
 80060bc:	4401      	add	r1, r0
 80060be:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80060c2:	4313      	orrs	r3, r2
 80060c4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	0151      	lsls	r1, r2, #5
 80060d8:	69fa      	ldr	r2, [r7, #28]
 80060da:	440a      	add	r2, r1
 80060dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80060e4:	6113      	str	r3, [r2, #16]
 80060e6:	e037      	b.n	8006158 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	691a      	ldr	r2, [r3, #16]
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	4413      	add	r3, r2
 80060f2:	1e5a      	subs	r2, r3, #1
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060fc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	8afa      	ldrh	r2, [r7, #22]
 8006104:	fb03 f202 	mul.w	r2, r3, r2
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	4413      	add	r3, r2
 8006114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006118:	691a      	ldr	r2, [r3, #16]
 800611a:	8afb      	ldrh	r3, [r7, #22]
 800611c:	04d9      	lsls	r1, r3, #19
 800611e:	4b38      	ldr	r3, [pc, #224]	@ (8006200 <USB_EPStartXfer+0x538>)
 8006120:	400b      	ands	r3, r1
 8006122:	69b9      	ldr	r1, [r7, #24]
 8006124:	0148      	lsls	r0, r1, #5
 8006126:	69f9      	ldr	r1, [r7, #28]
 8006128:	4401      	add	r1, r0
 800612a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800612e:	4313      	orrs	r3, r2
 8006130:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	4413      	add	r3, r2
 800613a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800613e:	691a      	ldr	r2, [r3, #16]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006148:	69b9      	ldr	r1, [r7, #24]
 800614a:	0148      	lsls	r0, r1, #5
 800614c:	69f9      	ldr	r1, [r7, #28]
 800614e:	4401      	add	r1, r0
 8006150:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006154:	4313      	orrs	r3, r2
 8006156:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006158:	79fb      	ldrb	r3, [r7, #7]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d10d      	bne.n	800617a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d009      	beq.n	800617a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	68d9      	ldr	r1, [r3, #12]
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	4413      	add	r3, r2
 8006172:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006176:	460a      	mov	r2, r1
 8006178:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	791b      	ldrb	r3, [r3, #4]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d128      	bne.n	80061d4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800618e:	2b00      	cmp	r3, #0
 8006190:	d110      	bne.n	80061b4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	4413      	add	r3, r2
 800619a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	69ba      	ldr	r2, [r7, #24]
 80061a2:	0151      	lsls	r1, r2, #5
 80061a4:	69fa      	ldr	r2, [r7, #28]
 80061a6:	440a      	add	r2, r1
 80061a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80061b0:	6013      	str	r3, [r2, #0]
 80061b2:	e00f      	b.n	80061d4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	0151      	lsls	r1, r2, #5
 80061c6:	69fa      	ldr	r2, [r7, #28]
 80061c8:	440a      	add	r2, r1
 80061ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061d2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	69ba      	ldr	r2, [r7, #24]
 80061e4:	0151      	lsls	r1, r2, #5
 80061e6:	69fa      	ldr	r2, [r7, #28]
 80061e8:	440a      	add	r2, r1
 80061ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061ee:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80061f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3720      	adds	r7, #32
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	1ff80000 	.word	0x1ff80000

08006204 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006204:	b480      	push	{r7}
 8006206:	b087      	sub	sp, #28
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800620e:	2300      	movs	r3, #0
 8006210:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	785b      	ldrb	r3, [r3, #1]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d14a      	bne.n	80062b8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	4413      	add	r3, r2
 800622c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006236:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800623a:	f040 8086 	bne.w	800634a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	4413      	add	r3, r2
 8006248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	7812      	ldrb	r2, [r2, #0]
 8006252:	0151      	lsls	r1, r2, #5
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	440a      	add	r2, r1
 8006258:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800625c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006260:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	4413      	add	r3, r2
 800626c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	683a      	ldr	r2, [r7, #0]
 8006274:	7812      	ldrb	r2, [r2, #0]
 8006276:	0151      	lsls	r1, r2, #5
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	440a      	add	r2, r1
 800627c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006280:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006284:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	3301      	adds	r3, #1
 800628a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006292:	4293      	cmp	r3, r2
 8006294:	d902      	bls.n	800629c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	75fb      	strb	r3, [r7, #23]
          break;
 800629a:	e056      	b.n	800634a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062b4:	d0e7      	beq.n	8006286 <USB_EPStopXfer+0x82>
 80062b6:	e048      	b.n	800634a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062d0:	d13b      	bne.n	800634a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	7812      	ldrb	r2, [r2, #0]
 80062e6:	0151      	lsls	r1, r2, #5
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	440a      	add	r2, r1
 80062ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062f0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80062f4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	015a      	lsls	r2, r3, #5
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	4413      	add	r3, r2
 8006300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	7812      	ldrb	r2, [r2, #0]
 800630a:	0151      	lsls	r1, r2, #5
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	440a      	add	r2, r1
 8006310:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006314:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006318:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	3301      	adds	r3, #1
 800631e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006326:	4293      	cmp	r3, r2
 8006328:	d902      	bls.n	8006330 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	75fb      	strb	r3, [r7, #23]
          break;
 800632e:	e00c      	b.n	800634a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	4413      	add	r3, r2
 800633a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006344:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006348:	d0e7      	beq.n	800631a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800634a:	7dfb      	ldrb	r3, [r7, #23]
}
 800634c:	4618      	mov	r0, r3
 800634e:	371c      	adds	r7, #28
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006358:	b480      	push	{r7}
 800635a:	b089      	sub	sp, #36	@ 0x24
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	4611      	mov	r1, r2
 8006364:	461a      	mov	r2, r3
 8006366:	460b      	mov	r3, r1
 8006368:	71fb      	strb	r3, [r7, #7]
 800636a:	4613      	mov	r3, r2
 800636c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006376:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800637a:	2b00      	cmp	r3, #0
 800637c:	d123      	bne.n	80063c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800637e:	88bb      	ldrh	r3, [r7, #4]
 8006380:	3303      	adds	r3, #3
 8006382:	089b      	lsrs	r3, r3, #2
 8006384:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006386:	2300      	movs	r3, #0
 8006388:	61bb      	str	r3, [r7, #24]
 800638a:	e018      	b.n	80063be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800638c:	79fb      	ldrb	r3, [r7, #7]
 800638e:	031a      	lsls	r2, r3, #12
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	4413      	add	r3, r2
 8006394:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006398:	461a      	mov	r2, r3
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	6013      	str	r3, [r2, #0]
      pSrc++;
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	3301      	adds	r3, #1
 80063a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	3301      	adds	r3, #1
 80063aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	3301      	adds	r3, #1
 80063b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	3301      	adds	r3, #1
 80063b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	3301      	adds	r3, #1
 80063bc:	61bb      	str	r3, [r7, #24]
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d3e2      	bcc.n	800638c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3724      	adds	r7, #36	@ 0x24
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b08b      	sub	sp, #44	@ 0x2c
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	4613      	mov	r3, r2
 80063e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80063ea:	88fb      	ldrh	r3, [r7, #6]
 80063ec:	089b      	lsrs	r3, r3, #2
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80063f2:	88fb      	ldrh	r3, [r7, #6]
 80063f4:	f003 0303 	and.w	r3, r3, #3
 80063f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80063fa:	2300      	movs	r3, #0
 80063fc:	623b      	str	r3, [r7, #32]
 80063fe:	e014      	b.n	800642a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640a:	601a      	str	r2, [r3, #0]
    pDest++;
 800640c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640e:	3301      	adds	r3, #1
 8006410:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006414:	3301      	adds	r3, #1
 8006416:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641a:	3301      	adds	r3, #1
 800641c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800641e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006420:	3301      	adds	r3, #1
 8006422:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	3301      	adds	r3, #1
 8006428:	623b      	str	r3, [r7, #32]
 800642a:	6a3a      	ldr	r2, [r7, #32]
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	429a      	cmp	r2, r3
 8006430:	d3e6      	bcc.n	8006400 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006432:	8bfb      	ldrh	r3, [r7, #30]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d01e      	beq.n	8006476 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006438:	2300      	movs	r3, #0
 800643a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006442:	461a      	mov	r2, r3
 8006444:	f107 0310 	add.w	r3, r7, #16
 8006448:	6812      	ldr	r2, [r2, #0]
 800644a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	b2db      	uxtb	r3, r3
 8006452:	00db      	lsls	r3, r3, #3
 8006454:	fa22 f303 	lsr.w	r3, r2, r3
 8006458:	b2da      	uxtb	r2, r3
 800645a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645c:	701a      	strb	r2, [r3, #0]
      i++;
 800645e:	6a3b      	ldr	r3, [r7, #32]
 8006460:	3301      	adds	r3, #1
 8006462:	623b      	str	r3, [r7, #32]
      pDest++;
 8006464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006466:	3301      	adds	r3, #1
 8006468:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800646a:	8bfb      	ldrh	r3, [r7, #30]
 800646c:	3b01      	subs	r3, #1
 800646e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006470:	8bfb      	ldrh	r3, [r7, #30]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1ea      	bne.n	800644c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006478:	4618      	mov	r0, r3
 800647a:	372c      	adds	r7, #44	@ 0x2c
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	785b      	ldrb	r3, [r3, #1]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d12c      	bne.n	80064fa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	db12      	blt.n	80064d8 <USB_EPSetStall+0x54>
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00f      	beq.n	80064d8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	015a      	lsls	r2, r3, #5
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	4413      	add	r3, r2
 80064c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	0151      	lsls	r1, r2, #5
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	440a      	add	r2, r1
 80064ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80064d6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	0151      	lsls	r1, r2, #5
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	440a      	add	r2, r1
 80064ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80064f6:	6013      	str	r3, [r2, #0]
 80064f8:	e02b      	b.n	8006552 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	015a      	lsls	r2, r3, #5
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4413      	add	r3, r2
 8006502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	db12      	blt.n	8006532 <USB_EPSetStall+0xae>
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00f      	beq.n	8006532 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	4413      	add	r3, r2
 800651a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	0151      	lsls	r1, r2, #5
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	440a      	add	r2, r1
 8006528:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800652c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006530:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	015a      	lsls	r2, r3, #5
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	4413      	add	r3, r2
 800653a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	0151      	lsls	r1, r2, #5
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	440a      	add	r2, r1
 8006548:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800654c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006550:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3714      	adds	r7, #20
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	785b      	ldrb	r3, [r3, #1]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d128      	bne.n	80065ce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4413      	add	r3, r2
 8006584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	0151      	lsls	r1, r2, #5
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	440a      	add	r2, r1
 8006592:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006596:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800659a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	791b      	ldrb	r3, [r3, #4]
 80065a0:	2b03      	cmp	r3, #3
 80065a2:	d003      	beq.n	80065ac <USB_EPClearStall+0x4c>
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	791b      	ldrb	r3, [r3, #4]
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d138      	bne.n	800661e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	0151      	lsls	r1, r2, #5
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	440a      	add	r2, r1
 80065c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065ca:	6013      	str	r3, [r2, #0]
 80065cc:	e027      	b.n	800661e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	0151      	lsls	r1, r2, #5
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	440a      	add	r2, r1
 80065e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065e8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80065ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	791b      	ldrb	r3, [r3, #4]
 80065f2:	2b03      	cmp	r3, #3
 80065f4:	d003      	beq.n	80065fe <USB_EPClearStall+0x9e>
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	791b      	ldrb	r3, [r3, #4]
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d10f      	bne.n	800661e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	015a      	lsls	r2, r3, #5
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	4413      	add	r3, r2
 8006606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	0151      	lsls	r1, r2, #5
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	440a      	add	r2, r1
 8006614:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800661c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3714      	adds	r7, #20
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	460b      	mov	r3, r1
 8006636:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800664a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800664e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	78fb      	ldrb	r3, [r7, #3]
 800665a:	011b      	lsls	r3, r3, #4
 800665c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006660:	68f9      	ldr	r1, [r7, #12]
 8006662:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006666:	4313      	orrs	r3, r2
 8006668:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006692:	f023 0303 	bic.w	r3, r3, #3
 8006696:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066a6:	f023 0302 	bic.w	r3, r3, #2
 80066aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3714      	adds	r7, #20
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b085      	sub	sp, #20
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80066d4:	f023 0303 	bic.w	r3, r3, #3
 80066d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066e8:	f043 0302 	orr.w	r3, r3, #2
 80066ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	4013      	ands	r3, r2
 8006712:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006714:	68fb      	ldr	r3, [r7, #12]
}
 8006716:	4618      	mov	r0, r3
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006722:	b480      	push	{r7}
 8006724:	b085      	sub	sp, #20
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	4013      	ands	r3, r2
 8006744:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	0c1b      	lsrs	r3, r3, #16
}
 800674a:	4618      	mov	r0, r3
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006756:	b480      	push	{r7}
 8006758:	b085      	sub	sp, #20
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	4013      	ands	r3, r2
 8006778:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	b29b      	uxth	r3, r3
}
 800677e:	4618      	mov	r0, r3
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800678a:	b480      	push	{r7}
 800678c:	b085      	sub	sp, #20
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
 8006792:	460b      	mov	r3, r1
 8006794:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800679a:	78fb      	ldrb	r3, [r7, #3]
 800679c:	015a      	lsls	r2, r3, #5
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4413      	add	r3, r2
 80067a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	4013      	ands	r3, r2
 80067b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80067b8:	68bb      	ldr	r3, [r7, #8]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b087      	sub	sp, #28
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
 80067ce:	460b      	mov	r3, r1
 80067d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067e8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80067ea:	78fb      	ldrb	r3, [r7, #3]
 80067ec:	f003 030f 	and.w	r3, r3, #15
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	fa22 f303 	lsr.w	r3, r2, r3
 80067f6:	01db      	lsls	r3, r3, #7
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006800:	78fb      	ldrb	r3, [r7, #3]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	4413      	add	r3, r2
 8006808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	4013      	ands	r3, r2
 8006812:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006814:	68bb      	ldr	r3, [r7, #8]
}
 8006816:	4618      	mov	r0, r3
 8006818:	371c      	adds	r7, #28
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006822:	b480      	push	{r7}
 8006824:	b083      	sub	sp, #12
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	f003 0301 	and.w	r3, r3, #1
}
 8006832:	4618      	mov	r0, r3
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800683e:	b480      	push	{r7}
 8006840:	b085      	sub	sp, #20
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006858:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800685c:	f023 0307 	bic.w	r3, r3, #7
 8006860:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006874:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006884:	b480      	push	{r7}
 8006886:	b087      	sub	sp, #28
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	460b      	mov	r3, r1
 800688e:	607a      	str	r2, [r7, #4]
 8006890:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	333c      	adds	r3, #60	@ 0x3c
 800689a:	3304      	adds	r3, #4
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	4a26      	ldr	r2, [pc, #152]	@ (800693c <USB_EP0_OutStart+0xb8>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d90a      	bls.n	80068be <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068b8:	d101      	bne.n	80068be <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	e037      	b.n	800692e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068c4:	461a      	mov	r2, r3
 80068c6:	2300      	movs	r3, #0
 80068c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80068dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068ec:	f043 0318 	orr.w	r3, r3, #24
 80068f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006900:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006904:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006906:	7afb      	ldrb	r3, [r7, #11]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d10f      	bne.n	800692c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006912:	461a      	mov	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006926:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800692a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	371c      	adds	r7, #28
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	4f54300a 	.word	0x4f54300a

08006940 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006948:	2300      	movs	r3, #0
 800694a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	3301      	adds	r3, #1
 8006950:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006958:	d901      	bls.n	800695e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e022      	b.n	80069a4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	2b00      	cmp	r3, #0
 8006964:	daf2      	bge.n	800694c <USB_CoreReset+0xc>

  count = 10U;
 8006966:	230a      	movs	r3, #10
 8006968:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800696a:	e002      	b.n	8006972 <USB_CoreReset+0x32>
  {
    count--;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	3b01      	subs	r3, #1
 8006970:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1f9      	bne.n	800696c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	f043 0201 	orr.w	r2, r3, #1
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	3301      	adds	r3, #1
 8006988:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006990:	d901      	bls.n	8006996 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e006      	b.n	80069a4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d0f0      	beq.n	8006984 <USB_CoreReset+0x44>

  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3714      	adds	r7, #20
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	460b      	mov	r3, r1
 80069ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80069bc:	2054      	movs	r0, #84	@ 0x54
 80069be:	f002 fc0b 	bl	80091d8 <USBD_static_malloc>
 80069c2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d109      	bne.n	80069de <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	32b0      	adds	r2, #176	@ 0xb0
 80069d4:	2100      	movs	r1, #0
 80069d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80069da:	2302      	movs	r3, #2
 80069dc:	e08b      	b.n	8006af6 <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	32b0      	adds	r2, #176	@ 0xb0
 80069e8:	68f9      	ldr	r1, [r7, #12]
 80069ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	32b0      	adds	r2, #176	@ 0xb0
 80069f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	7c1b      	ldrb	r3, [r3, #16]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d11b      	bne.n	8006a42 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006a0a:	4b3d      	ldr	r3, [pc, #244]	@ (8006b00 <USBD_CUSTOM_HID_Init+0x150>)
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	f003 020f 	and.w	r2, r3, #15
 8006a12:	6879      	ldr	r1, [r7, #4]
 8006a14:	4613      	mov	r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4413      	add	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	440b      	add	r3, r1
 8006a1e:	331c      	adds	r3, #28
 8006a20:	2205      	movs	r2, #5
 8006a22:	601a      	str	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006a24:	4b37      	ldr	r3, [pc, #220]	@ (8006b04 <USBD_CUSTOM_HID_Init+0x154>)
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	f003 020f 	and.w	r2, r3, #15
 8006a2c:	6879      	ldr	r1, [r7, #4]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	440b      	add	r3, r1
 8006a38:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8006a3c:	2205      	movs	r2, #5
 8006a3e:	601a      	str	r2, [r3, #0]
 8006a40:	e01a      	b.n	8006a78 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006a42:	4b2f      	ldr	r3, [pc, #188]	@ (8006b00 <USBD_CUSTOM_HID_Init+0x150>)
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	f003 020f 	and.w	r2, r3, #15
 8006a4a:	6879      	ldr	r1, [r7, #4]
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4413      	add	r3, r2
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	440b      	add	r3, r1
 8006a56:	331c      	adds	r3, #28
 8006a58:	2205      	movs	r2, #5
 8006a5a:	601a      	str	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006a5c:	4b29      	ldr	r3, [pc, #164]	@ (8006b04 <USBD_CUSTOM_HID_Init+0x154>)
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	f003 020f 	and.w	r2, r3, #15
 8006a64:	6879      	ldr	r1, [r7, #4]
 8006a66:	4613      	mov	r3, r2
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4413      	add	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	440b      	add	r3, r1
 8006a70:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8006a74:	2205      	movs	r2, #5
 8006a76:	601a      	str	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8006a78:	4b21      	ldr	r3, [pc, #132]	@ (8006b00 <USBD_CUSTOM_HID_Init+0x150>)
 8006a7a:	7819      	ldrb	r1, [r3, #0]
 8006a7c:	2340      	movs	r3, #64	@ 0x40
 8006a7e:	2203      	movs	r2, #3
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f002 fa98 	bl	8008fb6 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8006a86:	4b1e      	ldr	r3, [pc, #120]	@ (8006b00 <USBD_CUSTOM_HID_Init+0x150>)
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	f003 020f 	and.w	r2, r3, #15
 8006a8e:	6879      	ldr	r1, [r7, #4]
 8006a90:	4613      	mov	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	4413      	add	r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	440b      	add	r3, r1
 8006a9a:	3323      	adds	r3, #35	@ 0x23
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	701a      	strb	r2, [r3, #0]
  {
    return (uint8_t)USBD_FAIL;
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8006aa0:	4b18      	ldr	r3, [pc, #96]	@ (8006b04 <USBD_CUSTOM_HID_Init+0x154>)
 8006aa2:	7819      	ldrb	r1, [r3, #0]
 8006aa4:	2340      	movs	r3, #64	@ 0x40
 8006aa6:	2203      	movs	r2, #3
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f002 fa84 	bl	8008fb6 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8006aae:	4b15      	ldr	r3, [pc, #84]	@ (8006b04 <USBD_CUSTOM_HID_Init+0x154>)
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	f003 020f 	and.w	r2, r3, #15
 8006ab6:	6879      	ldr	r1, [r7, #4]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4413      	add	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	440b      	add	r3, r1
 8006ac2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	701a      	strb	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	33b0      	adds	r3, #176	@ 0xb0
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4413      	add	r3, r2
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8006ae6:	4b07      	ldr	r3, [pc, #28]	@ (8006b04 <USBD_CUSTOM_HID_Init+0x154>)
 8006ae8:	7819      	ldrb	r1, [r3, #0]
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	2340      	movs	r3, #64	@ 0x40
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f002 fb50 	bl	8009194 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	20000086 	.word	0x20000086
 8006b04:	20000087 	.word	0x20000087

08006b08 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	460b      	mov	r3, r1
 8006b12:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8006b14:	4b37      	ldr	r3, [pc, #220]	@ (8006bf4 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	4619      	mov	r1, r3
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f002 fa71 	bl	8009002 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8006b20:	4b34      	ldr	r3, [pc, #208]	@ (8006bf4 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	f003 020f 	and.w	r2, r3, #15
 8006b28:	6879      	ldr	r1, [r7, #4]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	4413      	add	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	440b      	add	r3, r1
 8006b34:	3323      	adds	r3, #35	@ 0x23
 8006b36:	2200      	movs	r2, #0
 8006b38:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8006b3a:	4b2e      	ldr	r3, [pc, #184]	@ (8006bf4 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	f003 020f 	and.w	r2, r3, #15
 8006b42:	6879      	ldr	r1, [r7, #4]
 8006b44:	4613      	mov	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	440b      	add	r3, r1
 8006b4e:	331c      	adds	r3, #28
 8006b50:	2200      	movs	r2, #0
 8006b52:	601a      	str	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8006b54:	4b28      	ldr	r3, [pc, #160]	@ (8006bf8 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	4619      	mov	r1, r3
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f002 fa51 	bl	8009002 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8006b60:	4b25      	ldr	r3, [pc, #148]	@ (8006bf8 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	f003 020f 	and.w	r2, r3, #15
 8006b68:	6879      	ldr	r1, [r7, #4]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4413      	add	r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	440b      	add	r3, r1
 8006b74:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006b78:	2200      	movs	r2, #0
 8006b7a:	701a      	strb	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8006b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8006bf8 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	f003 020f 	and.w	r2, r3, #15
 8006b84:	6879      	ldr	r1, [r7, #4]
 8006b86:	4613      	mov	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	440b      	add	r3, r1
 8006b90:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8006b94:	2200      	movs	r2, #0
 8006b96:	601a      	str	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	32b0      	adds	r2, #176	@ 0xb0
 8006ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d01f      	beq.n	8006bea <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	33b0      	adds	r3, #176	@ 0xb0
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	32b0      	adds	r2, #176	@ 0xb0
 8006bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f002 fb11 	bl	80091f4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	32b0      	adds	r2, #176	@ 0xb0
 8006bdc:	2100      	movs	r1, #0
 8006bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3708      	adds	r7, #8
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	20000086 	.word	0x20000086
 8006bf8:	20000087 	.word	0x20000087

08006bfc <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b088      	sub	sp, #32
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	32b0      	adds	r2, #176	@ 0xb0
 8006c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c14:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d101      	bne.n	8006c30 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e108      	b.n	8006e42 <USBD_CUSTOM_HID_Setup+0x246>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d05c      	beq.n	8006cf6 <USBD_CUSTOM_HID_Setup+0xfa>
 8006c3c:	2b20      	cmp	r3, #32
 8006c3e:	f040 80f8 	bne.w	8006e32 <USBD_CUSTOM_HID_Setup+0x236>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	785b      	ldrb	r3, [r3, #1]
 8006c46:	3b02      	subs	r3, #2
 8006c48:	2b09      	cmp	r3, #9
 8006c4a:	d84c      	bhi.n	8006ce6 <USBD_CUSTOM_HID_Setup+0xea>
 8006c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c54 <USBD_CUSTOM_HID_Setup+0x58>)
 8006c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c52:	bf00      	nop
 8006c54:	08006cad 	.word	0x08006cad
 8006c58:	08006c8b 	.word	0x08006c8b
 8006c5c:	08006ce7 	.word	0x08006ce7
 8006c60:	08006ce7 	.word	0x08006ce7
 8006c64:	08006ce7 	.word	0x08006ce7
 8006c68:	08006ce7 	.word	0x08006ce7
 8006c6c:	08006ce7 	.word	0x08006ce7
 8006c70:	08006cbd 	.word	0x08006cbd
 8006c74:	08006c9b 	.word	0x08006c9b
 8006c78:	08006c7d 	.word	0x08006c7d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	885b      	ldrh	r3, [r3, #2]
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	461a      	mov	r2, r3
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 8006c88:	e034      	b.n	8006cf4 <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	3340      	adds	r3, #64	@ 0x40
 8006c8e:	2201      	movs	r2, #1
 8006c90:	4619      	mov	r1, r3
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f001 fcfe 	bl	8008694 <USBD_CtlSendData>
          break;
 8006c98:	e02c      	b.n	8006cf4 <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	885b      	ldrh	r3, [r3, #2]
 8006c9e:	0a1b      	lsrs	r3, r3, #8
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	645a      	str	r2, [r3, #68]	@ 0x44
          break;
 8006caa:	e023      	b.n	8006cf4 <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	3344      	adds	r3, #68	@ 0x44
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f001 fced 	bl	8008694 <USBD_CtlSendData>
          break;
 8006cba:	e01b      	b.n	8006cf4 <USBD_CUSTOM_HID_Setup+0xf8>
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED

          if (req->wLength > USBD_CUSTOMHID_OUTREPORT_BUF_SIZE)
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	88db      	ldrh	r3, [r3, #6]
 8006cc0:	2b40      	cmp	r3, #64	@ 0x40
 8006cc2:	d905      	bls.n	8006cd0 <USBD_CUSTOM_HID_Setup+0xd4>
          {
            /* Stall EP0 */
            USBD_CtlError(pdev, req);
 8006cc4:	6839      	ldr	r1, [r7, #0]
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f001 fc67 	bl	800859a <USBD_CtlError>
            return USBD_FAIL;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e0b8      	b.n	8006e42 <USBD_CUSTOM_HID_Setup+0x246>
          }

          hhid->IsReportAvailable = 1U;
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	64da      	str	r2, [r3, #76]	@ 0x4c

          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8006cd6:	6939      	ldr	r1, [r7, #16]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	88db      	ldrh	r3, [r3, #6]
 8006cdc:	461a      	mov	r2, r3
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f001 fd07 	bl	80086f2 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8006ce4:	e006      	b.n	8006cf4 <USBD_CUSTOM_HID_Setup+0xf8>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8006ce6:	6839      	ldr	r1, [r7, #0]
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f001 fc56 	bl	800859a <USBD_CtlError>
          ret = USBD_FAIL;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	75fb      	strb	r3, [r7, #23]
          break;
 8006cf2:	bf00      	nop
      }
      break;
 8006cf4:	e0a4      	b.n	8006e40 <USBD_CUSTOM_HID_Setup+0x244>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	785b      	ldrb	r3, [r3, #1]
 8006cfa:	2b0b      	cmp	r3, #11
 8006cfc:	f200 8090 	bhi.w	8006e20 <USBD_CUSTOM_HID_Setup+0x224>
 8006d00:	a201      	add	r2, pc, #4	@ (adr r2, 8006d08 <USBD_CUSTOM_HID_Setup+0x10c>)
 8006d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d06:	bf00      	nop
 8006d08:	08006d39 	.word	0x08006d39
 8006d0c:	08006e2f 	.word	0x08006e2f
 8006d10:	08006e21 	.word	0x08006e21
 8006d14:	08006e21 	.word	0x08006e21
 8006d18:	08006e21 	.word	0x08006e21
 8006d1c:	08006e21 	.word	0x08006e21
 8006d20:	08006d63 	.word	0x08006d63
 8006d24:	08006e21 	.word	0x08006e21
 8006d28:	08006e21 	.word	0x08006e21
 8006d2c:	08006e21 	.word	0x08006e21
 8006d30:	08006dcf 	.word	0x08006dcf
 8006d34:	08006df9 	.word	0x08006df9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b03      	cmp	r3, #3
 8006d42:	d107      	bne.n	8006d54 <USBD_CUSTOM_HID_Setup+0x158>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006d44:	f107 030e 	add.w	r3, r7, #14
 8006d48:	2202      	movs	r2, #2
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f001 fca1 	bl	8008694 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d52:	e06d      	b.n	8006e30 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
 8006d54:	6839      	ldr	r1, [r7, #0]
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f001 fc1f 	bl	800859a <USBD_CtlError>
            ret = USBD_FAIL;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	75fb      	strb	r3, [r7, #23]
          break;
 8006d60:	e066      	b.n	8006e30 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	885b      	ldrh	r3, [r3, #2]
 8006d66:	0a1b      	lsrs	r3, r3, #8
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	2b22      	cmp	r3, #34	@ 0x22
 8006d6c:	d110      	bne.n	8006d90 <USBD_CUSTOM_HID_Setup+0x194>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	88db      	ldrh	r3, [r3, #6]
 8006d72:	2b36      	cmp	r3, #54	@ 0x36
 8006d74:	bf28      	it	cs
 8006d76:	2336      	movcs	r3, #54	@ 0x36
 8006d78:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	33b0      	adds	r3, #176	@ 0xb0
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	61bb      	str	r3, [r7, #24]
 8006d8e:	e00d      	b.n	8006dac <USBD_CUSTOM_HID_Setup+0x1b0>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	885b      	ldrh	r3, [r3, #2]
 8006d94:	0a1b      	lsrs	r3, r3, #8
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	2b21      	cmp	r3, #33	@ 0x21
 8006d9a:	d107      	bne.n	8006dac <USBD_CUSTOM_HID_Setup+0x1b0>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8006d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8006e4c <USBD_CUSTOM_HID_Setup+0x250>)
 8006d9e:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	88db      	ldrh	r3, [r3, #6]
 8006da4:	2b09      	cmp	r3, #9
 8006da6:	bf28      	it	cs
 8006da8:	2309      	movcs	r3, #9
 8006daa:	83fb      	strh	r3, [r7, #30]
            }
          }

          if (pbuf != NULL)
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d006      	beq.n	8006dc0 <USBD_CUSTOM_HID_Setup+0x1c4>
          {
            (void)USBD_CtlSendData(pdev, pbuf, len);
 8006db2:	8bfb      	ldrh	r3, [r7, #30]
 8006db4:	461a      	mov	r2, r3
 8006db6:	69b9      	ldr	r1, [r7, #24]
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f001 fc6b 	bl	8008694 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006dbe:	e037      	b.n	8006e30 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
 8006dc0:	6839      	ldr	r1, [r7, #0]
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f001 fbe9 	bl	800859a <USBD_CtlError>
            ret = USBD_FAIL;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	75fb      	strb	r3, [r7, #23]
          break;
 8006dcc:	e030      	b.n	8006e30 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b03      	cmp	r3, #3
 8006dd8:	d107      	bne.n	8006dea <USBD_CUSTOM_HID_Setup+0x1ee>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	3348      	adds	r3, #72	@ 0x48
 8006dde:	2201      	movs	r2, #1
 8006de0:	4619      	mov	r1, r3
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f001 fc56 	bl	8008694 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006de8:	e022      	b.n	8006e30 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
 8006dea:	6839      	ldr	r1, [r7, #0]
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f001 fbd4 	bl	800859a <USBD_CtlError>
            ret = USBD_FAIL;
 8006df2:	2303      	movs	r3, #3
 8006df4:	75fb      	strb	r3, [r7, #23]
          break;
 8006df6:	e01b      	b.n	8006e30 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b03      	cmp	r3, #3
 8006e02:	d106      	bne.n	8006e12 <USBD_CUSTOM_HID_Setup+0x216>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	885b      	ldrh	r3, [r3, #2]
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	649a      	str	r2, [r3, #72]	@ 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e10:	e00e      	b.n	8006e30 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
 8006e12:	6839      	ldr	r1, [r7, #0]
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f001 fbc0 	bl	800859a <USBD_CtlError>
            ret = USBD_FAIL;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	75fb      	strb	r3, [r7, #23]
          break;
 8006e1e:	e007      	b.n	8006e30 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006e20:	6839      	ldr	r1, [r7, #0]
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f001 fbb9 	bl	800859a <USBD_CtlError>
          ret = USBD_FAIL;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	75fb      	strb	r3, [r7, #23]
          break;
 8006e2c:	e000      	b.n	8006e30 <USBD_CUSTOM_HID_Setup+0x234>
          break;
 8006e2e:	bf00      	nop
      }
      break;
 8006e30:	e006      	b.n	8006e40 <USBD_CUSTOM_HID_Setup+0x244>

    default:
      USBD_CtlError(pdev, req);
 8006e32:	6839      	ldr	r1, [r7, #0]
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f001 fbb0 	bl	800859a <USBD_CtlError>
      ret = USBD_FAIL;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e3e:	bf00      	nop
  }
  return (uint8_t)ret;
 8006e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3720      	adds	r7, #32
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	20000070 	.word	0x20000070

08006e50 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	32b0      	adds	r2, #176	@ 0xb0
 8006e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e6c:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d101      	bne.n	8006e78 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e019      	b.n	8006eac <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	2b03      	cmp	r3, #3
 8006e82:	d112      	bne.n	8006eaa <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10b      	bne.n	8006ea6 <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8006e96:	4b07      	ldr	r3, [pc, #28]	@ (8006eb4 <USBD_CUSTOM_HID_SendReport+0x64>)
 8006e98:	7819      	ldrb	r1, [r3, #0]
 8006e9a:	88fb      	ldrh	r3, [r7, #6]
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f002 f957 	bl	8009152 <USBD_LL_Transmit>
 8006ea4:	e001      	b.n	8006eaa <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e000      	b.n	8006eac <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3718      	adds	r7, #24
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	20000086 	.word	0x20000086

08006eb8 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006ec0:	2181      	movs	r1, #129	@ 0x81
 8006ec2:	4815      	ldr	r0, [pc, #84]	@ (8006f18 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006ec4:	f000 fd30 	bl	8007928 <USBD_GetEpDesc>
 8006ec8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006eca:	2101      	movs	r1, #1
 8006ecc:	4812      	ldr	r0, [pc, #72]	@ (8006f18 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006ece:	f000 fd2b 	bl	8007928 <USBD_GetEpDesc>
 8006ed2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d009      	beq.n	8006eee <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ee2:	711a      	strb	r2, [r3, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2205      	movs	r2, #5
 8006eec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d009      	beq.n	8006f08 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006efc:	711a      	strb	r2, [r3, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	2205      	movs	r2, #5
 8006f06:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2229      	movs	r2, #41	@ 0x29
 8006f0c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006f0e:	4b02      	ldr	r3, [pc, #8]	@ (8006f18 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	20000044 	.word	0x20000044

08006f1c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006f24:	2181      	movs	r1, #129	@ 0x81
 8006f26:	4815      	ldr	r0, [pc, #84]	@ (8006f7c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006f28:	f000 fcfe 	bl	8007928 <USBD_GetEpDesc>
 8006f2c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006f2e:	2101      	movs	r1, #1
 8006f30:	4812      	ldr	r0, [pc, #72]	@ (8006f7c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006f32:	f000 fcf9 	bl	8007928 <USBD_GetEpDesc>
 8006f36:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d009      	beq.n	8006f52 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f46:	711a      	strb	r2, [r3, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2205      	movs	r2, #5
 8006f50:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d009      	beq.n	8006f6c <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f60:	711a      	strb	r2, [r3, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	2205      	movs	r2, #5
 8006f6a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2229      	movs	r2, #41	@ 0x29
 8006f70:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006f72:	4b02      	ldr	r3, [pc, #8]	@ (8006f7c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	20000044 	.word	0x20000044

08006f80 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006f88:	2181      	movs	r1, #129	@ 0x81
 8006f8a:	4815      	ldr	r0, [pc, #84]	@ (8006fe0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006f8c:	f000 fccc 	bl	8007928 <USBD_GetEpDesc>
 8006f90:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006f92:	2101      	movs	r1, #1
 8006f94:	4812      	ldr	r0, [pc, #72]	@ (8006fe0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006f96:	f000 fcc7 	bl	8007928 <USBD_GetEpDesc>
 8006f9a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d009      	beq.n	8006fb6 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006faa:	711a      	strb	r2, [r3, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2205      	movs	r2, #5
 8006fb4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d009      	beq.n	8006fd0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fc4:	711a      	strb	r2, [r3, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	2205      	movs	r2, #5
 8006fce:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2229      	movs	r2, #41	@ 0x29
 8006fd4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006fd6:	4b02      	ldr	r3, [pc, #8]	@ (8006fe0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	20000044 	.word	0x20000044

08006fe4 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	460b      	mov	r3, r1
 8006fee:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	32b0      	adds	r2, #176	@ 0xb0
 8006ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return (uint8_t)USBD_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	370c      	adds	r7, #12
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b084      	sub	sp, #16
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
 800701a:	460b      	mov	r3, r1
 800701c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	32b0      	adds	r2, #176	@ 0xb0
 8007028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d101      	bne.n	8007034 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007030:	2303      	movs	r3, #3
 8007032:	e017      	b.n	8007064 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	32b0      	adds	r2, #176	@ 0xb0
 800703e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007042:	60fb      	str	r3, [r7, #12]
  NAKed till the end of the application processing */

#ifdef USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
#else
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	33b0      	adds	r3, #176	@ 0xb0
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	7810      	ldrb	r0, [r2, #0]
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	7852      	ldrb	r2, [r2, #1]
 800705e:	4611      	mov	r1, r2
 8007060:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);
#endif /* USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED */

  return (uint8_t)USBD_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	32b0      	adds	r2, #176	@ 0xb0
 800707e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d101      	bne.n	800708a <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007086:	2303      	movs	r3, #3
 8007088:	e00f      	b.n	80070aa <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	32b0      	adds	r2, #176	@ 0xb0
 8007094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007098:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800709a:	4b06      	ldr	r3, [pc, #24]	@ (80070b4 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 800709c:	7819      	ldrb	r1, [r3, #0]
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	2340      	movs	r3, #64	@ 0x40
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f002 f876 	bl	8009194 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	20000087 	.word	0x20000087

080070b8 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	32b0      	adds	r2, #176	@ 0xb0
 80070ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ce:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d101      	bne.n	80070da <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e016      	b.n	8007108 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d111      	bne.n	8007106 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
#ifdef USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
#else
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	33b0      	adds	r3, #176	@ 0xb0
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4413      	add	r3, r2
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	7810      	ldrb	r0, [r2, #0]
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	7852      	ldrb	r2, [r2, #1]
 80070fc:	4611      	mov	r1, r2
 80070fe:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
#endif /* USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED */
    hhid->IsReportAvailable = 0U;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return (uint8_t)USBD_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3710      	adds	r7, #16
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	220a      	movs	r2, #10
 800711c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800711e:	4b03      	ldr	r3, [pc, #12]	@ (800712c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007120:	4618      	mov	r0, r3
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr
 800712c:	2000007c 	.word	0x2000007c

08007130 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d101      	bne.n	8007144 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007140:	2303      	movs	r3, #3
 8007142:	e009      	b.n	8007158 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	33b0      	adds	r3, #176	@ 0xb0
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4413      	add	r3, r2
 8007152:	683a      	ldr	r2, [r7, #0]
 8007154:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b086      	sub	sp, #24
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	4613      	mov	r3, r2
 8007170:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d101      	bne.n	800717c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007178:	2303      	movs	r3, #3
 800717a:	e01f      	b.n	80071bc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d003      	beq.n	80071a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	68ba      	ldr	r2, [r7, #8]
 800719e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	79fa      	ldrb	r2, [r7, #7]
 80071ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	f001 fe99 	bl	8008ee8 <USBD_LL_Init>
 80071b6:	4603      	mov	r3, r0
 80071b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80071ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3718      	adds	r7, #24
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80071ce:	2300      	movs	r3, #0
 80071d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d101      	bne.n	80071dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80071d8:	2303      	movs	r3, #3
 80071da:	e025      	b.n	8007228 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	32ae      	adds	r2, #174	@ 0xae
 80071ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00f      	beq.n	8007218 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	32ae      	adds	r2, #174	@ 0xae
 8007202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007208:	f107 020e 	add.w	r2, r7, #14
 800720c:	4610      	mov	r0, r2
 800720e:	4798      	blx	r3
 8007210:	4602      	mov	r2, r0
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800721e:	1c5a      	adds	r2, r3, #1
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f001 fea1 	bl	8008f80 <USBD_LL_Start>
 800723e:	4603      	mov	r3, r0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007250:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007252:	4618      	mov	r0, r3
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b084      	sub	sp, #16
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
 8007266:	460b      	mov	r3, r1
 8007268:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800726a:	2300      	movs	r3, #0
 800726c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007274:	2b00      	cmp	r3, #0
 8007276:	d009      	beq.n	800728c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	78fa      	ldrb	r2, [r7, #3]
 8007282:	4611      	mov	r1, r2
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	4798      	blx	r3
 8007288:	4603      	mov	r3, r0
 800728a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800728c:	7bfb      	ldrb	r3, [r7, #15]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b084      	sub	sp, #16
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
 800729e:	460b      	mov	r3, r1
 80072a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80072a2:	2300      	movs	r3, #0
 80072a4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	78fa      	ldrb	r2, [r7, #3]
 80072b0:	4611      	mov	r1, r2
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	4798      	blx	r3
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80072bc:	2303      	movs	r3, #3
 80072be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80072c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b084      	sub	sp, #16
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
 80072d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80072da:	6839      	ldr	r1, [r7, #0]
 80072dc:	4618      	mov	r0, r3
 80072de:	f001 f922 	bl	8008526 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80072f0:	461a      	mov	r2, r3
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80072fe:	f003 031f 	and.w	r3, r3, #31
 8007302:	2b02      	cmp	r3, #2
 8007304:	d01a      	beq.n	800733c <USBD_LL_SetupStage+0x72>
 8007306:	2b02      	cmp	r3, #2
 8007308:	d822      	bhi.n	8007350 <USBD_LL_SetupStage+0x86>
 800730a:	2b00      	cmp	r3, #0
 800730c:	d002      	beq.n	8007314 <USBD_LL_SetupStage+0x4a>
 800730e:	2b01      	cmp	r3, #1
 8007310:	d00a      	beq.n	8007328 <USBD_LL_SetupStage+0x5e>
 8007312:	e01d      	b.n	8007350 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800731a:	4619      	mov	r1, r3
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 fb77 	bl	8007a10 <USBD_StdDevReq>
 8007322:	4603      	mov	r3, r0
 8007324:	73fb      	strb	r3, [r7, #15]
      break;
 8007326:	e020      	b.n	800736a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800732e:	4619      	mov	r1, r3
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fbdf 	bl	8007af4 <USBD_StdItfReq>
 8007336:	4603      	mov	r3, r0
 8007338:	73fb      	strb	r3, [r7, #15]
      break;
 800733a:	e016      	b.n	800736a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007342:	4619      	mov	r1, r3
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 fc41 	bl	8007bcc <USBD_StdEPReq>
 800734a:	4603      	mov	r3, r0
 800734c:	73fb      	strb	r3, [r7, #15]
      break;
 800734e:	e00c      	b.n	800736a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007356:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800735a:	b2db      	uxtb	r3, r3
 800735c:	4619      	mov	r1, r3
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f001 fe6e 	bl	8009040 <USBD_LL_StallEP>
 8007364:	4603      	mov	r3, r0
 8007366:	73fb      	strb	r3, [r7, #15]
      break;
 8007368:	bf00      	nop
  }

  return ret;
 800736a:	7bfb      	ldrb	r3, [r7, #15]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	460b      	mov	r3, r1
 800737e:	607a      	str	r2, [r7, #4]
 8007380:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007382:	2300      	movs	r3, #0
 8007384:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007386:	7afb      	ldrb	r3, [r7, #11]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d177      	bne.n	800747c <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007392:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800739a:	2b03      	cmp	r3, #3
 800739c:	f040 80a1 	bne.w	80074e2 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	8992      	ldrh	r2, [r2, #12]
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d91c      	bls.n	80073e6 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	8992      	ldrh	r2, [r2, #12]
 80073b4:	1a9a      	subs	r2, r3, r2
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	693a      	ldr	r2, [r7, #16]
 80073c0:	8992      	ldrh	r2, [r2, #12]
 80073c2:	441a      	add	r2, r3
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	6919      	ldr	r1, [r3, #16]
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	899b      	ldrh	r3, [r3, #12]
 80073d0:	461a      	mov	r2, r3
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	4293      	cmp	r3, r2
 80073d8:	bf38      	it	cc
 80073da:	4613      	movcc	r3, r2
 80073dc:	461a      	mov	r2, r3
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f001 f9a8 	bl	8008734 <USBD_CtlContinueRx>
 80073e4:	e07d      	b.n	80074e2 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80073ec:	f003 031f 	and.w	r3, r3, #31
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d014      	beq.n	800741e <USBD_LL_DataOutStage+0xaa>
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d81d      	bhi.n	8007434 <USBD_LL_DataOutStage+0xc0>
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d002      	beq.n	8007402 <USBD_LL_DataOutStage+0x8e>
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d003      	beq.n	8007408 <USBD_LL_DataOutStage+0x94>
 8007400:	e018      	b.n	8007434 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007402:	2300      	movs	r3, #0
 8007404:	75bb      	strb	r3, [r7, #22]
            break;
 8007406:	e018      	b.n	800743a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800740e:	b2db      	uxtb	r3, r3
 8007410:	4619      	mov	r1, r3
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	f000 fa6e 	bl	80078f4 <USBD_CoreFindIF>
 8007418:	4603      	mov	r3, r0
 800741a:	75bb      	strb	r3, [r7, #22]
            break;
 800741c:	e00d      	b.n	800743a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007424:	b2db      	uxtb	r3, r3
 8007426:	4619      	mov	r1, r3
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f000 fa70 	bl	800790e <USBD_CoreFindEP>
 800742e:	4603      	mov	r3, r0
 8007430:	75bb      	strb	r3, [r7, #22]
            break;
 8007432:	e002      	b.n	800743a <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007434:	2300      	movs	r3, #0
 8007436:	75bb      	strb	r3, [r7, #22]
            break;
 8007438:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800743a:	7dbb      	ldrb	r3, [r7, #22]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d119      	bne.n	8007474 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007446:	b2db      	uxtb	r3, r3
 8007448:	2b03      	cmp	r3, #3
 800744a:	d113      	bne.n	8007474 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800744c:	7dba      	ldrb	r2, [r7, #22]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	32ae      	adds	r2, #174	@ 0xae
 8007452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00b      	beq.n	8007474 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800745c:	7dba      	ldrb	r2, [r7, #22]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007464:	7dba      	ldrb	r2, [r7, #22]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	32ae      	adds	r2, #174	@ 0xae
 800746a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f001 f96e 	bl	8008756 <USBD_CtlSendStatus>
 800747a:	e032      	b.n	80074e2 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800747c:	7afb      	ldrb	r3, [r7, #11]
 800747e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007482:	b2db      	uxtb	r3, r3
 8007484:	4619      	mov	r1, r3
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f000 fa41 	bl	800790e <USBD_CoreFindEP>
 800748c:	4603      	mov	r3, r0
 800748e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007490:	7dbb      	ldrb	r3, [r7, #22]
 8007492:	2bff      	cmp	r3, #255	@ 0xff
 8007494:	d025      	beq.n	80074e2 <USBD_LL_DataOutStage+0x16e>
 8007496:	7dbb      	ldrb	r3, [r7, #22]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d122      	bne.n	80074e2 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b03      	cmp	r3, #3
 80074a6:	d117      	bne.n	80074d8 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80074a8:	7dba      	ldrb	r2, [r7, #22]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	32ae      	adds	r2, #174	@ 0xae
 80074ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074b2:	699b      	ldr	r3, [r3, #24]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00f      	beq.n	80074d8 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 80074b8:	7dba      	ldrb	r2, [r7, #22]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80074c0:	7dba      	ldrb	r2, [r7, #22]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	32ae      	adds	r2, #174	@ 0xae
 80074c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	7afa      	ldrb	r2, [r7, #11]
 80074ce:	4611      	mov	r1, r2
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	4798      	blx	r3
 80074d4:	4603      	mov	r3, r0
 80074d6:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80074d8:	7dfb      	ldrb	r3, [r7, #23]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d001      	beq.n	80074e2 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 80074de:	7dfb      	ldrb	r3, [r7, #23]
 80074e0:	e000      	b.n	80074e4 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3718      	adds	r7, #24
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	460b      	mov	r3, r1
 80074f6:	607a      	str	r2, [r7, #4]
 80074f8:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80074fa:	7afb      	ldrb	r3, [r7, #11]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d178      	bne.n	80075f2 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	3314      	adds	r3, #20
 8007504:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800750c:	2b02      	cmp	r3, #2
 800750e:	d163      	bne.n	80075d8 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	693a      	ldr	r2, [r7, #16]
 8007516:	8992      	ldrh	r2, [r2, #12]
 8007518:	4293      	cmp	r3, r2
 800751a:	d91c      	bls.n	8007556 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	693a      	ldr	r2, [r7, #16]
 8007522:	8992      	ldrh	r2, [r2, #12]
 8007524:	1a9a      	subs	r2, r3, r2
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	8992      	ldrh	r2, [r2, #12]
 8007532:	441a      	add	r2, r3
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	6919      	ldr	r1, [r3, #16]
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	461a      	mov	r2, r3
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f001 f8c4 	bl	80086d0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007548:	2300      	movs	r3, #0
 800754a:	2200      	movs	r2, #0
 800754c:	2100      	movs	r1, #0
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	f001 fe20 	bl	8009194 <USBD_LL_PrepareReceive>
 8007554:	e040      	b.n	80075d8 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	899b      	ldrh	r3, [r3, #12]
 800755a:	461a      	mov	r2, r3
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	429a      	cmp	r2, r3
 8007562:	d11c      	bne.n	800759e <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800756c:	4293      	cmp	r3, r2
 800756e:	d316      	bcc.n	800759e <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800757a:	429a      	cmp	r2, r3
 800757c:	d20f      	bcs.n	800759e <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800757e:	2200      	movs	r2, #0
 8007580:	2100      	movs	r1, #0
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f001 f8a4 	bl	80086d0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007590:	2300      	movs	r3, #0
 8007592:	2200      	movs	r2, #0
 8007594:	2100      	movs	r1, #0
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f001 fdfc 	bl	8009194 <USBD_LL_PrepareReceive>
 800759c:	e01c      	b.n	80075d8 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b03      	cmp	r3, #3
 80075a8:	d10f      	bne.n	80075ca <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d009      	beq.n	80075ca <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80075ca:	2180      	movs	r1, #128	@ 0x80
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f001 fd37 	bl	8009040 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f001 f8d2 	bl	800877c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d03a      	beq.n	8007658 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f7ff fe30 	bl	8007248 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80075f0:	e032      	b.n	8007658 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80075f2:	7afb      	ldrb	r3, [r7, #11]
 80075f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	4619      	mov	r1, r3
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f000 f986 	bl	800790e <USBD_CoreFindEP>
 8007602:	4603      	mov	r3, r0
 8007604:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007606:	7dfb      	ldrb	r3, [r7, #23]
 8007608:	2bff      	cmp	r3, #255	@ 0xff
 800760a:	d025      	beq.n	8007658 <USBD_LL_DataInStage+0x16c>
 800760c:	7dfb      	ldrb	r3, [r7, #23]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d122      	bne.n	8007658 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b03      	cmp	r3, #3
 800761c:	d11c      	bne.n	8007658 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800761e:	7dfa      	ldrb	r2, [r7, #23]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	32ae      	adds	r2, #174	@ 0xae
 8007624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d014      	beq.n	8007658 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800762e:	7dfa      	ldrb	r2, [r7, #23]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007636:	7dfa      	ldrb	r2, [r7, #23]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	32ae      	adds	r2, #174	@ 0xae
 800763c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	7afa      	ldrb	r2, [r7, #11]
 8007644:	4611      	mov	r1, r2
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	4798      	blx	r3
 800764a:	4603      	mov	r3, r0
 800764c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800764e:	7dbb      	ldrb	r3, [r7, #22]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d001      	beq.n	8007658 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8007654:	7dbb      	ldrb	r3, [r7, #22]
 8007656:	e000      	b.n	800765a <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3718      	adds	r7, #24
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b084      	sub	sp, #16
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800766a:	2300      	movs	r3, #0
 800766c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800769a:	2b00      	cmp	r3, #0
 800769c:	d014      	beq.n	80076c8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00e      	beq.n	80076c8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	6852      	ldr	r2, [r2, #4]
 80076b6:	b2d2      	uxtb	r2, r2
 80076b8:	4611      	mov	r1, r2
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	4798      	blx	r3
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d001      	beq.n	80076c8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80076c4:	2303      	movs	r3, #3
 80076c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076c8:	2340      	movs	r3, #64	@ 0x40
 80076ca:	2200      	movs	r2, #0
 80076cc:	2100      	movs	r1, #0
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f001 fc71 	bl	8008fb6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2240      	movs	r2, #64	@ 0x40
 80076e0:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076e4:	2340      	movs	r3, #64	@ 0x40
 80076e6:	2200      	movs	r2, #0
 80076e8:	2180      	movs	r1, #128	@ 0x80
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f001 fc63 	bl	8008fb6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2240      	movs	r2, #64	@ 0x40
 80076fc:	841a      	strh	r2, [r3, #32]

  return ret;
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	460b      	mov	r3, r1
 8007712:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	78fa      	ldrb	r2, [r7, #3]
 8007718:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b04      	cmp	r3, #4
 800773a:	d006      	beq.n	800774a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007742:	b2da      	uxtb	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2204      	movs	r2, #4
 800774e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800776e:	b2db      	uxtb	r3, r3
 8007770:	2b04      	cmp	r3, #4
 8007772:	d106      	bne.n	8007782 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800777a:	b2da      	uxtb	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	2b03      	cmp	r3, #3
 80077a2:	d110      	bne.n	80077c6 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00b      	beq.n	80077c6 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077b4:	69db      	ldr	r3, [r3, #28]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d005      	beq.n	80077c6 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077c0:	69db      	ldr	r3, [r3, #28]
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	460b      	mov	r3, r1
 80077da:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	32ae      	adds	r2, #174	@ 0xae
 80077e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d101      	bne.n	80077f2 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80077ee:	2303      	movs	r3, #3
 80077f0:	e01c      	b.n	800782c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	2b03      	cmp	r3, #3
 80077fc:	d115      	bne.n	800782a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	32ae      	adds	r2, #174	@ 0xae
 8007808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800780c:	6a1b      	ldr	r3, [r3, #32]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00b      	beq.n	800782a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	32ae      	adds	r2, #174	@ 0xae
 800781c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007820:	6a1b      	ldr	r3, [r3, #32]
 8007822:	78fa      	ldrb	r2, [r7, #3]
 8007824:	4611      	mov	r1, r2
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3708      	adds	r7, #8
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	460b      	mov	r3, r1
 800783e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	32ae      	adds	r2, #174	@ 0xae
 800784a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d101      	bne.n	8007856 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007852:	2303      	movs	r3, #3
 8007854:	e01c      	b.n	8007890 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800785c:	b2db      	uxtb	r3, r3
 800785e:	2b03      	cmp	r3, #3
 8007860:	d115      	bne.n	800788e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	32ae      	adds	r2, #174	@ 0xae
 800786c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00b      	beq.n	800788e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	32ae      	adds	r2, #174	@ 0xae
 8007880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007886:	78fa      	ldrb	r2, [r7, #3]
 8007888:	4611      	mov	r1, r2
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	3708      	adds	r7, #8
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	370c      	adds	r7, #12
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr

080078ae <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b084      	sub	sp, #16
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80078b6:	2300      	movs	r3, #0
 80078b8:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2201      	movs	r2, #1
 80078be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00e      	beq.n	80078ea <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	6852      	ldr	r2, [r2, #4]
 80078d8:	b2d2      	uxtb	r2, r2
 80078da:	4611      	mov	r1, r2
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	4798      	blx	r3
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d001      	beq.n	80078ea <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80078e6:	2303      	movs	r3, #3
 80078e8:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80078ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	460b      	mov	r3, r1
 80078fe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007900:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007902:	4618      	mov	r0, r3
 8007904:	370c      	adds	r7, #12
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr

0800790e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800790e:	b480      	push	{r7}
 8007910:	b083      	sub	sp, #12
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
 8007916:	460b      	mov	r3, r1
 8007918:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800791a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800791c:	4618      	mov	r0, r3
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b086      	sub	sp, #24
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	460b      	mov	r3, r1
 8007932:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800793c:	2300      	movs	r3, #0
 800793e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	885b      	ldrh	r3, [r3, #2]
 8007944:	b29b      	uxth	r3, r3
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	7812      	ldrb	r2, [r2, #0]
 800794a:	4293      	cmp	r3, r2
 800794c:	d91f      	bls.n	800798e <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007954:	e013      	b.n	800797e <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007956:	f107 030a 	add.w	r3, r7, #10
 800795a:	4619      	mov	r1, r3
 800795c:	6978      	ldr	r0, [r7, #20]
 800795e:	f000 f81b 	bl	8007998 <USBD_GetNextDesc>
 8007962:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	785b      	ldrb	r3, [r3, #1]
 8007968:	2b05      	cmp	r3, #5
 800796a:	d108      	bne.n	800797e <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	789b      	ldrb	r3, [r3, #2]
 8007974:	78fa      	ldrb	r2, [r7, #3]
 8007976:	429a      	cmp	r2, r3
 8007978:	d008      	beq.n	800798c <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800797a:	2300      	movs	r3, #0
 800797c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	885b      	ldrh	r3, [r3, #2]
 8007982:	b29a      	uxth	r2, r3
 8007984:	897b      	ldrh	r3, [r7, #10]
 8007986:	429a      	cmp	r2, r3
 8007988:	d8e5      	bhi.n	8007956 <USBD_GetEpDesc+0x2e>
 800798a:	e000      	b.n	800798e <USBD_GetEpDesc+0x66>
          break;
 800798c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800798e:	693b      	ldr	r3, [r7, #16]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3718      	adds	r7, #24
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007998:	b480      	push	{r7}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	881b      	ldrh	r3, [r3, #0]
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	7812      	ldrb	r2, [r2, #0]
 80079ae:	4413      	add	r3, r2
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	461a      	mov	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4413      	add	r3, r2
 80079c0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80079c2:	68fb      	ldr	r3, [r7, #12]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3714      	adds	r7, #20
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b087      	sub	sp, #28
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	3301      	adds	r3, #1
 80079e6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80079ee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80079f2:	021b      	lsls	r3, r3, #8
 80079f4:	b21a      	sxth	r2, r3
 80079f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	b21b      	sxth	r3, r3
 80079fe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007a00:	89fb      	ldrh	r3, [r7, #14]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	371c      	adds	r7, #28
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
	...

08007a10 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a26:	2b40      	cmp	r3, #64	@ 0x40
 8007a28:	d005      	beq.n	8007a36 <USBD_StdDevReq+0x26>
 8007a2a:	2b40      	cmp	r3, #64	@ 0x40
 8007a2c:	d857      	bhi.n	8007ade <USBD_StdDevReq+0xce>
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00f      	beq.n	8007a52 <USBD_StdDevReq+0x42>
 8007a32:	2b20      	cmp	r3, #32
 8007a34:	d153      	bne.n	8007ade <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	32ae      	adds	r2, #174	@ 0xae
 8007a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	6839      	ldr	r1, [r7, #0]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	4798      	blx	r3
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a50:	e04a      	b.n	8007ae8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	785b      	ldrb	r3, [r3, #1]
 8007a56:	2b09      	cmp	r3, #9
 8007a58:	d83b      	bhi.n	8007ad2 <USBD_StdDevReq+0xc2>
 8007a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a60 <USBD_StdDevReq+0x50>)
 8007a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a60:	08007ab5 	.word	0x08007ab5
 8007a64:	08007ac9 	.word	0x08007ac9
 8007a68:	08007ad3 	.word	0x08007ad3
 8007a6c:	08007abf 	.word	0x08007abf
 8007a70:	08007ad3 	.word	0x08007ad3
 8007a74:	08007a93 	.word	0x08007a93
 8007a78:	08007a89 	.word	0x08007a89
 8007a7c:	08007ad3 	.word	0x08007ad3
 8007a80:	08007aab 	.word	0x08007aab
 8007a84:	08007a9d 	.word	0x08007a9d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007a88:	6839      	ldr	r1, [r7, #0]
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fa3e 	bl	8007f0c <USBD_GetDescriptor>
          break;
 8007a90:	e024      	b.n	8007adc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007a92:	6839      	ldr	r1, [r7, #0]
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 fba3 	bl	80081e0 <USBD_SetAddress>
          break;
 8007a9a:	e01f      	b.n	8007adc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007a9c:	6839      	ldr	r1, [r7, #0]
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 fbe2 	bl	8008268 <USBD_SetConfig>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	73fb      	strb	r3, [r7, #15]
          break;
 8007aa8:	e018      	b.n	8007adc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fc85 	bl	80083bc <USBD_GetConfig>
          break;
 8007ab2:	e013      	b.n	8007adc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fcb6 	bl	8008428 <USBD_GetStatus>
          break;
 8007abc:	e00e      	b.n	8007adc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007abe:	6839      	ldr	r1, [r7, #0]
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 fce5 	bl	8008490 <USBD_SetFeature>
          break;
 8007ac6:	e009      	b.n	8007adc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007ac8:	6839      	ldr	r1, [r7, #0]
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 fd09 	bl	80084e2 <USBD_ClrFeature>
          break;
 8007ad0:	e004      	b.n	8007adc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007ad2:	6839      	ldr	r1, [r7, #0]
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fd60 	bl	800859a <USBD_CtlError>
          break;
 8007ada:	bf00      	nop
      }
      break;
 8007adc:	e004      	b.n	8007ae8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007ade:	6839      	ldr	r1, [r7, #0]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fd5a 	bl	800859a <USBD_CtlError>
      break;
 8007ae6:	bf00      	nop
  }

  return ret;
 8007ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop

08007af4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007afe:	2300      	movs	r3, #0
 8007b00:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b0a:	2b40      	cmp	r3, #64	@ 0x40
 8007b0c:	d005      	beq.n	8007b1a <USBD_StdItfReq+0x26>
 8007b0e:	2b40      	cmp	r3, #64	@ 0x40
 8007b10:	d852      	bhi.n	8007bb8 <USBD_StdItfReq+0xc4>
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d001      	beq.n	8007b1a <USBD_StdItfReq+0x26>
 8007b16:	2b20      	cmp	r3, #32
 8007b18:	d14e      	bne.n	8007bb8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	3b01      	subs	r3, #1
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d840      	bhi.n	8007baa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	889b      	ldrh	r3, [r3, #4]
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d836      	bhi.n	8007ba0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	889b      	ldrh	r3, [r3, #4]
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	4619      	mov	r1, r3
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7ff feda 	bl	80078f4 <USBD_CoreFindIF>
 8007b40:	4603      	mov	r3, r0
 8007b42:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b44:	7bbb      	ldrb	r3, [r7, #14]
 8007b46:	2bff      	cmp	r3, #255	@ 0xff
 8007b48:	d01d      	beq.n	8007b86 <USBD_StdItfReq+0x92>
 8007b4a:	7bbb      	ldrb	r3, [r7, #14]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d11a      	bne.n	8007b86 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007b50:	7bba      	ldrb	r2, [r7, #14]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	32ae      	adds	r2, #174	@ 0xae
 8007b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00f      	beq.n	8007b80 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007b60:	7bba      	ldrb	r2, [r7, #14]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b68:	7bba      	ldrb	r2, [r7, #14]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	32ae      	adds	r2, #174	@ 0xae
 8007b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	6839      	ldr	r1, [r7, #0]
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	4798      	blx	r3
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007b7e:	e004      	b.n	8007b8a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007b80:	2303      	movs	r3, #3
 8007b82:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007b84:	e001      	b.n	8007b8a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007b86:	2303      	movs	r3, #3
 8007b88:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	88db      	ldrh	r3, [r3, #6]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d110      	bne.n	8007bb4 <USBD_StdItfReq+0xc0>
 8007b92:	7bfb      	ldrb	r3, [r7, #15]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d10d      	bne.n	8007bb4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 fddc 	bl	8008756 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007b9e:	e009      	b.n	8007bb4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007ba0:	6839      	ldr	r1, [r7, #0]
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fcf9 	bl	800859a <USBD_CtlError>
          break;
 8007ba8:	e004      	b.n	8007bb4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007baa:	6839      	ldr	r1, [r7, #0]
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 fcf4 	bl	800859a <USBD_CtlError>
          break;
 8007bb2:	e000      	b.n	8007bb6 <USBD_StdItfReq+0xc2>
          break;
 8007bb4:	bf00      	nop
      }
      break;
 8007bb6:	e004      	b.n	8007bc2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007bb8:	6839      	ldr	r1, [r7, #0]
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 fced 	bl	800859a <USBD_CtlError>
      break;
 8007bc0:	bf00      	nop
  }

  return ret;
 8007bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	889b      	ldrh	r3, [r3, #4]
 8007bde:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007be8:	2b40      	cmp	r3, #64	@ 0x40
 8007bea:	d007      	beq.n	8007bfc <USBD_StdEPReq+0x30>
 8007bec:	2b40      	cmp	r3, #64	@ 0x40
 8007bee:	f200 8181 	bhi.w	8007ef4 <USBD_StdEPReq+0x328>
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d02a      	beq.n	8007c4c <USBD_StdEPReq+0x80>
 8007bf6:	2b20      	cmp	r3, #32
 8007bf8:	f040 817c 	bne.w	8007ef4 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007bfc:	7bbb      	ldrb	r3, [r7, #14]
 8007bfe:	4619      	mov	r1, r3
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f7ff fe84 	bl	800790e <USBD_CoreFindEP>
 8007c06:	4603      	mov	r3, r0
 8007c08:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c0a:	7b7b      	ldrb	r3, [r7, #13]
 8007c0c:	2bff      	cmp	r3, #255	@ 0xff
 8007c0e:	f000 8176 	beq.w	8007efe <USBD_StdEPReq+0x332>
 8007c12:	7b7b      	ldrb	r3, [r7, #13]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f040 8172 	bne.w	8007efe <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8007c1a:	7b7a      	ldrb	r2, [r7, #13]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007c22:	7b7a      	ldrb	r2, [r7, #13]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	32ae      	adds	r2, #174	@ 0xae
 8007c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f000 8165 	beq.w	8007efe <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007c34:	7b7a      	ldrb	r2, [r7, #13]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	32ae      	adds	r2, #174	@ 0xae
 8007c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	6839      	ldr	r1, [r7, #0]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	4798      	blx	r3
 8007c46:	4603      	mov	r3, r0
 8007c48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007c4a:	e158      	b.n	8007efe <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	785b      	ldrb	r3, [r3, #1]
 8007c50:	2b03      	cmp	r3, #3
 8007c52:	d008      	beq.n	8007c66 <USBD_StdEPReq+0x9a>
 8007c54:	2b03      	cmp	r3, #3
 8007c56:	f300 8147 	bgt.w	8007ee8 <USBD_StdEPReq+0x31c>
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	f000 809b 	beq.w	8007d96 <USBD_StdEPReq+0x1ca>
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d03c      	beq.n	8007cde <USBD_StdEPReq+0x112>
 8007c64:	e140      	b.n	8007ee8 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d002      	beq.n	8007c78 <USBD_StdEPReq+0xac>
 8007c72:	2b03      	cmp	r3, #3
 8007c74:	d016      	beq.n	8007ca4 <USBD_StdEPReq+0xd8>
 8007c76:	e02c      	b.n	8007cd2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c78:	7bbb      	ldrb	r3, [r7, #14]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00d      	beq.n	8007c9a <USBD_StdEPReq+0xce>
 8007c7e:	7bbb      	ldrb	r3, [r7, #14]
 8007c80:	2b80      	cmp	r3, #128	@ 0x80
 8007c82:	d00a      	beq.n	8007c9a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c84:	7bbb      	ldrb	r3, [r7, #14]
 8007c86:	4619      	mov	r1, r3
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f001 f9d9 	bl	8009040 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c8e:	2180      	movs	r1, #128	@ 0x80
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f001 f9d5 	bl	8009040 <USBD_LL_StallEP>
 8007c96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007c98:	e020      	b.n	8007cdc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007c9a:	6839      	ldr	r1, [r7, #0]
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 fc7c 	bl	800859a <USBD_CtlError>
              break;
 8007ca2:	e01b      	b.n	8007cdc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	885b      	ldrh	r3, [r3, #2]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10e      	bne.n	8007cca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007cac:	7bbb      	ldrb	r3, [r7, #14]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00b      	beq.n	8007cca <USBD_StdEPReq+0xfe>
 8007cb2:	7bbb      	ldrb	r3, [r7, #14]
 8007cb4:	2b80      	cmp	r3, #128	@ 0x80
 8007cb6:	d008      	beq.n	8007cca <USBD_StdEPReq+0xfe>
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	88db      	ldrh	r3, [r3, #6]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d104      	bne.n	8007cca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007cc0:	7bbb      	ldrb	r3, [r7, #14]
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f001 f9bb 	bl	8009040 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 fd43 	bl	8008756 <USBD_CtlSendStatus>

              break;
 8007cd0:	e004      	b.n	8007cdc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007cd2:	6839      	ldr	r1, [r7, #0]
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 fc60 	bl	800859a <USBD_CtlError>
              break;
 8007cda:	bf00      	nop
          }
          break;
 8007cdc:	e109      	b.n	8007ef2 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d002      	beq.n	8007cf0 <USBD_StdEPReq+0x124>
 8007cea:	2b03      	cmp	r3, #3
 8007cec:	d016      	beq.n	8007d1c <USBD_StdEPReq+0x150>
 8007cee:	e04b      	b.n	8007d88 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007cf0:	7bbb      	ldrb	r3, [r7, #14]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00d      	beq.n	8007d12 <USBD_StdEPReq+0x146>
 8007cf6:	7bbb      	ldrb	r3, [r7, #14]
 8007cf8:	2b80      	cmp	r3, #128	@ 0x80
 8007cfa:	d00a      	beq.n	8007d12 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007cfc:	7bbb      	ldrb	r3, [r7, #14]
 8007cfe:	4619      	mov	r1, r3
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f001 f99d 	bl	8009040 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d06:	2180      	movs	r1, #128	@ 0x80
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f001 f999 	bl	8009040 <USBD_LL_StallEP>
 8007d0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d10:	e040      	b.n	8007d94 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007d12:	6839      	ldr	r1, [r7, #0]
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fc40 	bl	800859a <USBD_CtlError>
              break;
 8007d1a:	e03b      	b.n	8007d94 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	885b      	ldrh	r3, [r3, #2]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d136      	bne.n	8007d92 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007d24:	7bbb      	ldrb	r3, [r7, #14]
 8007d26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d004      	beq.n	8007d38 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007d2e:	7bbb      	ldrb	r3, [r7, #14]
 8007d30:	4619      	mov	r1, r3
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f001 f9a3 	bl	800907e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fd0c 	bl	8008756 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007d3e:	7bbb      	ldrb	r3, [r7, #14]
 8007d40:	4619      	mov	r1, r3
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f7ff fde3 	bl	800790e <USBD_CoreFindEP>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d4c:	7b7b      	ldrb	r3, [r7, #13]
 8007d4e:	2bff      	cmp	r3, #255	@ 0xff
 8007d50:	d01f      	beq.n	8007d92 <USBD_StdEPReq+0x1c6>
 8007d52:	7b7b      	ldrb	r3, [r7, #13]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d11c      	bne.n	8007d92 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007d58:	7b7a      	ldrb	r2, [r7, #13]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007d60:	7b7a      	ldrb	r2, [r7, #13]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	32ae      	adds	r2, #174	@ 0xae
 8007d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d010      	beq.n	8007d92 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007d70:	7b7a      	ldrb	r2, [r7, #13]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	32ae      	adds	r2, #174	@ 0xae
 8007d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	6839      	ldr	r1, [r7, #0]
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	4798      	blx	r3
 8007d82:	4603      	mov	r3, r0
 8007d84:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007d86:	e004      	b.n	8007d92 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007d88:	6839      	ldr	r1, [r7, #0]
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fc05 	bl	800859a <USBD_CtlError>
              break;
 8007d90:	e000      	b.n	8007d94 <USBD_StdEPReq+0x1c8>
              break;
 8007d92:	bf00      	nop
          }
          break;
 8007d94:	e0ad      	b.n	8007ef2 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	d002      	beq.n	8007da8 <USBD_StdEPReq+0x1dc>
 8007da2:	2b03      	cmp	r3, #3
 8007da4:	d033      	beq.n	8007e0e <USBD_StdEPReq+0x242>
 8007da6:	e099      	b.n	8007edc <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007da8:	7bbb      	ldrb	r3, [r7, #14]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d007      	beq.n	8007dbe <USBD_StdEPReq+0x1f2>
 8007dae:	7bbb      	ldrb	r3, [r7, #14]
 8007db0:	2b80      	cmp	r3, #128	@ 0x80
 8007db2:	d004      	beq.n	8007dbe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007db4:	6839      	ldr	r1, [r7, #0]
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fbef 	bl	800859a <USBD_CtlError>
                break;
 8007dbc:	e093      	b.n	8007ee6 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	da0b      	bge.n	8007dde <USBD_StdEPReq+0x212>
 8007dc6:	7bbb      	ldrb	r3, [r7, #14]
 8007dc8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007dcc:	4613      	mov	r3, r2
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4413      	add	r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	3310      	adds	r3, #16
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	4413      	add	r3, r2
 8007dda:	3304      	adds	r3, #4
 8007ddc:	e00b      	b.n	8007df6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007dde:	7bbb      	ldrb	r3, [r7, #14]
 8007de0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007de4:	4613      	mov	r3, r2
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	4413      	add	r3, r2
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	4413      	add	r3, r2
 8007df4:	3304      	adds	r3, #4
 8007df6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	330e      	adds	r3, #14
 8007e02:	2202      	movs	r2, #2
 8007e04:	4619      	mov	r1, r3
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fc44 	bl	8008694 <USBD_CtlSendData>
              break;
 8007e0c:	e06b      	b.n	8007ee6 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007e0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	da11      	bge.n	8007e3a <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007e16:	7bbb      	ldrb	r3, [r7, #14]
 8007e18:	f003 020f 	and.w	r2, r3, #15
 8007e1c:	6879      	ldr	r1, [r7, #4]
 8007e1e:	4613      	mov	r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	4413      	add	r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	440b      	add	r3, r1
 8007e28:	3323      	adds	r3, #35	@ 0x23
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d117      	bne.n	8007e60 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007e30:	6839      	ldr	r1, [r7, #0]
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fbb1 	bl	800859a <USBD_CtlError>
                  break;
 8007e38:	e055      	b.n	8007ee6 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007e3a:	7bbb      	ldrb	r3, [r7, #14]
 8007e3c:	f003 020f 	and.w	r2, r3, #15
 8007e40:	6879      	ldr	r1, [r7, #4]
 8007e42:	4613      	mov	r3, r2
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4413      	add	r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	440b      	add	r3, r1
 8007e4c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d104      	bne.n	8007e60 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007e56:	6839      	ldr	r1, [r7, #0]
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 fb9e 	bl	800859a <USBD_CtlError>
                  break;
 8007e5e:	e042      	b.n	8007ee6 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	da0b      	bge.n	8007e80 <USBD_StdEPReq+0x2b4>
 8007e68:	7bbb      	ldrb	r3, [r7, #14]
 8007e6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e6e:	4613      	mov	r3, r2
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	4413      	add	r3, r2
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	3310      	adds	r3, #16
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	3304      	adds	r3, #4
 8007e7e:	e00b      	b.n	8007e98 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e80:	7bbb      	ldrb	r3, [r7, #14]
 8007e82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e86:	4613      	mov	r3, r2
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4413      	add	r3, r2
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	4413      	add	r3, r2
 8007e96:	3304      	adds	r3, #4
 8007e98:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007e9a:	7bbb      	ldrb	r3, [r7, #14]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d002      	beq.n	8007ea6 <USBD_StdEPReq+0x2da>
 8007ea0:	7bbb      	ldrb	r3, [r7, #14]
 8007ea2:	2b80      	cmp	r3, #128	@ 0x80
 8007ea4:	d103      	bne.n	8007eae <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	739a      	strb	r2, [r3, #14]
 8007eac:	e00e      	b.n	8007ecc <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007eae:	7bbb      	ldrb	r3, [r7, #14]
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f001 f902 	bl	80090bc <USBD_LL_IsStallEP>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	739a      	strb	r2, [r3, #14]
 8007ec4:	e002      	b.n	8007ecc <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	330e      	adds	r3, #14
 8007ed0:	2202      	movs	r2, #2
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 fbdd 	bl	8008694 <USBD_CtlSendData>
              break;
 8007eda:	e004      	b.n	8007ee6 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8007edc:	6839      	ldr	r1, [r7, #0]
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fb5b 	bl	800859a <USBD_CtlError>
              break;
 8007ee4:	bf00      	nop
          }
          break;
 8007ee6:	e004      	b.n	8007ef2 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8007ee8:	6839      	ldr	r1, [r7, #0]
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fb55 	bl	800859a <USBD_CtlError>
          break;
 8007ef0:	bf00      	nop
      }
      break;
 8007ef2:	e005      	b.n	8007f00 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8007ef4:	6839      	ldr	r1, [r7, #0]
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fb4f 	bl	800859a <USBD_CtlError>
      break;
 8007efc:	e000      	b.n	8007f00 <USBD_StdEPReq+0x334>
      break;
 8007efe:	bf00      	nop
  }

  return ret;
 8007f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
	...

08007f0c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f16:	2300      	movs	r3, #0
 8007f18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	885b      	ldrh	r3, [r3, #2]
 8007f26:	0a1b      	lsrs	r3, r3, #8
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	2b06      	cmp	r3, #6
 8007f2e:	f200 8128 	bhi.w	8008182 <USBD_GetDescriptor+0x276>
 8007f32:	a201      	add	r2, pc, #4	@ (adr r2, 8007f38 <USBD_GetDescriptor+0x2c>)
 8007f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f38:	08007f55 	.word	0x08007f55
 8007f3c:	08007f6d 	.word	0x08007f6d
 8007f40:	08007fad 	.word	0x08007fad
 8007f44:	08008183 	.word	0x08008183
 8007f48:	08008183 	.word	0x08008183
 8007f4c:	08008123 	.word	0x08008123
 8007f50:	0800814f 	.word	0x0800814f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	7c12      	ldrb	r2, [r2, #16]
 8007f60:	f107 0108 	add.w	r1, r7, #8
 8007f64:	4610      	mov	r0, r2
 8007f66:	4798      	blx	r3
 8007f68:	60f8      	str	r0, [r7, #12]
      break;
 8007f6a:	e112      	b.n	8008192 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	7c1b      	ldrb	r3, [r3, #16]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d10d      	bne.n	8007f90 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f7c:	f107 0208 	add.w	r2, r7, #8
 8007f80:	4610      	mov	r0, r2
 8007f82:	4798      	blx	r3
 8007f84:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	2202      	movs	r2, #2
 8007f8c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007f8e:	e100      	b.n	8008192 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f98:	f107 0208 	add.w	r2, r7, #8
 8007f9c:	4610      	mov	r0, r2
 8007f9e:	4798      	blx	r3
 8007fa0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	2202      	movs	r2, #2
 8007fa8:	701a      	strb	r2, [r3, #0]
      break;
 8007faa:	e0f2      	b.n	8008192 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	885b      	ldrh	r3, [r3, #2]
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b05      	cmp	r3, #5
 8007fb4:	f200 80ac 	bhi.w	8008110 <USBD_GetDescriptor+0x204>
 8007fb8:	a201      	add	r2, pc, #4	@ (adr r2, 8007fc0 <USBD_GetDescriptor+0xb4>)
 8007fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fbe:	bf00      	nop
 8007fc0:	08007fd9 	.word	0x08007fd9
 8007fc4:	0800800d 	.word	0x0800800d
 8007fc8:	08008041 	.word	0x08008041
 8007fcc:	08008075 	.word	0x08008075
 8007fd0:	080080a9 	.word	0x080080a9
 8007fd4:	080080dd 	.word	0x080080dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00b      	beq.n	8007ffc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	7c12      	ldrb	r2, [r2, #16]
 8007ff0:	f107 0108 	add.w	r1, r7, #8
 8007ff4:	4610      	mov	r0, r2
 8007ff6:	4798      	blx	r3
 8007ff8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ffa:	e091      	b.n	8008120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ffc:	6839      	ldr	r1, [r7, #0]
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 facb 	bl	800859a <USBD_CtlError>
            err++;
 8008004:	7afb      	ldrb	r3, [r7, #11]
 8008006:	3301      	adds	r3, #1
 8008008:	72fb      	strb	r3, [r7, #11]
          break;
 800800a:	e089      	b.n	8008120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00b      	beq.n	8008030 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	7c12      	ldrb	r2, [r2, #16]
 8008024:	f107 0108 	add.w	r1, r7, #8
 8008028:	4610      	mov	r0, r2
 800802a:	4798      	blx	r3
 800802c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800802e:	e077      	b.n	8008120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008030:	6839      	ldr	r1, [r7, #0]
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 fab1 	bl	800859a <USBD_CtlError>
            err++;
 8008038:	7afb      	ldrb	r3, [r7, #11]
 800803a:	3301      	adds	r3, #1
 800803c:	72fb      	strb	r3, [r7, #11]
          break;
 800803e:	e06f      	b.n	8008120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00b      	beq.n	8008064 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	7c12      	ldrb	r2, [r2, #16]
 8008058:	f107 0108 	add.w	r1, r7, #8
 800805c:	4610      	mov	r0, r2
 800805e:	4798      	blx	r3
 8008060:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008062:	e05d      	b.n	8008120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fa97 	bl	800859a <USBD_CtlError>
            err++;
 800806c:	7afb      	ldrb	r3, [r7, #11]
 800806e:	3301      	adds	r3, #1
 8008070:	72fb      	strb	r3, [r7, #11]
          break;
 8008072:	e055      	b.n	8008120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00b      	beq.n	8008098 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	7c12      	ldrb	r2, [r2, #16]
 800808c:	f107 0108 	add.w	r1, r7, #8
 8008090:	4610      	mov	r0, r2
 8008092:	4798      	blx	r3
 8008094:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008096:	e043      	b.n	8008120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008098:	6839      	ldr	r1, [r7, #0]
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fa7d 	bl	800859a <USBD_CtlError>
            err++;
 80080a0:	7afb      	ldrb	r3, [r7, #11]
 80080a2:	3301      	adds	r3, #1
 80080a4:	72fb      	strb	r3, [r7, #11]
          break;
 80080a6:	e03b      	b.n	8008120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080ae:	695b      	ldr	r3, [r3, #20]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00b      	beq.n	80080cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080ba:	695b      	ldr	r3, [r3, #20]
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	7c12      	ldrb	r2, [r2, #16]
 80080c0:	f107 0108 	add.w	r1, r7, #8
 80080c4:	4610      	mov	r0, r2
 80080c6:	4798      	blx	r3
 80080c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080ca:	e029      	b.n	8008120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080cc:	6839      	ldr	r1, [r7, #0]
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 fa63 	bl	800859a <USBD_CtlError>
            err++;
 80080d4:	7afb      	ldrb	r3, [r7, #11]
 80080d6:	3301      	adds	r3, #1
 80080d8:	72fb      	strb	r3, [r7, #11]
          break;
 80080da:	e021      	b.n	8008120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d00b      	beq.n	8008100 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080ee:	699b      	ldr	r3, [r3, #24]
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	7c12      	ldrb	r2, [r2, #16]
 80080f4:	f107 0108 	add.w	r1, r7, #8
 80080f8:	4610      	mov	r0, r2
 80080fa:	4798      	blx	r3
 80080fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080fe:	e00f      	b.n	8008120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008100:	6839      	ldr	r1, [r7, #0]
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fa49 	bl	800859a <USBD_CtlError>
            err++;
 8008108:	7afb      	ldrb	r3, [r7, #11]
 800810a:	3301      	adds	r3, #1
 800810c:	72fb      	strb	r3, [r7, #11]
          break;
 800810e:	e007      	b.n	8008120 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008110:	6839      	ldr	r1, [r7, #0]
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fa41 	bl	800859a <USBD_CtlError>
          err++;
 8008118:	7afb      	ldrb	r3, [r7, #11]
 800811a:	3301      	adds	r3, #1
 800811c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800811e:	bf00      	nop
      }
      break;
 8008120:	e037      	b.n	8008192 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	7c1b      	ldrb	r3, [r3, #16]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d109      	bne.n	800813e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008132:	f107 0208 	add.w	r2, r7, #8
 8008136:	4610      	mov	r0, r2
 8008138:	4798      	blx	r3
 800813a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800813c:	e029      	b.n	8008192 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800813e:	6839      	ldr	r1, [r7, #0]
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 fa2a 	bl	800859a <USBD_CtlError>
        err++;
 8008146:	7afb      	ldrb	r3, [r7, #11]
 8008148:	3301      	adds	r3, #1
 800814a:	72fb      	strb	r3, [r7, #11]
      break;
 800814c:	e021      	b.n	8008192 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	7c1b      	ldrb	r3, [r3, #16]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d10d      	bne.n	8008172 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800815c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800815e:	f107 0208 	add.w	r2, r7, #8
 8008162:	4610      	mov	r0, r2
 8008164:	4798      	blx	r3
 8008166:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	3301      	adds	r3, #1
 800816c:	2207      	movs	r2, #7
 800816e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008170:	e00f      	b.n	8008192 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008172:	6839      	ldr	r1, [r7, #0]
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 fa10 	bl	800859a <USBD_CtlError>
        err++;
 800817a:	7afb      	ldrb	r3, [r7, #11]
 800817c:	3301      	adds	r3, #1
 800817e:	72fb      	strb	r3, [r7, #11]
      break;
 8008180:	e007      	b.n	8008192 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008182:	6839      	ldr	r1, [r7, #0]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 fa08 	bl	800859a <USBD_CtlError>
      err++;
 800818a:	7afb      	ldrb	r3, [r7, #11]
 800818c:	3301      	adds	r3, #1
 800818e:	72fb      	strb	r3, [r7, #11]
      break;
 8008190:	bf00      	nop
  }

  if (err != 0U)
 8008192:	7afb      	ldrb	r3, [r7, #11]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d11e      	bne.n	80081d6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	88db      	ldrh	r3, [r3, #6]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d016      	beq.n	80081ce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80081a0:	893b      	ldrh	r3, [r7, #8]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00e      	beq.n	80081c4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	88da      	ldrh	r2, [r3, #6]
 80081aa:	893b      	ldrh	r3, [r7, #8]
 80081ac:	4293      	cmp	r3, r2
 80081ae:	bf28      	it	cs
 80081b0:	4613      	movcs	r3, r2
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80081b6:	893b      	ldrh	r3, [r7, #8]
 80081b8:	461a      	mov	r2, r3
 80081ba:	68f9      	ldr	r1, [r7, #12]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 fa69 	bl	8008694 <USBD_CtlSendData>
 80081c2:	e009      	b.n	80081d8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80081c4:	6839      	ldr	r1, [r7, #0]
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f9e7 	bl	800859a <USBD_CtlError>
 80081cc:	e004      	b.n	80081d8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fac1 	bl	8008756 <USBD_CtlSendStatus>
 80081d4:	e000      	b.n	80081d8 <USBD_GetDescriptor+0x2cc>
    return;
 80081d6:	bf00      	nop
  }
}
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop

080081e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	889b      	ldrh	r3, [r3, #4]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d131      	bne.n	8008256 <USBD_SetAddress+0x76>
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	88db      	ldrh	r3, [r3, #6]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d12d      	bne.n	8008256 <USBD_SetAddress+0x76>
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	885b      	ldrh	r3, [r3, #2]
 80081fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8008200:	d829      	bhi.n	8008256 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	885b      	ldrh	r3, [r3, #2]
 8008206:	b2db      	uxtb	r3, r3
 8008208:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800820c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008214:	b2db      	uxtb	r3, r3
 8008216:	2b03      	cmp	r3, #3
 8008218:	d104      	bne.n	8008224 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800821a:	6839      	ldr	r1, [r7, #0]
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 f9bc 	bl	800859a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008222:	e01d      	b.n	8008260 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	7bfa      	ldrb	r2, [r7, #15]
 8008228:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800822c:	7bfb      	ldrb	r3, [r7, #15]
 800822e:	4619      	mov	r1, r3
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 ff6f 	bl	8009114 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fa8d 	bl	8008756 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800823c:	7bfb      	ldrb	r3, [r7, #15]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d004      	beq.n	800824c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2202      	movs	r2, #2
 8008246:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800824a:	e009      	b.n	8008260 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008254:	e004      	b.n	8008260 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008256:	6839      	ldr	r1, [r7, #0]
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 f99e 	bl	800859a <USBD_CtlError>
  }
}
 800825e:	bf00      	nop
 8008260:	bf00      	nop
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008272:	2300      	movs	r3, #0
 8008274:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	885b      	ldrh	r3, [r3, #2]
 800827a:	b2da      	uxtb	r2, r3
 800827c:	4b4e      	ldr	r3, [pc, #312]	@ (80083b8 <USBD_SetConfig+0x150>)
 800827e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008280:	4b4d      	ldr	r3, [pc, #308]	@ (80083b8 <USBD_SetConfig+0x150>)
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	2b01      	cmp	r3, #1
 8008286:	d905      	bls.n	8008294 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008288:	6839      	ldr	r1, [r7, #0]
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f985 	bl	800859a <USBD_CtlError>
    return USBD_FAIL;
 8008290:	2303      	movs	r3, #3
 8008292:	e08c      	b.n	80083ae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800829a:	b2db      	uxtb	r3, r3
 800829c:	2b02      	cmp	r3, #2
 800829e:	d002      	beq.n	80082a6 <USBD_SetConfig+0x3e>
 80082a0:	2b03      	cmp	r3, #3
 80082a2:	d029      	beq.n	80082f8 <USBD_SetConfig+0x90>
 80082a4:	e075      	b.n	8008392 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80082a6:	4b44      	ldr	r3, [pc, #272]	@ (80083b8 <USBD_SetConfig+0x150>)
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d020      	beq.n	80082f0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80082ae:	4b42      	ldr	r3, [pc, #264]	@ (80083b8 <USBD_SetConfig+0x150>)
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	461a      	mov	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80082b8:	4b3f      	ldr	r3, [pc, #252]	@ (80083b8 <USBD_SetConfig+0x150>)
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	4619      	mov	r1, r3
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f7fe ffcd 	bl	800725e <USBD_SetClassConfig>
 80082c4:	4603      	mov	r3, r0
 80082c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80082c8:	7bfb      	ldrb	r3, [r7, #15]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d008      	beq.n	80082e0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80082ce:	6839      	ldr	r1, [r7, #0]
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 f962 	bl	800859a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2202      	movs	r2, #2
 80082da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80082de:	e065      	b.n	80083ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 fa38 	bl	8008756 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2203      	movs	r2, #3
 80082ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80082ee:	e05d      	b.n	80083ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 fa30 	bl	8008756 <USBD_CtlSendStatus>
      break;
 80082f6:	e059      	b.n	80083ac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80082f8:	4b2f      	ldr	r3, [pc, #188]	@ (80083b8 <USBD_SetConfig+0x150>)
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d112      	bne.n	8008326 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2202      	movs	r2, #2
 8008304:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008308:	4b2b      	ldr	r3, [pc, #172]	@ (80083b8 <USBD_SetConfig+0x150>)
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	461a      	mov	r2, r3
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008312:	4b29      	ldr	r3, [pc, #164]	@ (80083b8 <USBD_SetConfig+0x150>)
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	4619      	mov	r1, r3
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f7fe ffbc 	bl	8007296 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fa19 	bl	8008756 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008324:	e042      	b.n	80083ac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008326:	4b24      	ldr	r3, [pc, #144]	@ (80083b8 <USBD_SetConfig+0x150>)
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	461a      	mov	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	429a      	cmp	r2, r3
 8008332:	d02a      	beq.n	800838a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	b2db      	uxtb	r3, r3
 800833a:	4619      	mov	r1, r3
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f7fe ffaa 	bl	8007296 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008342:	4b1d      	ldr	r3, [pc, #116]	@ (80083b8 <USBD_SetConfig+0x150>)
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	461a      	mov	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800834c:	4b1a      	ldr	r3, [pc, #104]	@ (80083b8 <USBD_SetConfig+0x150>)
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	4619      	mov	r1, r3
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f7fe ff83 	bl	800725e <USBD_SetClassConfig>
 8008358:	4603      	mov	r3, r0
 800835a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800835c:	7bfb      	ldrb	r3, [r7, #15]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00f      	beq.n	8008382 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008362:	6839      	ldr	r1, [r7, #0]
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f918 	bl	800859a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	b2db      	uxtb	r3, r3
 8008370:	4619      	mov	r1, r3
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f7fe ff8f 	bl	8007296 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2202      	movs	r2, #2
 800837c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008380:	e014      	b.n	80083ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 f9e7 	bl	8008756 <USBD_CtlSendStatus>
      break;
 8008388:	e010      	b.n	80083ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 f9e3 	bl	8008756 <USBD_CtlSendStatus>
      break;
 8008390:	e00c      	b.n	80083ac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008392:	6839      	ldr	r1, [r7, #0]
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 f900 	bl	800859a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800839a:	4b07      	ldr	r3, [pc, #28]	@ (80083b8 <USBD_SetConfig+0x150>)
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	4619      	mov	r1, r3
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f7fe ff78 	bl	8007296 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80083a6:	2303      	movs	r3, #3
 80083a8:	73fb      	strb	r3, [r7, #15]
      break;
 80083aa:	bf00      	nop
  }

  return ret;
 80083ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	200002d0 	.word	0x200002d0

080083bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	88db      	ldrh	r3, [r3, #6]
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d004      	beq.n	80083d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80083ce:	6839      	ldr	r1, [r7, #0]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 f8e2 	bl	800859a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80083d6:	e023      	b.n	8008420 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	dc02      	bgt.n	80083ea <USBD_GetConfig+0x2e>
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	dc03      	bgt.n	80083f0 <USBD_GetConfig+0x34>
 80083e8:	e015      	b.n	8008416 <USBD_GetConfig+0x5a>
 80083ea:	2b03      	cmp	r3, #3
 80083ec:	d00b      	beq.n	8008406 <USBD_GetConfig+0x4a>
 80083ee:	e012      	b.n	8008416 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	3308      	adds	r3, #8
 80083fa:	2201      	movs	r2, #1
 80083fc:	4619      	mov	r1, r3
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f948 	bl	8008694 <USBD_CtlSendData>
        break;
 8008404:	e00c      	b.n	8008420 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	3304      	adds	r3, #4
 800840a:	2201      	movs	r2, #1
 800840c:	4619      	mov	r1, r3
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f940 	bl	8008694 <USBD_CtlSendData>
        break;
 8008414:	e004      	b.n	8008420 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f8be 	bl	800859a <USBD_CtlError>
        break;
 800841e:	bf00      	nop
}
 8008420:	bf00      	nop
 8008422:	3708      	adds	r7, #8
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008438:	b2db      	uxtb	r3, r3
 800843a:	3b01      	subs	r3, #1
 800843c:	2b02      	cmp	r3, #2
 800843e:	d81e      	bhi.n	800847e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	88db      	ldrh	r3, [r3, #6]
 8008444:	2b02      	cmp	r3, #2
 8008446:	d004      	beq.n	8008452 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008448:	6839      	ldr	r1, [r7, #0]
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 f8a5 	bl	800859a <USBD_CtlError>
        break;
 8008450:	e01a      	b.n	8008488 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2201      	movs	r2, #1
 8008456:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800845e:	2b00      	cmp	r3, #0
 8008460:	d005      	beq.n	800846e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	f043 0202 	orr.w	r2, r3, #2
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	330c      	adds	r3, #12
 8008472:	2202      	movs	r2, #2
 8008474:	4619      	mov	r1, r3
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f90c 	bl	8008694 <USBD_CtlSendData>
      break;
 800847c:	e004      	b.n	8008488 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 f88a 	bl	800859a <USBD_CtlError>
      break;
 8008486:	bf00      	nop
  }
}
 8008488:	bf00      	nop
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	885b      	ldrh	r3, [r3, #2]
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d107      	bne.n	80084b2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2201      	movs	r2, #1
 80084a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f953 	bl	8008756 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80084b0:	e013      	b.n	80084da <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	885b      	ldrh	r3, [r3, #2]
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d10b      	bne.n	80084d2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	889b      	ldrh	r3, [r3, #4]
 80084be:	0a1b      	lsrs	r3, r3, #8
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	b2da      	uxtb	r2, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f943 	bl	8008756 <USBD_CtlSendStatus>
}
 80084d0:	e003      	b.n	80084da <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80084d2:	6839      	ldr	r1, [r7, #0]
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 f860 	bl	800859a <USBD_CtlError>
}
 80084da:	bf00      	nop
 80084dc:	3708      	adds	r7, #8
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b082      	sub	sp, #8
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
 80084ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	3b01      	subs	r3, #1
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d80b      	bhi.n	8008512 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	885b      	ldrh	r3, [r3, #2]
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d10c      	bne.n	800851c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 f923 	bl	8008756 <USBD_CtlSendStatus>
      }
      break;
 8008510:	e004      	b.n	800851c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008512:	6839      	ldr	r1, [r7, #0]
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 f840 	bl	800859a <USBD_CtlError>
      break;
 800851a:	e000      	b.n	800851e <USBD_ClrFeature+0x3c>
      break;
 800851c:	bf00      	nop
  }
}
 800851e:	bf00      	nop
 8008520:	3708      	adds	r7, #8
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}

08008526 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008526:	b580      	push	{r7, lr}
 8008528:	b084      	sub	sp, #16
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
 800852e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	781a      	ldrb	r2, [r3, #0]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	3301      	adds	r3, #1
 8008540:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	781a      	ldrb	r2, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	3301      	adds	r3, #1
 800854e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	f7ff fa3d 	bl	80079d0 <SWAPBYTE>
 8008556:	4603      	mov	r3, r0
 8008558:	461a      	mov	r2, r3
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	3301      	adds	r3, #1
 8008562:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	3301      	adds	r3, #1
 8008568:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f7ff fa30 	bl	80079d0 <SWAPBYTE>
 8008570:	4603      	mov	r3, r0
 8008572:	461a      	mov	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	3301      	adds	r3, #1
 800857c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	3301      	adds	r3, #1
 8008582:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f7ff fa23 	bl	80079d0 <SWAPBYTE>
 800858a:	4603      	mov	r3, r0
 800858c:	461a      	mov	r2, r3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	80da      	strh	r2, [r3, #6]
}
 8008592:	bf00      	nop
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b082      	sub	sp, #8
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
 80085a2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80085a4:	2180      	movs	r1, #128	@ 0x80
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 fd4a 	bl	8009040 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80085ac:	2100      	movs	r1, #0
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 fd46 	bl	8009040 <USBD_LL_StallEP>
}
 80085b4:	bf00      	nop
 80085b6:	3708      	adds	r7, #8
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b086      	sub	sp, #24
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80085c8:	2300      	movs	r3, #0
 80085ca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d042      	beq.n	8008658 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80085d6:	6938      	ldr	r0, [r7, #16]
 80085d8:	f000 f842 	bl	8008660 <USBD_GetLen>
 80085dc:	4603      	mov	r3, r0
 80085de:	3301      	adds	r3, #1
 80085e0:	005b      	lsls	r3, r3, #1
 80085e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085e6:	d808      	bhi.n	80085fa <USBD_GetString+0x3e>
 80085e8:	6938      	ldr	r0, [r7, #16]
 80085ea:	f000 f839 	bl	8008660 <USBD_GetLen>
 80085ee:	4603      	mov	r3, r0
 80085f0:	3301      	adds	r3, #1
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	005b      	lsls	r3, r3, #1
 80085f6:	b29a      	uxth	r2, r3
 80085f8:	e001      	b.n	80085fe <USBD_GetString+0x42>
 80085fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008602:	7dfb      	ldrb	r3, [r7, #23]
 8008604:	68ba      	ldr	r2, [r7, #8]
 8008606:	4413      	add	r3, r2
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	7812      	ldrb	r2, [r2, #0]
 800860c:	701a      	strb	r2, [r3, #0]
  idx++;
 800860e:	7dfb      	ldrb	r3, [r7, #23]
 8008610:	3301      	adds	r3, #1
 8008612:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008614:	7dfb      	ldrb	r3, [r7, #23]
 8008616:	68ba      	ldr	r2, [r7, #8]
 8008618:	4413      	add	r3, r2
 800861a:	2203      	movs	r2, #3
 800861c:	701a      	strb	r2, [r3, #0]
  idx++;
 800861e:	7dfb      	ldrb	r3, [r7, #23]
 8008620:	3301      	adds	r3, #1
 8008622:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008624:	e013      	b.n	800864e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008626:	7dfb      	ldrb	r3, [r7, #23]
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	4413      	add	r3, r2
 800862c:	693a      	ldr	r2, [r7, #16]
 800862e:	7812      	ldrb	r2, [r2, #0]
 8008630:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	3301      	adds	r3, #1
 8008636:	613b      	str	r3, [r7, #16]
    idx++;
 8008638:	7dfb      	ldrb	r3, [r7, #23]
 800863a:	3301      	adds	r3, #1
 800863c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800863e:	7dfb      	ldrb	r3, [r7, #23]
 8008640:	68ba      	ldr	r2, [r7, #8]
 8008642:	4413      	add	r3, r2
 8008644:	2200      	movs	r2, #0
 8008646:	701a      	strb	r2, [r3, #0]
    idx++;
 8008648:	7dfb      	ldrb	r3, [r7, #23]
 800864a:	3301      	adds	r3, #1
 800864c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1e7      	bne.n	8008626 <USBD_GetString+0x6a>
 8008656:	e000      	b.n	800865a <USBD_GetString+0x9e>
    return;
 8008658:	bf00      	nop
  }
}
 800865a:	3718      	adds	r7, #24
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008660:	b480      	push	{r7}
 8008662:	b085      	sub	sp, #20
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008668:	2300      	movs	r3, #0
 800866a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008670:	e005      	b.n	800867e <USBD_GetLen+0x1e>
  {
    len++;
 8008672:	7bfb      	ldrb	r3, [r7, #15]
 8008674:	3301      	adds	r3, #1
 8008676:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	3301      	adds	r3, #1
 800867c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1f5      	bne.n	8008672 <USBD_GetLen+0x12>
  }

  return len;
 8008686:	7bfb      	ldrb	r3, [r7, #15]
}
 8008688:	4618      	mov	r0, r3
 800868a:	3714      	adds	r7, #20
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2202      	movs	r2, #2
 80086a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	68ba      	ldr	r2, [r7, #8]
 80086b2:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	68ba      	ldr	r2, [r7, #8]
 80086be:	2100      	movs	r1, #0
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	f000 fd46 	bl	8009152 <USBD_LL_Transmit>

  return USBD_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	68ba      	ldr	r2, [r7, #8]
 80086e0:	2100      	movs	r1, #0
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	f000 fd35 	bl	8009152 <USBD_LL_Transmit>

  return USBD_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b084      	sub	sp, #16
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	60f8      	str	r0, [r7, #12]
 80086fa:	60b9      	str	r1, [r7, #8]
 80086fc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2203      	movs	r2, #3
 8008702:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	68ba      	ldr	r2, [r7, #8]
 8008712:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	68ba      	ldr	r2, [r7, #8]
 8008722:	2100      	movs	r1, #0
 8008724:	68f8      	ldr	r0, [r7, #12]
 8008726:	f000 fd35 	bl	8009194 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3710      	adds	r7, #16
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	68ba      	ldr	r2, [r7, #8]
 8008744:	2100      	movs	r1, #0
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f000 fd24 	bl	8009194 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b082      	sub	sp, #8
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2204      	movs	r2, #4
 8008762:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008766:	2300      	movs	r3, #0
 8008768:	2200      	movs	r2, #0
 800876a:	2100      	movs	r1, #0
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 fcf0 	bl	8009152 <USBD_LL_Transmit>

  return USBD_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	3708      	adds	r7, #8
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2205      	movs	r2, #5
 8008788:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800878c:	2300      	movs	r3, #0
 800878e:	2200      	movs	r2, #0
 8008790:	2100      	movs	r1, #0
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 fcfe 	bl	8009194 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3708      	adds	r7, #8
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
	...

080087a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80087a8:	2200      	movs	r2, #0
 80087aa:	4912      	ldr	r1, [pc, #72]	@ (80087f4 <MX_USB_DEVICE_Init+0x50>)
 80087ac:	4812      	ldr	r0, [pc, #72]	@ (80087f8 <MX_USB_DEVICE_Init+0x54>)
 80087ae:	f7fe fcd9 	bl	8007164 <USBD_Init>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d001      	beq.n	80087bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80087b8:	f7f8 f9e4 	bl	8000b84 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80087bc:	490f      	ldr	r1, [pc, #60]	@ (80087fc <MX_USB_DEVICE_Init+0x58>)
 80087be:	480e      	ldr	r0, [pc, #56]	@ (80087f8 <MX_USB_DEVICE_Init+0x54>)
 80087c0:	f7fe fd00 	bl	80071c4 <USBD_RegisterClass>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d001      	beq.n	80087ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80087ca:	f7f8 f9db 	bl	8000b84 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80087ce:	490c      	ldr	r1, [pc, #48]	@ (8008800 <MX_USB_DEVICE_Init+0x5c>)
 80087d0:	4809      	ldr	r0, [pc, #36]	@ (80087f8 <MX_USB_DEVICE_Init+0x54>)
 80087d2:	f7fe fcad 	bl	8007130 <USBD_CUSTOM_HID_RegisterInterface>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d001      	beq.n	80087e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80087dc:	f7f8 f9d2 	bl	8000b84 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80087e0:	4805      	ldr	r0, [pc, #20]	@ (80087f8 <MX_USB_DEVICE_Init+0x54>)
 80087e2:	f7fe fd25 	bl	8007230 <USBD_Start>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d001      	beq.n	80087f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80087ec:	f7f8 f9ca 	bl	8000b84 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80087f0:	bf00      	nop
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	200000d0 	.word	0x200000d0
 80087f8:	200002d4 	.word	0x200002d4
 80087fc:	2000000c 	.word	0x2000000c
 8008800:	200000c0 	.word	0x200000c0

08008804 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8008804:	b480      	push	{r7}
 8008806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008808:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800880a:	4618      	mov	r0, r3
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8008814:	b480      	push	{r7}
 8008816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8008818:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800881a:	4618      	mov	r0, r3
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	4603      	mov	r3, r0
 800882c:	460a      	mov	r2, r1
 800882e:	71fb      	strb	r3, [r7, #7]
 8008830:	4613      	mov	r3, r2
 8008832:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8008834:	4806      	ldr	r0, [pc, #24]	@ (8008850 <CUSTOM_HID_OutEvent_FS+0x2c>)
 8008836:	f7fe fc19 	bl	800706c <USBD_CUSTOM_HID_ReceivePacket>
 800883a:	4603      	mov	r3, r0
 800883c:	2b00      	cmp	r3, #0
 800883e:	d002      	beq.n	8008846 <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 8008840:	f04f 33ff 	mov.w	r3, #4294967295
 8008844:	e000      	b.n	8008848 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 8008846:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008848:	4618      	mov	r0, r3
 800884a:	3708      	adds	r7, #8
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	200002d4 	.word	0x200002d4

08008854 <apply_deadzone>:
//    USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, len);
//}

#define DEAD_ZONE 200

uint16_t apply_deadzone(uint16_t raw) {
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	4603      	mov	r3, r0
 800885c:	80fb      	strh	r3, [r7, #6]
    if (raw > 2048 - DEAD_ZONE && raw < 2048 + DEAD_ZONE)
 800885e:	88fb      	ldrh	r3, [r7, #6]
 8008860:	f5b3 6fe7 	cmp.w	r3, #1848	@ 0x738
 8008864:	d907      	bls.n	8008876 <apply_deadzone+0x22>
 8008866:	88fb      	ldrh	r3, [r7, #6]
 8008868:	f640 02c7 	movw	r2, #2247	@ 0x8c7
 800886c:	4293      	cmp	r3, r2
 800886e:	d802      	bhi.n	8008876 <apply_deadzone+0x22>
        return 2048;
 8008870:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008874:	e000      	b.n	8008878 <apply_deadzone+0x24>
    return raw;
 8008876:	88fb      	ldrh	r3, [r7, #6]
}
 8008878:	4618      	mov	r0, r3
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <adc_to_hid_u8>:

uint8_t adc_to_hid_u8(uint16_t raw) {
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
 800888a:	4603      	mov	r3, r0
 800888c:	80fb      	strh	r3, [r7, #6]
    int32_t val = raw - 2048;
 800888e:	88fb      	ldrh	r3, [r7, #6]
 8008890:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8008894:	60fb      	str	r3, [r7, #12]
    val = (val * 127) / 2048;
 8008896:	68fa      	ldr	r2, [r7, #12]
 8008898:	4613      	mov	r3, r2
 800889a:	01db      	lsls	r3, r3, #7
 800889c:	1a9b      	subs	r3, r3, r2
 800889e:	2b00      	cmp	r3, #0
 80088a0:	da01      	bge.n	80088a6 <adc_to_hid_u8+0x22>
 80088a2:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80088a6:	12db      	asrs	r3, r3, #11
 80088a8:	60fb      	str	r3, [r7, #12]

    if (val > 127) val = 127;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80088ae:	dd01      	ble.n	80088b4 <adc_to_hid_u8+0x30>
 80088b0:	237f      	movs	r3, #127	@ 0x7f
 80088b2:	60fb      	str	r3, [r7, #12]
    if (val < -128) val = -128;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 80088ba:	da02      	bge.n	80088c2 <adc_to_hid_u8+0x3e>
 80088bc:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 80088c0:	60fb      	str	r3, [r7, #12]

    return (uint8_t)(val + 128);  // Shift to 0–255 range
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	3b80      	subs	r3, #128	@ 0x80
 80088c8:	b2db      	uxtb	r3, r3
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3714      	adds	r7, #20
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr
	...

080088d8 <CUSTOM_HID_SendReport_FS>:



USBD_StatusTypeDef CUSTOM_HID_SendReport_FS(uint8_t *reportPtr)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  return USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, reportPtr, 8);
 80088e0:	2208      	movs	r2, #8
 80088e2:	6879      	ldr	r1, [r7, #4]
 80088e4:	4803      	ldr	r0, [pc, #12]	@ (80088f4 <CUSTOM_HID_SendReport_FS+0x1c>)
 80088e6:	f7fe fab3 	bl	8006e50 <USBD_CUSTOM_HID_SendReport>
 80088ea:	4603      	mov	r3, r0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	200002d4 	.word	0x200002d4

080088f8 <Joystick_SendReport>:

/**
  * @brief  Build joystick report in CustomHID_Buffer, then send it
  */
void Joystick_SendReport(void)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
    uint16_t buttons = 0;
 80088fe:	2300      	movs	r3, #0
 8008900:	81fb      	strh	r3, [r7, #14]

    // Active-low buttons on PB2–PB9
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) buttons |= 1 << 2; // A  // 2 y
 8008902:	2104      	movs	r1, #4
 8008904:	484e      	ldr	r0, [pc, #312]	@ (8008a40 <Joystick_SendReport+0x148>)
 8008906:	f7f9 ff0b 	bl	8002720 <HAL_GPIO_ReadPin>
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d103      	bne.n	8008918 <Joystick_SendReport+0x20>
 8008910:	89fb      	ldrh	r3, [r7, #14]
 8008912:	f043 0304 	orr.w	r3, r3, #4
 8008916:	81fb      	strh	r3, [r7, #14]
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) buttons |= 1 << 3; // B  // 3 x
 8008918:	2108      	movs	r1, #8
 800891a:	4849      	ldr	r0, [pc, #292]	@ (8008a40 <Joystick_SendReport+0x148>)
 800891c:	f7f9 ff00 	bl	8002720 <HAL_GPIO_ReadPin>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d103      	bne.n	800892e <Joystick_SendReport+0x36>
 8008926:	89fb      	ldrh	r3, [r7, #14]
 8008928:	f043 0308 	orr.w	r3, r3, #8
 800892c:	81fb      	strh	r3, [r7, #14]
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) buttons |= 1 << 0; // X  // 0 A
 800892e:	2110      	movs	r1, #16
 8008930:	4843      	ldr	r0, [pc, #268]	@ (8008a40 <Joystick_SendReport+0x148>)
 8008932:	f7f9 fef5 	bl	8002720 <HAL_GPIO_ReadPin>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d103      	bne.n	8008944 <Joystick_SendReport+0x4c>
 800893c:	89fb      	ldrh	r3, [r7, #14]
 800893e:	f043 0301 	orr.w	r3, r3, #1
 8008942:	81fb      	strh	r3, [r7, #14]
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_RESET) buttons |= 1 << 1; // Y  //1  B
 8008944:	2120      	movs	r1, #32
 8008946:	483e      	ldr	r0, [pc, #248]	@ (8008a40 <Joystick_SendReport+0x148>)
 8008948:	f7f9 feea 	bl	8002720 <HAL_GPIO_ReadPin>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d103      	bne.n	800895a <Joystick_SendReport+0x62>
 8008952:	89fb      	ldrh	r3, [r7, #14]
 8008954:	f043 0302 	orr.w	r3, r3, #2
 8008958:	81fb      	strh	r3, [r7, #14]

    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) buttons |= 1 << 9; //    // button 9 is option button
 800895a:	2101      	movs	r1, #1
 800895c:	4839      	ldr	r0, [pc, #228]	@ (8008a44 <Joystick_SendReport+0x14c>)
 800895e:	f7f9 fedf 	bl	8002720 <HAL_GPIO_ReadPin>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d103      	bne.n	8008970 <Joystick_SendReport+0x78>
 8008968:	89fb      	ldrh	r3, [r7, #14]
 800896a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800896e:	81fb      	strh	r3, [r7, #14]
//	    optionButtonPressed = 0; // Reset after sending
//	}



    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == GPIO_PIN_RESET) buttons |= 1 << 14; // D-Left
 8008970:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008974:	4832      	ldr	r0, [pc, #200]	@ (8008a40 <Joystick_SendReport+0x148>)
 8008976:	f7f9 fed3 	bl	8002720 <HAL_GPIO_ReadPin>
 800897a:	4603      	mov	r3, r0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d103      	bne.n	8008988 <Joystick_SendReport+0x90>
 8008980:	89fb      	ldrh	r3, [r7, #14]
 8008982:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008986:	81fb      	strh	r3, [r7, #14]
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == GPIO_PIN_RESET) buttons |= 1 << 15; // D-Right
 8008988:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800898c:	482c      	ldr	r0, [pc, #176]	@ (8008a40 <Joystick_SendReport+0x148>)
 800898e:	f7f9 fec7 	bl	8002720 <HAL_GPIO_ReadPin>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d105      	bne.n	80089a4 <Joystick_SendReport+0xac>
 8008998:	89fb      	ldrh	r3, [r7, #14]
 800899a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800899e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089a2:	81fb      	strh	r3, [r7, #14]

    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_RESET) buttons |= 1 << 12; // D-Up
 80089a4:	2140      	movs	r1, #64	@ 0x40
 80089a6:	4826      	ldr	r0, [pc, #152]	@ (8008a40 <Joystick_SendReport+0x148>)
 80089a8:	f7f9 feba 	bl	8002720 <HAL_GPIO_ReadPin>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d103      	bne.n	80089ba <Joystick_SendReport+0xc2>
 80089b2:	89fb      	ldrh	r3, [r7, #14]
 80089b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80089b8:	81fb      	strh	r3, [r7, #14]
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_RESET) buttons |= 1 << 13; // D-Down
 80089ba:	2180      	movs	r1, #128	@ 0x80
 80089bc:	4820      	ldr	r0, [pc, #128]	@ (8008a40 <Joystick_SendReport+0x148>)
 80089be:	f7f9 feaf 	bl	8002720 <HAL_GPIO_ReadPin>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d103      	bne.n	80089d0 <Joystick_SendReport+0xd8>
 80089c8:	89fb      	ldrh	r3, [r7, #14]
 80089ca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80089ce:	81fb      	strh	r3, [r7, #14]

    CustomHID_Buffer[0] = buttons & 0xFF;
 80089d0:	89fb      	ldrh	r3, [r7, #14]
 80089d2:	b2da      	uxtb	r2, r3
 80089d4:	4b1c      	ldr	r3, [pc, #112]	@ (8008a48 <Joystick_SendReport+0x150>)
 80089d6:	701a      	strb	r2, [r3, #0]
    CustomHID_Buffer[1] = (buttons >> 8) & 0xFF;
 80089d8:	89fb      	ldrh	r3, [r7, #14]
 80089da:	0a1b      	lsrs	r3, r3, #8
 80089dc:	b29b      	uxth	r3, r3
 80089de:	b2da      	uxtb	r2, r3
 80089e0:	4b19      	ldr	r3, [pc, #100]	@ (8008a48 <Joystick_SendReport+0x150>)
 80089e2:	705a      	strb	r2, [r3, #1]

    extern uint16_t adcValues[6]; // assuming [0]=X1, [1]=Y1, [2]=X2, [3]=Y2, [4]=Z, [5]=Rz

    uint8_t joystick_axes[6];
    for (int i = 0; i < 6; i++) {
 80089e4:	2300      	movs	r3, #0
 80089e6:	60bb      	str	r3, [r7, #8]
 80089e8:	e014      	b.n	8008a14 <Joystick_SendReport+0x11c>
        joystick_axes[i] = adc_to_hid_u8(apply_deadzone(adcValues[i]));
 80089ea:	4a18      	ldr	r2, [pc, #96]	@ (8008a4c <Joystick_SendReport+0x154>)
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7ff ff2e 	bl	8008854 <apply_deadzone>
 80089f8:	4603      	mov	r3, r0
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7ff ff42 	bl	8008884 <adc_to_hid_u8>
 8008a00:	4603      	mov	r3, r0
 8008a02:	4619      	mov	r1, r3
 8008a04:	463a      	mov	r2, r7
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	4413      	add	r3, r2
 8008a0a:	460a      	mov	r2, r1
 8008a0c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 6; i++) {
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	3301      	adds	r3, #1
 8008a12:	60bb      	str	r3, [r7, #8]
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	2b05      	cmp	r3, #5
 8008a18:	dde7      	ble.n	80089ea <Joystick_SendReport+0xf2>
    }


    CustomHID_Buffer[2] = joystick_axes[0]; // X
 8008a1a:	783a      	ldrb	r2, [r7, #0]
 8008a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8008a48 <Joystick_SendReport+0x150>)
 8008a1e:	709a      	strb	r2, [r3, #2]
    CustomHID_Buffer[3] = joystick_axes[1]; // Y
 8008a20:	787a      	ldrb	r2, [r7, #1]
 8008a22:	4b09      	ldr	r3, [pc, #36]	@ (8008a48 <Joystick_SendReport+0x150>)
 8008a24:	70da      	strb	r2, [r3, #3]
    CustomHID_Buffer[4] = joystick_axes[2]; // Rx
 8008a26:	78ba      	ldrb	r2, [r7, #2]
 8008a28:	4b07      	ldr	r3, [pc, #28]	@ (8008a48 <Joystick_SendReport+0x150>)
 8008a2a:	711a      	strb	r2, [r3, #4]
    CustomHID_Buffer[5] = joystick_axes[3]; // Ry
 8008a2c:	78fa      	ldrb	r2, [r7, #3]
 8008a2e:	4b06      	ldr	r3, [pc, #24]	@ (8008a48 <Joystick_SendReport+0x150>)
 8008a30:	715a      	strb	r2, [r3, #5]
//    CustomHID_Buffer[6] = joystick_axes[4]; // Z
//    CustomHID_Buffer[7] = joystick_axes[5]; // Rz


    // Send 8-byte report to host
    CUSTOM_HID_SendReport_FS(CustomHID_Buffer);
 8008a32:	4805      	ldr	r0, [pc, #20]	@ (8008a48 <Joystick_SendReport+0x150>)
 8008a34:	f7ff ff50 	bl	80088d8 <CUSTOM_HID_SendReport_FS>
}
 8008a38:	bf00      	nop
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	40020400 	.word	0x40020400
 8008a44:	40020000 	.word	0x40020000
 8008a48:	200005b0 	.word	0x200005b0
 8008a4c:	200002bc 	.word	0x200002bc

08008a50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b083      	sub	sp, #12
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	4603      	mov	r3, r0
 8008a58:	6039      	str	r1, [r7, #0]
 8008a5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	2212      	movs	r2, #18
 8008a60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008a62:	4b03      	ldr	r3, [pc, #12]	@ (8008a70 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr
 8008a70:	200000ec 	.word	0x200000ec

08008a74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	6039      	str	r1, [r7, #0]
 8008a7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	2204      	movs	r2, #4
 8008a84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008a86:	4b03      	ldr	r3, [pc, #12]	@ (8008a94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr
 8008a94:	20000100 	.word	0x20000100

08008a98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	6039      	str	r1, [r7, #0]
 8008aa2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008aa4:	79fb      	ldrb	r3, [r7, #7]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d105      	bne.n	8008ab6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008aaa:	683a      	ldr	r2, [r7, #0]
 8008aac:	4907      	ldr	r1, [pc, #28]	@ (8008acc <USBD_FS_ProductStrDescriptor+0x34>)
 8008aae:	4808      	ldr	r0, [pc, #32]	@ (8008ad0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ab0:	f7ff fd84 	bl	80085bc <USBD_GetString>
 8008ab4:	e004      	b.n	8008ac0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ab6:	683a      	ldr	r2, [r7, #0]
 8008ab8:	4904      	ldr	r1, [pc, #16]	@ (8008acc <USBD_FS_ProductStrDescriptor+0x34>)
 8008aba:	4805      	ldr	r0, [pc, #20]	@ (8008ad0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008abc:	f7ff fd7e 	bl	80085bc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ac0:	4b02      	ldr	r3, [pc, #8]	@ (8008acc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	200005e8 	.word	0x200005e8
 8008ad0:	080092d0 	.word	0x080092d0

08008ad4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	4603      	mov	r3, r0
 8008adc:	6039      	str	r1, [r7, #0]
 8008ade:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ae0:	683a      	ldr	r2, [r7, #0]
 8008ae2:	4904      	ldr	r1, [pc, #16]	@ (8008af4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008ae4:	4804      	ldr	r0, [pc, #16]	@ (8008af8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008ae6:	f7ff fd69 	bl	80085bc <USBD_GetString>
  return USBD_StrDesc;
 8008aea:	4b02      	ldr	r3, [pc, #8]	@ (8008af4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3708      	adds	r7, #8
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	200005e8 	.word	0x200005e8
 8008af8:	080092f0 	.word	0x080092f0

08008afc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	4603      	mov	r3, r0
 8008b04:	6039      	str	r1, [r7, #0]
 8008b06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	221a      	movs	r2, #26
 8008b0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b0e:	f000 f843 	bl	8008b98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008b12:	4b02      	ldr	r3, [pc, #8]	@ (8008b1c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3708      	adds	r7, #8
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}
 8008b1c:	20000104 	.word	0x20000104

08008b20 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	4603      	mov	r3, r0
 8008b28:	6039      	str	r1, [r7, #0]
 8008b2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008b2c:	79fb      	ldrb	r3, [r7, #7]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d105      	bne.n	8008b3e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b32:	683a      	ldr	r2, [r7, #0]
 8008b34:	4907      	ldr	r1, [pc, #28]	@ (8008b54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b36:	4808      	ldr	r0, [pc, #32]	@ (8008b58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b38:	f7ff fd40 	bl	80085bc <USBD_GetString>
 8008b3c:	e004      	b.n	8008b48 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b3e:	683a      	ldr	r2, [r7, #0]
 8008b40:	4904      	ldr	r1, [pc, #16]	@ (8008b54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b42:	4805      	ldr	r0, [pc, #20]	@ (8008b58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b44:	f7ff fd3a 	bl	80085bc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b48:	4b02      	ldr	r3, [pc, #8]	@ (8008b54 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3708      	adds	r7, #8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	200005e8 	.word	0x200005e8
 8008b58:	080092fc 	.word	0x080092fc

08008b5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	4603      	mov	r3, r0
 8008b64:	6039      	str	r1, [r7, #0]
 8008b66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b68:	79fb      	ldrb	r3, [r7, #7]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d105      	bne.n	8008b7a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b6e:	683a      	ldr	r2, [r7, #0]
 8008b70:	4907      	ldr	r1, [pc, #28]	@ (8008b90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b72:	4808      	ldr	r0, [pc, #32]	@ (8008b94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b74:	f7ff fd22 	bl	80085bc <USBD_GetString>
 8008b78:	e004      	b.n	8008b84 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b7a:	683a      	ldr	r2, [r7, #0]
 8008b7c:	4904      	ldr	r1, [pc, #16]	@ (8008b90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b7e:	4805      	ldr	r0, [pc, #20]	@ (8008b94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b80:	f7ff fd1c 	bl	80085bc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b84:	4b02      	ldr	r3, [pc, #8]	@ (8008b90 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3708      	adds	r7, #8
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	200005e8 	.word	0x200005e8
 8008b94:	08009310 	.word	0x08009310

08008b98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8008bdc <Get_SerialNum+0x44>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8008be0 <Get_SerialNum+0x48>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008baa:	4b0e      	ldr	r3, [pc, #56]	@ (8008be4 <Get_SerialNum+0x4c>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008bb0:	68fa      	ldr	r2, [r7, #12]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d009      	beq.n	8008bd2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008bbe:	2208      	movs	r2, #8
 8008bc0:	4909      	ldr	r1, [pc, #36]	@ (8008be8 <Get_SerialNum+0x50>)
 8008bc2:	68f8      	ldr	r0, [r7, #12]
 8008bc4:	f000 f814 	bl	8008bf0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008bc8:	2204      	movs	r2, #4
 8008bca:	4908      	ldr	r1, [pc, #32]	@ (8008bec <Get_SerialNum+0x54>)
 8008bcc:	68b8      	ldr	r0, [r7, #8]
 8008bce:	f000 f80f 	bl	8008bf0 <IntToUnicode>
  }
}
 8008bd2:	bf00      	nop
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	1fff7a10 	.word	0x1fff7a10
 8008be0:	1fff7a14 	.word	0x1fff7a14
 8008be4:	1fff7a18 	.word	0x1fff7a18
 8008be8:	20000106 	.word	0x20000106
 8008bec:	20000116 	.word	0x20000116

08008bf0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b087      	sub	sp, #28
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c02:	2300      	movs	r3, #0
 8008c04:	75fb      	strb	r3, [r7, #23]
 8008c06:	e027      	b.n	8008c58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	0f1b      	lsrs	r3, r3, #28
 8008c0c:	2b09      	cmp	r3, #9
 8008c0e:	d80b      	bhi.n	8008c28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	0f1b      	lsrs	r3, r3, #28
 8008c14:	b2da      	uxtb	r2, r3
 8008c16:	7dfb      	ldrb	r3, [r7, #23]
 8008c18:	005b      	lsls	r3, r3, #1
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	440b      	add	r3, r1
 8008c20:	3230      	adds	r2, #48	@ 0x30
 8008c22:	b2d2      	uxtb	r2, r2
 8008c24:	701a      	strb	r2, [r3, #0]
 8008c26:	e00a      	b.n	8008c3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	0f1b      	lsrs	r3, r3, #28
 8008c2c:	b2da      	uxtb	r2, r3
 8008c2e:	7dfb      	ldrb	r3, [r7, #23]
 8008c30:	005b      	lsls	r3, r3, #1
 8008c32:	4619      	mov	r1, r3
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	440b      	add	r3, r1
 8008c38:	3237      	adds	r2, #55	@ 0x37
 8008c3a:	b2d2      	uxtb	r2, r2
 8008c3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	011b      	lsls	r3, r3, #4
 8008c42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008c44:	7dfb      	ldrb	r3, [r7, #23]
 8008c46:	005b      	lsls	r3, r3, #1
 8008c48:	3301      	adds	r3, #1
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	2200      	movs	r2, #0
 8008c50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008c52:	7dfb      	ldrb	r3, [r7, #23]
 8008c54:	3301      	adds	r3, #1
 8008c56:	75fb      	strb	r3, [r7, #23]
 8008c58:	7dfa      	ldrb	r2, [r7, #23]
 8008c5a:	79fb      	ldrb	r3, [r7, #7]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d3d3      	bcc.n	8008c08 <IntToUnicode+0x18>
  }
}
 8008c60:	bf00      	nop
 8008c62:	bf00      	nop
 8008c64:	371c      	adds	r7, #28
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
	...

08008c70 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b08a      	sub	sp, #40	@ 0x28
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c78:	f107 0314 	add.w	r3, r7, #20
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	601a      	str	r2, [r3, #0]
 8008c80:	605a      	str	r2, [r3, #4]
 8008c82:	609a      	str	r2, [r3, #8]
 8008c84:	60da      	str	r2, [r3, #12]
 8008c86:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c90:	d13a      	bne.n	8008d08 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c92:	2300      	movs	r3, #0
 8008c94:	613b      	str	r3, [r7, #16]
 8008c96:	4b1e      	ldr	r3, [pc, #120]	@ (8008d10 <HAL_PCD_MspInit+0xa0>)
 8008c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c9a:	4a1d      	ldr	r2, [pc, #116]	@ (8008d10 <HAL_PCD_MspInit+0xa0>)
 8008c9c:	f043 0301 	orr.w	r3, r3, #1
 8008ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8008ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8008d10 <HAL_PCD_MspInit+0xa0>)
 8008ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ca6:	f003 0301 	and.w	r3, r3, #1
 8008caa:	613b      	str	r3, [r7, #16]
 8008cac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008cae:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cb4:	2302      	movs	r3, #2
 8008cb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008cbc:	2303      	movs	r3, #3
 8008cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008cc0:	230a      	movs	r3, #10
 8008cc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cc4:	f107 0314 	add.w	r3, r7, #20
 8008cc8:	4619      	mov	r1, r3
 8008cca:	4812      	ldr	r0, [pc, #72]	@ (8008d14 <HAL_PCD_MspInit+0xa4>)
 8008ccc:	f7f9 fba4 	bl	8002418 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8008d10 <HAL_PCD_MspInit+0xa0>)
 8008cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cd4:	4a0e      	ldr	r2, [pc, #56]	@ (8008d10 <HAL_PCD_MspInit+0xa0>)
 8008cd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cda:	6353      	str	r3, [r2, #52]	@ 0x34
 8008cdc:	2300      	movs	r3, #0
 8008cde:	60fb      	str	r3, [r7, #12]
 8008ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8008d10 <HAL_PCD_MspInit+0xa0>)
 8008ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ce4:	4a0a      	ldr	r2, [pc, #40]	@ (8008d10 <HAL_PCD_MspInit+0xa0>)
 8008ce6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008cea:	6453      	str	r3, [r2, #68]	@ 0x44
 8008cec:	4b08      	ldr	r3, [pc, #32]	@ (8008d10 <HAL_PCD_MspInit+0xa0>)
 8008cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cf0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008cf4:	60fb      	str	r3, [r7, #12]
 8008cf6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	2100      	movs	r1, #0
 8008cfc:	2043      	movs	r0, #67	@ 0x43
 8008cfe:	f7f8 ffe4 	bl	8001cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008d02:	2043      	movs	r0, #67	@ 0x43
 8008d04:	f7f8 fffd 	bl	8001d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008d08:	bf00      	nop
 8008d0a:	3728      	adds	r7, #40	@ 0x28
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	40023800 	.word	0x40023800
 8008d14:	40020000 	.word	0x40020000

08008d18 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	4610      	mov	r0, r2
 8008d30:	f7fe facb 	bl	80072ca <USBD_LL_SetupStage>
}
 8008d34:	bf00      	nop
 8008d36:	3708      	adds	r7, #8
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	460b      	mov	r3, r1
 8008d46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008d4e:	78fa      	ldrb	r2, [r7, #3]
 8008d50:	6879      	ldr	r1, [r7, #4]
 8008d52:	4613      	mov	r3, r2
 8008d54:	00db      	lsls	r3, r3, #3
 8008d56:	4413      	add	r3, r2
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	440b      	add	r3, r1
 8008d5c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	78fb      	ldrb	r3, [r7, #3]
 8008d64:	4619      	mov	r1, r3
 8008d66:	f7fe fb05 	bl	8007374 <USBD_LL_DataOutStage>
}
 8008d6a:	bf00      	nop
 8008d6c:	3708      	adds	r7, #8
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}

08008d72 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d72:	b580      	push	{r7, lr}
 8008d74:	b082      	sub	sp, #8
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008d84:	78fa      	ldrb	r2, [r7, #3]
 8008d86:	6879      	ldr	r1, [r7, #4]
 8008d88:	4613      	mov	r3, r2
 8008d8a:	00db      	lsls	r3, r3, #3
 8008d8c:	4413      	add	r3, r2
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	440b      	add	r3, r1
 8008d92:	3320      	adds	r3, #32
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	78fb      	ldrb	r3, [r7, #3]
 8008d98:	4619      	mov	r1, r3
 8008d9a:	f7fe fba7 	bl	80074ec <USBD_LL_DataInStage>
}
 8008d9e:	bf00      	nop
 8008da0:	3708      	adds	r7, #8
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b082      	sub	sp, #8
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7fe fceb 	bl	8007790 <USBD_LL_SOF>
}
 8008dba:	bf00      	nop
 8008dbc:	3708      	adds	r7, #8
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b084      	sub	sp, #16
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	79db      	ldrb	r3, [r3, #7]
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d001      	beq.n	8008dda <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008dd6:	f7f7 fed5 	bl	8000b84 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008de0:	7bfa      	ldrb	r2, [r7, #15]
 8008de2:	4611      	mov	r1, r2
 8008de4:	4618      	mov	r0, r3
 8008de6:	f7fe fc8f 	bl	8007708 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7fe fc36 	bl	8007662 <USBD_LL_Reset>
}
 8008df6:	bf00      	nop
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
	...

08008e00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7fe fc8a 	bl	8007728 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	6812      	ldr	r2, [r2, #0]
 8008e22:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008e26:	f043 0301 	orr.w	r3, r3, #1
 8008e2a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	7adb      	ldrb	r3, [r3, #11]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d005      	beq.n	8008e40 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e34:	4b04      	ldr	r3, [pc, #16]	@ (8008e48 <HAL_PCD_SuspendCallback+0x48>)
 8008e36:	691b      	ldr	r3, [r3, #16]
 8008e38:	4a03      	ldr	r2, [pc, #12]	@ (8008e48 <HAL_PCD_SuspendCallback+0x48>)
 8008e3a:	f043 0306 	orr.w	r3, r3, #6
 8008e3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008e40:	bf00      	nop
 8008e42:	3708      	adds	r7, #8
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	e000ed00 	.word	0xe000ed00

08008e4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7fe fc80 	bl	8007760 <USBD_LL_Resume>
}
 8008e60:	bf00      	nop
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	460b      	mov	r3, r1
 8008e72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e7a:	78fa      	ldrb	r2, [r7, #3]
 8008e7c:	4611      	mov	r1, r2
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7fe fcd8 	bl	8007834 <USBD_LL_IsoOUTIncomplete>
}
 8008e84:	bf00      	nop
 8008e86:	3708      	adds	r7, #8
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	460b      	mov	r3, r1
 8008e96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e9e:	78fa      	ldrb	r2, [r7, #3]
 8008ea0:	4611      	mov	r1, r2
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7fe fc94 	bl	80077d0 <USBD_LL_IsoINIncomplete>
}
 8008ea8:	bf00      	nop
 8008eaa:	3708      	adds	r7, #8
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7fe fcea 	bl	8007898 <USBD_LL_DevConnected>
}
 8008ec4:	bf00      	nop
 8008ec6:	3708      	adds	r7, #8
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7fe fce7 	bl	80078ae <USBD_LL_DevDisconnected>
}
 8008ee0:	bf00      	nop
 8008ee2:	3708      	adds	r7, #8
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d13c      	bne.n	8008f72 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008ef8:	4a20      	ldr	r2, [pc, #128]	@ (8008f7c <USBD_LL_Init+0x94>)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a1e      	ldr	r2, [pc, #120]	@ (8008f7c <USBD_LL_Init+0x94>)
 8008f04:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f08:	4b1c      	ldr	r3, [pc, #112]	@ (8008f7c <USBD_LL_Init+0x94>)
 8008f0a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008f0e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008f10:	4b1a      	ldr	r3, [pc, #104]	@ (8008f7c <USBD_LL_Init+0x94>)
 8008f12:	2204      	movs	r2, #4
 8008f14:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008f16:	4b19      	ldr	r3, [pc, #100]	@ (8008f7c <USBD_LL_Init+0x94>)
 8008f18:	2202      	movs	r2, #2
 8008f1a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f1c:	4b17      	ldr	r3, [pc, #92]	@ (8008f7c <USBD_LL_Init+0x94>)
 8008f1e:	2200      	movs	r2, #0
 8008f20:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008f22:	4b16      	ldr	r3, [pc, #88]	@ (8008f7c <USBD_LL_Init+0x94>)
 8008f24:	2202      	movs	r2, #2
 8008f26:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8008f28:	4b14      	ldr	r3, [pc, #80]	@ (8008f7c <USBD_LL_Init+0x94>)
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008f2e:	4b13      	ldr	r3, [pc, #76]	@ (8008f7c <USBD_LL_Init+0x94>)
 8008f30:	2200      	movs	r2, #0
 8008f32:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008f34:	4b11      	ldr	r3, [pc, #68]	@ (8008f7c <USBD_LL_Init+0x94>)
 8008f36:	2200      	movs	r2, #0
 8008f38:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008f3a:	4b10      	ldr	r3, [pc, #64]	@ (8008f7c <USBD_LL_Init+0x94>)
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008f40:	4b0e      	ldr	r3, [pc, #56]	@ (8008f7c <USBD_LL_Init+0x94>)
 8008f42:	2200      	movs	r2, #0
 8008f44:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008f46:	480d      	ldr	r0, [pc, #52]	@ (8008f7c <USBD_LL_Init+0x94>)
 8008f48:	f7f9 fc59 	bl	80027fe <HAL_PCD_Init>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d001      	beq.n	8008f56 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008f52:	f7f7 fe17 	bl	8000b84 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008f56:	2180      	movs	r1, #128	@ 0x80
 8008f58:	4808      	ldr	r0, [pc, #32]	@ (8008f7c <USBD_LL_Init+0x94>)
 8008f5a:	f7fa fe6e 	bl	8003c3a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008f5e:	2240      	movs	r2, #64	@ 0x40
 8008f60:	2100      	movs	r1, #0
 8008f62:	4806      	ldr	r0, [pc, #24]	@ (8008f7c <USBD_LL_Init+0x94>)
 8008f64:	f7fa fe22 	bl	8003bac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008f68:	2280      	movs	r2, #128	@ 0x80
 8008f6a:	2101      	movs	r1, #1
 8008f6c:	4803      	ldr	r0, [pc, #12]	@ (8008f7c <USBD_LL_Init+0x94>)
 8008f6e:	f7fa fe1d 	bl	8003bac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	200007e8 	.word	0x200007e8

08008f80 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7f9 fd40 	bl	8002a1c <HAL_PCD_Start>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fa0:	7bfb      	ldrb	r3, [r7, #15]
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f000 f930 	bl	8009208 <USBD_Get_USB_Status>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fac:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b084      	sub	sp, #16
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
 8008fbe:	4608      	mov	r0, r1
 8008fc0:	4611      	mov	r1, r2
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	70fb      	strb	r3, [r7, #3]
 8008fc8:	460b      	mov	r3, r1
 8008fca:	70bb      	strb	r3, [r7, #2]
 8008fcc:	4613      	mov	r3, r2
 8008fce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008fde:	78bb      	ldrb	r3, [r7, #2]
 8008fe0:	883a      	ldrh	r2, [r7, #0]
 8008fe2:	78f9      	ldrb	r1, [r7, #3]
 8008fe4:	f7fa fa14 	bl	8003410 <HAL_PCD_EP_Open>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fec:	7bfb      	ldrb	r3, [r7, #15]
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 f90a 	bl	8009208 <USBD_Get_USB_Status>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ff8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009002:	b580      	push	{r7, lr}
 8009004:	b084      	sub	sp, #16
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
 800900a:	460b      	mov	r3, r1
 800900c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800900e:	2300      	movs	r3, #0
 8009010:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009012:	2300      	movs	r3, #0
 8009014:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800901c:	78fa      	ldrb	r2, [r7, #3]
 800901e:	4611      	mov	r1, r2
 8009020:	4618      	mov	r0, r3
 8009022:	f7fa fa5f 	bl	80034e4 <HAL_PCD_EP_Close>
 8009026:	4603      	mov	r3, r0
 8009028:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800902a:	7bfb      	ldrb	r3, [r7, #15]
 800902c:	4618      	mov	r0, r3
 800902e:	f000 f8eb 	bl	8009208 <USBD_Get_USB_Status>
 8009032:	4603      	mov	r3, r0
 8009034:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009036:	7bbb      	ldrb	r3, [r7, #14]
}
 8009038:	4618      	mov	r0, r3
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	460b      	mov	r3, r1
 800904a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800904c:	2300      	movs	r3, #0
 800904e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009050:	2300      	movs	r3, #0
 8009052:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800905a:	78fa      	ldrb	r2, [r7, #3]
 800905c:	4611      	mov	r1, r2
 800905e:	4618      	mov	r0, r3
 8009060:	f7fa faff 	bl	8003662 <HAL_PCD_EP_SetStall>
 8009064:	4603      	mov	r3, r0
 8009066:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009068:	7bfb      	ldrb	r3, [r7, #15]
 800906a:	4618      	mov	r0, r3
 800906c:	f000 f8cc 	bl	8009208 <USBD_Get_USB_Status>
 8009070:	4603      	mov	r3, r0
 8009072:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009074:	7bbb      	ldrb	r3, [r7, #14]
}
 8009076:	4618      	mov	r0, r3
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b084      	sub	sp, #16
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
 8009086:	460b      	mov	r3, r1
 8009088:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800908a:	2300      	movs	r3, #0
 800908c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800908e:	2300      	movs	r3, #0
 8009090:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009098:	78fa      	ldrb	r2, [r7, #3]
 800909a:	4611      	mov	r1, r2
 800909c:	4618      	mov	r0, r3
 800909e:	f7fa fb43 	bl	8003728 <HAL_PCD_EP_ClrStall>
 80090a2:	4603      	mov	r3, r0
 80090a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090a6:	7bfb      	ldrb	r3, [r7, #15]
 80090a8:	4618      	mov	r0, r3
 80090aa:	f000 f8ad 	bl	8009208 <USBD_Get_USB_Status>
 80090ae:	4603      	mov	r3, r0
 80090b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090bc:	b480      	push	{r7}
 80090be:	b085      	sub	sp, #20
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	460b      	mov	r3, r1
 80090c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80090ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80090d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	da0b      	bge.n	80090f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80090d8:	78fb      	ldrb	r3, [r7, #3]
 80090da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80090de:	68f9      	ldr	r1, [r7, #12]
 80090e0:	4613      	mov	r3, r2
 80090e2:	00db      	lsls	r3, r3, #3
 80090e4:	4413      	add	r3, r2
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	440b      	add	r3, r1
 80090ea:	3316      	adds	r3, #22
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	e00b      	b.n	8009108 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80090f0:	78fb      	ldrb	r3, [r7, #3]
 80090f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80090f6:	68f9      	ldr	r1, [r7, #12]
 80090f8:	4613      	mov	r3, r2
 80090fa:	00db      	lsls	r3, r3, #3
 80090fc:	4413      	add	r3, r2
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	440b      	add	r3, r1
 8009102:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009106:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009108:	4618      	mov	r0, r3
 800910a:	3714      	adds	r7, #20
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	460b      	mov	r3, r1
 800911e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009120:	2300      	movs	r3, #0
 8009122:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009124:	2300      	movs	r3, #0
 8009126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800912e:	78fa      	ldrb	r2, [r7, #3]
 8009130:	4611      	mov	r1, r2
 8009132:	4618      	mov	r0, r3
 8009134:	f7fa f948 	bl	80033c8 <HAL_PCD_SetAddress>
 8009138:	4603      	mov	r3, r0
 800913a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800913c:	7bfb      	ldrb	r3, [r7, #15]
 800913e:	4618      	mov	r0, r3
 8009140:	f000 f862 	bl	8009208 <USBD_Get_USB_Status>
 8009144:	4603      	mov	r3, r0
 8009146:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009148:	7bbb      	ldrb	r3, [r7, #14]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b086      	sub	sp, #24
 8009156:	af00      	add	r7, sp, #0
 8009158:	60f8      	str	r0, [r7, #12]
 800915a:	607a      	str	r2, [r7, #4]
 800915c:	603b      	str	r3, [r7, #0]
 800915e:	460b      	mov	r3, r1
 8009160:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009162:	2300      	movs	r3, #0
 8009164:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009166:	2300      	movs	r3, #0
 8009168:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009170:	7af9      	ldrb	r1, [r7, #11]
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	f7fa fa3a 	bl	80035ee <HAL_PCD_EP_Transmit>
 800917a:	4603      	mov	r3, r0
 800917c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800917e:	7dfb      	ldrb	r3, [r7, #23]
 8009180:	4618      	mov	r0, r3
 8009182:	f000 f841 	bl	8009208 <USBD_Get_USB_Status>
 8009186:	4603      	mov	r3, r0
 8009188:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800918a:	7dbb      	ldrb	r3, [r7, #22]
}
 800918c:	4618      	mov	r0, r3
 800918e:	3718      	adds	r7, #24
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b086      	sub	sp, #24
 8009198:	af00      	add	r7, sp, #0
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	607a      	str	r2, [r7, #4]
 800919e:	603b      	str	r3, [r7, #0]
 80091a0:	460b      	mov	r3, r1
 80091a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091a4:	2300      	movs	r3, #0
 80091a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091a8:	2300      	movs	r3, #0
 80091aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80091b2:	7af9      	ldrb	r1, [r7, #11]
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	f7fa f9de 	bl	8003578 <HAL_PCD_EP_Receive>
 80091bc:	4603      	mov	r3, r0
 80091be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091c0:	7dfb      	ldrb	r3, [r7, #23]
 80091c2:	4618      	mov	r0, r3
 80091c4:	f000 f820 	bl	8009208 <USBD_Get_USB_Status>
 80091c8:	4603      	mov	r3, r0
 80091ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091cc:	7dbb      	ldrb	r3, [r7, #22]
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3718      	adds	r7, #24
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
	...

080091d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 80091e0:	4b03      	ldr	r3, [pc, #12]	@ (80091f0 <USBD_static_malloc+0x18>)
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	370c      	adds	r7, #12
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr
 80091ee:	bf00      	nop
 80091f0:	20000ccc 	.word	0x20000ccc

080091f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]

}
 80091fc:	bf00      	nop
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
 800920e:	4603      	mov	r3, r0
 8009210:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009212:	2300      	movs	r3, #0
 8009214:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009216:	79fb      	ldrb	r3, [r7, #7]
 8009218:	2b03      	cmp	r3, #3
 800921a:	d817      	bhi.n	800924c <USBD_Get_USB_Status+0x44>
 800921c:	a201      	add	r2, pc, #4	@ (adr r2, 8009224 <USBD_Get_USB_Status+0x1c>)
 800921e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009222:	bf00      	nop
 8009224:	08009235 	.word	0x08009235
 8009228:	0800923b 	.word	0x0800923b
 800922c:	08009241 	.word	0x08009241
 8009230:	08009247 	.word	0x08009247
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009234:	2300      	movs	r3, #0
 8009236:	73fb      	strb	r3, [r7, #15]
    break;
 8009238:	e00b      	b.n	8009252 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800923a:	2303      	movs	r3, #3
 800923c:	73fb      	strb	r3, [r7, #15]
    break;
 800923e:	e008      	b.n	8009252 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009240:	2301      	movs	r3, #1
 8009242:	73fb      	strb	r3, [r7, #15]
    break;
 8009244:	e005      	b.n	8009252 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009246:	2303      	movs	r3, #3
 8009248:	73fb      	strb	r3, [r7, #15]
    break;
 800924a:	e002      	b.n	8009252 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800924c:	2303      	movs	r3, #3
 800924e:	73fb      	strb	r3, [r7, #15]
    break;
 8009250:	bf00      	nop
  }
  return usb_status;
 8009252:	7bfb      	ldrb	r3, [r7, #15]
}
 8009254:	4618      	mov	r0, r3
 8009256:	3714      	adds	r7, #20
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <memset>:
 8009260:	4402      	add	r2, r0
 8009262:	4603      	mov	r3, r0
 8009264:	4293      	cmp	r3, r2
 8009266:	d100      	bne.n	800926a <memset+0xa>
 8009268:	4770      	bx	lr
 800926a:	f803 1b01 	strb.w	r1, [r3], #1
 800926e:	e7f9      	b.n	8009264 <memset+0x4>

08009270 <__libc_init_array>:
 8009270:	b570      	push	{r4, r5, r6, lr}
 8009272:	4d0d      	ldr	r5, [pc, #52]	@ (80092a8 <__libc_init_array+0x38>)
 8009274:	4c0d      	ldr	r4, [pc, #52]	@ (80092ac <__libc_init_array+0x3c>)
 8009276:	1b64      	subs	r4, r4, r5
 8009278:	10a4      	asrs	r4, r4, #2
 800927a:	2600      	movs	r6, #0
 800927c:	42a6      	cmp	r6, r4
 800927e:	d109      	bne.n	8009294 <__libc_init_array+0x24>
 8009280:	4d0b      	ldr	r5, [pc, #44]	@ (80092b0 <__libc_init_array+0x40>)
 8009282:	4c0c      	ldr	r4, [pc, #48]	@ (80092b4 <__libc_init_array+0x44>)
 8009284:	f000 f818 	bl	80092b8 <_init>
 8009288:	1b64      	subs	r4, r4, r5
 800928a:	10a4      	asrs	r4, r4, #2
 800928c:	2600      	movs	r6, #0
 800928e:	42a6      	cmp	r6, r4
 8009290:	d105      	bne.n	800929e <__libc_init_array+0x2e>
 8009292:	bd70      	pop	{r4, r5, r6, pc}
 8009294:	f855 3b04 	ldr.w	r3, [r5], #4
 8009298:	4798      	blx	r3
 800929a:	3601      	adds	r6, #1
 800929c:	e7ee      	b.n	800927c <__libc_init_array+0xc>
 800929e:	f855 3b04 	ldr.w	r3, [r5], #4
 80092a2:	4798      	blx	r3
 80092a4:	3601      	adds	r6, #1
 80092a6:	e7f2      	b.n	800928e <__libc_init_array+0x1e>
 80092a8:	08009350 	.word	0x08009350
 80092ac:	08009350 	.word	0x08009350
 80092b0:	08009350 	.word	0x08009350
 80092b4:	08009354 	.word	0x08009354

080092b8 <_init>:
 80092b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ba:	bf00      	nop
 80092bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092be:	bc08      	pop	{r3}
 80092c0:	469e      	mov	lr, r3
 80092c2:	4770      	bx	lr

080092c4 <_fini>:
 80092c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c6:	bf00      	nop
 80092c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ca:	bc08      	pop	{r3}
 80092cc:	469e      	mov	lr, r3
 80092ce:	4770      	bx	lr
